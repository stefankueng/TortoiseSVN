<?xml version="1.0"?>
<project name="Setup" default="setup" basedir=".">

	<target name="versioninfo">
		<nant target="versioninfo">
			<buildfiles>
				<include name="..\..\versioninfo.build" />
			</buildfiles>
		</nant>
		<loadfile file="VersionNumberInclude.in.wxi" property="versionwixfile">
			<filterchain>
				<replacetokens begintoken="$" endtoken="$">
					<token key="MajorVersion" value="${environment::get-variable('MajorVersion')}" />
					<token key="MinorVersion" value="${environment::get-variable('MinorVersion')}" />
					<token key="MicroVersion" value="${environment::get-variable('Microversion')}" />
					<token key="WCREV" value="${environment::get-variable('WCREV')}" />
				</replacetokens>
			</filterchain>
		</loadfile>
		<echo file="VersionNumberInclude.wxi" message="${versionwixfile}" />
		<property name="verstring" value="${environment::get-variable('MajorVersion')}.${environment::get-variable('MinorVersion')}.${environment::get-variable('MicroVersion')}.${environment::get-variable('WCREV')}" />
		<property name="msifilename" value="TortoiseSVN-${verstring}${devrelease}-${platform}-svn-1.6.10-dev" />
	</target>

	<target name="setup" depends="versioninfo">
		<if test="${configuration == 'debug'}">
			<echo message="Cannot create an installer from debug binaries." />
		</if>
		<if test="${configuration == 'release'}">
			<setenv>
				<variable name="DictionaryENUS" value="0" />
				<variable name="DictionaryENGB" value="0" />
				<variable name="IncludeCrashReportDll" value="0" />
			</setenv>

			<if test="${file::exists('..\..\..\Common\Spell\en_US.aff')}">
				<setenv>
					<variable name="DictionaryENUS" value="1" />
				</setenv>
			</if>
			<if test="${file::exists('..\..\..\Common\Spell\en_GB.aff')}">
				<setenv>
					<variable name="DictionaryENGB" value="1" />
				</setenv>
			</if>
			<if test="${file::exists('..\..\MYBUILD')}">
				<setenv>
					<variable name="IncludeCrashReportDll" value="1" />
				</setenv>
			</if>
			<if test="${platform == 'x64'}">
				<setenv>
					<variable name="Platform" value="x64" />
				</setenv>
			</if>
			<if test="${platform != 'x64'}">
				<setenv>
					<variable name="Platform" value="win32" />
				</setenv>
			</if>
            <if test="${studioversion == '2008'}">
                <setenv>
                    <variable name="VCVERSION" value="90" />
                    <variable name="VCPOLICYVERSION" value="9_0" />
                </setenv>
            </if>
            <if test="${studioversion == '2010'}">
                <setenv>
                    <variable name="VCVERSION" value="100" />
                </setenv>
            </if>

            <!-- find the path to the merge modules -->
			<script language="C#">
				<code>
					<![CDATA[
					  public static void ScriptMain(Project project)
					  {
						  project.Properties.Add("mergemodulepath", System.Environment.GetFolderPath(System.Environment.SpecialFolder.CommonProgramFiles)+"\\Merge Modules");
					  }
				  ]]>
				</code>
			</script>
			<setenv>
				<variable name="MergeModules" value="${mergemodulepath}" />
			</setenv>

			<!-- sign all binaries -->
			<if test="${file::exists('..\..\signinfo.txt')}">
				<foreach item="File" property="filename">
					<in>
						<items>
							<include name="..\..\bin\${configuration}${bindirextension}\bin\*.dll" />
							<include name="..\..\bin\${configuration}${bindirextension}\bin\*.exe" />
							<!-- the language dll are signed after they're treated with ResText (translated) -->
							<exclude name="..\..\bin\${configuration}${bindirextension}\bin\*lang.dll" />
							<!-- the overlays dll is signed by the 'Overlays' build target when the msm/msi are built -->
							<exclude name="..\..\bin\${configuration}${bindirextension}\bin\TortoiseOverlays.dll" />
						</items>
					</in>
					<do>
						<exec program="signtool">
							<arg value="sign" />
							<arg value="${signinfo}" />
							<arg value="${filename}" />
						</exec>
					</do>
				</foreach>
			</if>

			<exec program="candle">
				<arg value="-nologo" />
				<arg value="-out" />
				<arg value="..\..\bin\" />
				<arg value="TortoiseSVN.wxs" />
				<arg value="FeaturesFragment.wxs" />
				<arg value="StructureFragment.wxs" />
				<arg value="UIFragment.wxs" />
			</exec>
			<exec program="light">
				<arg value="-nologo" />
				<arg value="-sw1055" />
				<arg value="-sice:ICE03" />
				<arg value="-sice:ICE82" />
				<arg value="-sice:ICE83" />
				<arg value="-sval" if="${platform == 'x64'}" />
				<arg value="-out" />
				<arg value="..\..\bin\${msifilename}.msi" />
				<arg value="..\..\bin\TortoiseSVN.wixobj" />
				<arg value="..\..\bin\FeaturesFragment.wixobj" />
				<arg value="..\..\bin\StructureFragment.wixobj" />
				<arg value="..\..\bin\UIFragment.wixobj" />
			</exec>
			<delete>
				<fileset>
					<include name="..\..\bin\*.wixobj" />
					<include name="..\..\bin\*.wixpdb" />
				</fileset>
			</delete>

			<if test="${file::exists('..\..\signinfo.txt')}">
				<exec program="signtool">
					<arg value="sign" />
					<arg value="${signinfo}" />
					<arg value="..\..\bin\${msifilename}.msi" />
				</exec>
			</if>
		</if>
	</target>

</project>

