<?xml version="1.0" encoding="utf-8"?>
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
  <?include Includes.wxi?>
  <Product
  UpgradeCode="$(var.UpgradeGuid)"
  Name="$(var.ProductName) $(var.VersionNumberUserVisible) $(var.PlatformUserVisible)"
  Id="*"
  Version="$(var.VersionNumberInternal)"
  Manufacturer="TortoiseSVN"
  Language="1033"
  Codepage="1252">
    <Package
    Id="*"
    Keywords="$(var.PackageKeywords)"
    Description="$(var.PackageDescription)"
    Comments="$(var.PackageComments)"
    Manufacturer="$(var.PackageManufacturer)"
    InstallerVersion="301"
    Platform="$(var.PackagePlatforms)"
    Languages="1033"
    Compressed="yes"
    SummaryCodepage="1252"
    InstallPrivileges="elevated"/>

    <Upgrade Id="$(var.UpgradeGuid)" >
      <!-- upgrade is flagged if current-install is newer than or equal to package - TODO: should make a dialog appear asking user to confirm downgrade.  -->
      <UpgradeVersion Property="NEWERVERSIONDETECTED" Minimum="$(var.VersionNumberInternal)" OnlyDetect="yes" />

      <!-- flag is set if the install will trigger an upgrade of an existing install -->
      <UpgradeVersion Property="PREVIOUSVERSIONSINSTALLED" Maximum="$(var.VersionNumberInternal)" IncludeMaximum="no" MigrateFeatures="yes" />
    </Upgrade>

    <Media Id="1" Cabinet="TSVN.cab" EmbedCab="yes" CompressionLevel="high" />

    <Icon Id="TSVNIcon" SourceFile="..\Resources\Tortoise.ico" />

    <!-- Launch Condition related properties ................................................................................. -->
    <Property Id="ALLUSERS">1</Property>

    <Condition Message="[ProductName] requires Windows XP SP3 or later."><![CDATA[(VersionNT > 501) OR ((VersionNT = 501) AND (ServicePackLevel >= 3))]]></Condition>
    <?if $(env.Platform) = "win32" ?>
    <Condition Message="You are attempting to run the 32-bit installer on a 64-bit version of Windows. Please install the 64-bit version of TortoiseSVN instead.">NOT Msix64</Condition>
    <?endif ?>

    <?if $(env.Platform) = "x64" ?>
    <Upgrade Id="$(var.UpgradeGuid32)">
      <UpgradeVersion Minimum="0.0.0.0" OnlyDetect="yes" Property="WIN32TSVNFOUND" />
    </Upgrade>
    <Condition Message="Please uninstall all 32-bit versions of TortoiseSVN before installing [ProductName].">NOT WIN32TSVNFOUND</Condition>
    <?endif ?>

    <!-- Show/Don't-show changelog related properties and custom actions ..................................................... -->
    <Property Id="TEXTEDITOR">
      <DirectorySearch Id="FileSearchTextEditorExe" Path="[WindowsFolder]">
        <FileSearch Id="FileSearchTextEditorExe" Name="notepad.exe" />
      </DirectorySearch>
    </Property>
    <CustomAction Id="ShowChangelogAction" Property="TEXTEDITOR" ExeCommand="[INSTALLDIR]changelog.txt" Return="asyncNoWait" />
    <CustomAction Id="ShowDonatePage" BinaryKey="CustomActionsDLL" DllEntry="OpenDonatePage" />
    <CustomAction Id="KillCache" BinaryKey="CustomActionsDLL" DllEntry="TerminateCache" />
    <Binary Id="CustomActionsDLL" SourceFile="..\..\bin\$(var.ReleasePath)\bin\CustomActions.dll" />

    <!-- Unsafe-check properties and custom actions .......................................................................... -->
    <Property Id="VSDUIANDADVERTISED">This advertised application will not be installed because it might be unsafe. Contact your administrator to change the installation user interface option of the package to basic.</Property>
    <CustomAction Id="ERRCA_UIANDADVERTISED" Error="[VSDUIANDADVERTISED]" />

    <!-- Figure out where a previous installation was, if any ................................................................ -->
    <?if $(env.Platform) = "x64" ?>
    <CustomAction Id="DefaultTargetDir" Property="INSTALLDIR" Value="[ProgramFiles64Folder]$(var.ProductName)" Execute="immediate" />
    <Property Id="INSTALLDIR">
      <RegistrySearch Id="PreviousInstallLocationRegistrySearch" Root="HKLM" Key="Software\[Manufacturer]" Name="Directory" Type="raw" Win64="$(var.Win64YesNo)"/>
    </Property>
    <?else ?>
    <CustomAction Id="DefaultTargetDir" Property="INSTALLDIR" Value="[ProgramFilesFolder]$(var.ProductName)" Execute="immediate" />
    <Property Id="INSTALLDIR">
      <RegistrySearch Id="PreviousInstallLocationRegistrySearch" Root="HKLM" Key="Software\[Manufacturer]" Name="Directory" Type="raw" Win64="$(var.Win64YesNo)"/>
    </Property>
    <?endif ?>

    <DirectoryRef Id="TARGETDIR"/>

    <FeatureRef Id="DefaultFeature" />

    <UIRef Id="UIFrag" />

    <!-- Execute Sequencing ................................................................................................. -->
    <AdminExecuteSequence />
    <InstallExecuteSequence>
      <!-- AppSearch must be done before RemoveExistingProducts and before FindRelatedProducts -->
      <AppSearch Sequence="1"></AppSearch>
      <LaunchConditions After="AppSearch" />
      <Custom Action="DefaultTargetDir" After="LaunchConditions">INSTALLDIR=""</Custom>
      <!-- remove existing product after InstallFinalize. See http://support.microsoft.com/kb/905238 why we have to do this (the c-runtime
           is also installed in the SxS!).
           Note: registry only components won't get upgraded this way! This is because the keypath is a registry key, and that
           registry key already exists. So it won't get upgraded. Changing the GUID only makes this worse: the installer detects
           that the component doesn't exist and installs it, then the 'removeexistingproducts' is run and removes the old component,
           which has the same registry keys (but maybe different values) - so the whole component is missing after an upgrade. 
           The only way to overcome this problem is to *not* use registry-only components but always have a keypath pointing
           to a file with version info. -->
      <RemoveExistingProducts After="InstallFinalize"><![CDATA[PREVIOUSVERSIONSINSTALLED OR (NOT NEWERVERSIONDETECTED AND OKTODOWNGRADE = 1)]]></RemoveExistingProducts>
      <Custom Action="KillCache" After="RemoveExistingProducts">Installed</Custom>
    </InstallExecuteSequence>

    <!-- UI Sequencing ...................................................................................................... -->
    <AdminUISequence>
      <Show Dialog="FatalErrorDlg" OnExit="error" />
      <Show Dialog="UserExit" OnExit="cancel" />
      <Show Dialog="ExitDlg" OnExit="success" />
      <Show Dialog="PrepareDlg" Before="CostInitialize"><![CDATA[]]></Show>
      <Show Dialog="AdminWelcomeDlg" After="CostFinalize" />
      <Show Dialog="ProgressDlg" After="AdminWelcomeDlg" />
    </AdminUISequence>
    <InstallUISequence>
      <Show Dialog="FatalErrorDlg" OnExit="error" />
      <Show Dialog="UserExit" OnExit="cancel" />
      <Show Dialog="ExitDlg" OnExit="success" />
      <Show Dialog="PrepareDlg" After="LaunchConditions" />
      <Show Dialog="WelcomeDlg" After="MigrateFeatureStates"><![CDATA[NOT Installed]]></Show>
      <Show Dialog="ResumeDlg" After="WelcomeDlg"><![CDATA[Installed AND (RESUME OR Preselected)]]></Show>
      <Show Dialog="MaintenanceWelcomeDlg" After="ResumeDlg"><![CDATA[Installed AND NOT RESUME AND NOT Preselected]]></Show>
      <Show Dialog="ProgressDlg" After="MaintenanceWelcomeDlg" />

      <FindRelatedProducts Suppress="no">1</FindRelatedProducts>

      <Custom Action="DefaultTargetDir" After="PrepareDlg">INSTALLDIR=""</Custom>
      <Custom Action="ERRCA_UIANDADVERTISED" Before="AppSearch">ProductState=1</Custom>
    </InstallUISequence>
  </Product>
</Wix>


