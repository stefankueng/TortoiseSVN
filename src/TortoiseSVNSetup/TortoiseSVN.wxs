<?xml version="1.0" encoding="utf-8"?>
<Wix xmlns="http://schemas.microsoft.com/wix/2003/01/wi">
  <?include Includes.wxi?>
  <Product 	
		UpgradeCode="$(var.UpgradeGuid)" 
  	Name="$(var.ProductName) $(var.VersionNumberUserVisible) $(var.PlatformUserVisible)" 
		Id="????????-????-????-????-????????????"
		Version="$(var.VersionNumberInternal)"
		Manufacturer="TortoiseSVN" 
		Language="1033">
    <Package
			Id="????????-????-????-????-????????????"
			Keywords="$(var.PackageKeywords)" 
			Description="$(var.PackageDescription)" 
			Comments="$(var.PackageComments)" 
			Manufacturer="$(var.PackageManufacturer)" 
			InstallerVersion="300" 
			Platforms="$(var.PackagePlatforms)"  
			Languages="1033" 
			Compressed="yes" 
			SummaryCodepage="1252"/>

    <Upgrade Id="$(var.UpgradeGuid)" >
      <!-- upgrade is flagged if current-install is newer than or equal to package - TODO: should make a dialog appear asking user to confirm downgrade.  -->
      <UpgradeVersion Property="NEWERVERSIONDETECTED" Minimum="$(var.VersionNumberInternal)" OnlyDetect="yes" />

      <!-- flag is set if the install will trigger an upgrade of an existing install -->
      <UpgradeVersion Property="PREVIOUSVERSIONSINSTALLED" Maximum="$(var.VersionNumberInternal)" IncludeMaximum="no" />
    </Upgrade>

    <Media Id="1" Cabinet="TSVN.cab" EmbedCab="yes" CompressionLevel="high" />

    <Icon Id="TSVNIcon" src="..\Resources\Tortoise.ico" />

    <!-- Launch Condition related properties ................................................................................. -->
    <Property Id="VERSIONIE">
      <RegistrySearch Id="RegSearchIeVersion" Root="HKLM" Key="SOFTWARE\Microsoft\Internet Explorer" Name="Version" Type="raw" Win64="$(var.Win64YesNo)"/>
    </Property>
    <Condition Message="[ProductName] needs at least Internet Explorer 5">NOT ((VERSIONIE&lt;&lt;"1") OR (VERSIONIE&lt;&lt;"2") OR (VERSIONIE&lt;&lt;"3") OR (VERSIONIE&lt;&lt;"4"))</Condition>

    <!-- Check if MFC80 is already installed. If it is, then TSVN can be installed without Admin privileges.
		     If someone know a better way to check for the presence of MFC80, please tell me! -->
    <Property Id="VERSIONMFC">
      <DirectorySearch Id="DirSearchMFCDll" Path="[SystemFolder]">
        <FileSearch Id="FileSearchMFCDll" Name="mfc80u.dll" MinVersion="8.0.50727.41" MaxVersion="9.0.0.0" />
      </DirectorySearch>
    </Property>
    <Property Id="VERSIONMFC1">
      <DirectorySearch Id="DirSearchMFCDll1" Path="[WindowsFolder]" Depth="3">
        <FileSearch Id="FileSearchMFCDll1" Name="mfc80u.dll" MinVersion="8.0.50727.41" MaxVersion="9.0.0.0" />
      </DirectorySearch>
    </Property>

    <Property Id="ShowChangelogCheck">1</Property>

    <Condition Message="[ProductName] requires a Windows NT based OS (Windows 2000 or later, specifically).">VersionNT</Condition>
    <Condition Message="[ProductName] requires Windows 2000 or later."><![CDATA[VersionNT >= 500]]></Condition>
    <Condition Message="You must have Admin priviledges to install [ProductName].">((""&gt;&lt;VERSIONMFC) AND (""&gt;&lt;VERSIONMFC1)) OR (Privileged)</Condition>

    <!-- Show/Don't-show changelog related properties and custom actions ..................................................... -->
    <Property Id="TEXTEDITOR">
      <DirectorySearch Id="FileSearchTextEditorExe" Path="[WindowsFolder]">
        <FileSearch Id="FileSearchTextEditorExe" Name="notepad.exe" />
      </DirectorySearch>
    </Property>
    <CustomAction Id="Set_ShowChangelog" Property="ShowChangelog" Value="Yes" Return="check" />
    <CustomAction Id="ShowChangelogAction" Property="TEXTEDITOR" ExeCommand="[INSTALLDIR]changelog.txt" Return="asyncNoWait" />
    <CustomAction Id="KillCache" BinaryKey="CustomActionsDLL" DllEntry="TerminateCache" />
    <CustomAction Id="CleanupRegistry" BinaryKey="CustomActionsDLL" DllEntry="ClearRegistry" />
    <Binary Id="CustomActionsDLL" src="..\..\bin\$(var.ReleasePath)\bin\CustomActions.dll" />

    <!-- Unsafe-check properties and custom actions .......................................................................... -->
    <Property Id="VSDUIANDADVERTISED">This advertised application will not be installed because it might be unsafe. Contact your administrator to change the installation user interface option of the package to basic.</Property>
    <CustomAction Id="ERRCA_UIANDADVERTISED" Error="[VSDUIANDADVERTISED]" />

    <!-- Figure out where a previous installation was, if any ................................................................ -->
    <Property Id="INSTALLDIR">
      <RegistrySearch Id="PreviousInstallLocationRegistrySearch" Root="HKLM" Key="Software\[Manufacturer]" Name="Directory" Type="raw" Win64="$(var.Win64YesNo)"/>
    </Property>
    <?if $(env.Platform) = "x64" ?>
    <CustomAction Id="DefaultTargetDir" Property="INSTALLDIR" Value="[ProgramFiles64Folder]$(var.ProductName)" Execute="immediate" />
    <?else ?>
    <CustomAction Id="DefaultTargetDir" Property="INSTALLDIR" Value="[ProgramFilesFolder]$(var.ProductName)" Execute="immediate" />
    <?endif ?>

    <FragmentRef Id="StructureFragment"/>

    <FragmentRef Id="FeaturesFragment" />

    <FragmentRef Id="UIFragment" />

    <!-- Execute Sequencing ................................................................................................. -->
    <AdminExecuteSequence />
    <InstallExecuteSequence>
      <!-- AppSearch must be done before RemoveExistingProducts and before FindRelatedProducts -->
      <AppSearch Sequence="1"></AppSearch>
      <LaunchConditions After="AppSearch" />
      <RemoveExistingProducts After="InstallValidate"><![CDATA[PREVIOUSVERSIONSINSTALLED OR (NOT NEWERVERSIONDETECTED AND OKTODOWNGRADE = 1)]]></RemoveExistingProducts>
      <Custom Action="CleanupRegistry" After="RemoveExistingProducts"></Custom>
      <Custom Action="KillCache" After="CleanupRegistry">Installed</Custom>
      <ScheduleReboot After="RegisterProduct" />
    </InstallExecuteSequence>

    <!-- UI Sequencing ...................................................................................................... -->
    <AdminUISequence>
      <Show Dialog="FatalErrorDlg" OnExit="error" />
      <Show Dialog="UserExit" OnExit="cancel" />
      <Show Dialog="ExitDlg" OnExit="success" />
      <Show Dialog="PrepareDlg" Before="CostInitialize"><![CDATA[]]></Show>
      <Show Dialog="AdminWelcomeDlg" After="CostFinalize" />
      <Show Dialog="ProgressDlg" After="AdminWelcomeDlg" />
    </AdminUISequence>
    <InstallUISequence>
      <Show Dialog="FatalErrorDlg" OnExit="error" />
      <Show Dialog="UserExit" OnExit="cancel" />
      <Show Dialog="ExitDlg" OnExit="success" />
      <Show Dialog="PrepareDlg" After="LaunchConditions" />
      <Show Dialog="WelcomeDlg" After="MigrateFeatureStates"><![CDATA[NOT Installed]]></Show>
      <Show Dialog="ResumeDlg" After="WelcomeDlg"><![CDATA[Installed AND (RESUME OR Preselected)]]></Show>
      <Show Dialog="MaintenanceWelcomeDlg" After="ResumeDlg"><![CDATA[Installed AND NOT RESUME AND NOT Preselected]]></Show>
      <Show Dialog="ProgressDlg" After="MaintenanceWelcomeDlg" />

      <FindRelatedProducts Suppress="no">1</FindRelatedProducts>

      <Custom Action="DefaultTargetDir" After="PrepareDlg" />
      <Custom Action="ERRCA_UIANDADVERTISED" Before="AppSearch">ProductState=1</Custom>
      <Custom Action="Set_ShowChangelog" After="AppSearch">NOT Installed</Custom>
    </InstallUISequence>
  </Product>
</Wix>

