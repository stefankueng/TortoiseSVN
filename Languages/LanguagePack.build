<?xml version="1.0"?>
<!--
============================================================ 
 $Date$
 $Author$
 $Rev$
============================================================ 

NAnt build script for the TortoiseSVN language pack installers

-->

<project name="LanguagePack" default="all" basepath=".">
	<description>
		Builds the Language pack installers
	</description>
	
	<target name="clean">
		<description>
			Removes all previously built language pack installers.
		</description>
		<delete>
			<fileset>
				<include name="..\bin\Tortoise*.dll" />
				<include name="..\bin\LanguagePack*.exe" />
			</fileset>
		</delete>
	</target>

	<target name="createecho2">
		<script language="C#" prefix="tsvn">
			<imports>
				<import namespace="System.Globalization" />
				<import namespace="System.Xml" />
				<import namespace="NAnt.Core.Attributes" />
				<import namespace="NAnt.Core.Util" />
				<import namespace="NAnt.Core.Tasks" />
			</imports>
			<code>
				<![CDATA[
					/* Based on EchoTask.cs NAnt 0.85-rc4 */
					/* Includes support for different Encoding, if none is set, it uses ANSI (Default) */

					[TaskName("echo2")]
					public class Echo2Task : Task 
					{
						#region Private Instance Fields

						private string _message;
						private string _contents;
						private FileInfo _file;
						private bool _append = false;
						private Level _messageLevel = Level.Info;
						private Encoding _encoding;

						#endregion Private Instance Fields

						#region Public Instance Properties

						[TaskAttribute("message")]
						public string Message 
						{
							get { return _message; }
							set 
							{
								if (!StringUtils.IsNullOrEmpty(value)) 
								{
									if (!StringUtils.IsNullOrEmpty(Contents)) 
									{
										throw new ValidationException("Inline content and the message attribute are mutually exclusive in the <echo> task.", Location);
									} 
									else 
									{
										_message = value;
									}
								} 
								else 
								{
									_message = null; 
								}
							}
						}

						public string Contents 
						{
							get { return _contents; }
							set 
							{ 
								if (!StringUtils.IsNullOrEmpty(value)) 
								{
									if (!StringUtils.IsNullOrEmpty(Message)) 
									{
										throw new ValidationException("Inline content and the message attribute are mutually exclusive in the <echo> task.", Location);
									} 
									else 
									{
										_contents = value;
									}
								} 
								else 
								{
									_contents = null;
								}
							}
						}

						[TaskAttribute("file")]
						public FileInfo File 
						{
							get { return _file; }
							set { _file = value; }
						}

						[TaskAttribute("append")]
						public bool Append 
						{
							get { return _append; }
							set { _append = value; }
						}

						[TaskAttribute("level")]
						public Level MessageLevel 
						{
							get { return _messageLevel; }
							set 
							{
								if (!Enum.IsDefined(typeof(Level), value)) 
								{
									throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, "An invalid level {0} was specified.", value)); 
								} 
								else 
								{
									this._messageLevel = value;
								}
							}
						}

						[TaskAttribute("encoding")]
						public Encoding Encoding 
						{
							get { return _encoding; }
							set { _encoding = value; }
						}

						#endregion Public Instance Properties

						#region Override implementation of Task

						protected override void ExecuteTask() 
						{
							if (File != null) 
							{ // output to file
								try 
								{
									// ensure the output directory exists
									if (!File.Directory.Exists) 
									{
										File.Directory.Create();
										File.Directory.Refresh();
									}

									// determine character encoding to use
									Encoding encoding = (Encoding != null) ? Encoding : Encoding.Default;
									// write the message to the file
									using (StreamWriter writer = new StreamWriter(File.FullName, Append, encoding)) 
									{
										if (!StringUtils.IsNullOrEmpty(Message)) 
										{
											writer.WriteLine(Message);
										} 
										else if (!StringUtils.IsNullOrEmpty(Contents)) 
										{
											writer.WriteLine(Contents);
										} 
										else 
										{
											writer.WriteLine();
										}
									}
								} 
								catch (Exception ex) 
								{
									throw new BuildException(string.Format(CultureInfo.InvariantCulture,
										"Failed to write message to file '{0}'.", File.FullName), 
										Location, ex);
								}
							} 
							else 
							{ // output to build log
								if (!StringUtils.IsNullOrEmpty(Message)) 
								{
									Log(MessageLevel, Message);
								} 
								else if (!StringUtils.IsNullOrEmpty(Contents)) 
								{
									Log(MessageLevel, Contents);
								} 
								else 
								{
									Log(MessageLevel, string.Empty);
								}
							}
						}

						protected override void InitializeTask(XmlNode taskNode) 
						{
							Contents = Project.ExpandProperties(taskNode.InnerText, Location);
						}

						#endregion Override implementation of Task
					}
				]]>
			</code>
		</script>
	</target>
	
	<target name="all">
		<description>
			Builds the installers.
		</description>
		<call target="createecho2" />
		<loadfile file="Languages.txt" property="languagelines" />
		<!-- the next line is split in two because we need the newline in the string -->
		<foreach item="String" in="${languagelines}" delim="
" property="langline">
			<call target="doit" unless="${string::starts-with(langline, '#') or string::get-length(langline)==0}" failonerror="false"/>
		</foreach>
	</target>
	
	<target name="doit">
		<property name="platformfolder" value="${configuration}${bindirextension}" />

		<property name="ResTextFileName" value="..\bin\release${bindirextension}\bin\restext.exe" />
		<property name="ResTextFileName" value="..\bin\release\bin\restext.exe" if="${crosscompile == 'yes'}" />

		<regex 
			pattern="^(?'langISO'[A-z_]+);[ \t]+(?'langCC'\d+);[ \t]+(?'langhelpfile'\d+);[ \t]+(?'langUI'.+);[ \t]+(?'langweb'.+);[ \t]+(?'langnative'.+)" 
			input="${langline}"
		/>
		<echo message="Building ${langweb} dlls and installer" />
		<!-- create the dlls -->
		<exec program="${ResTextFileName}" failonerror="false">
			<arg value="apply" />
			<arg value="..\bin\${platformfolder}\bin\TortoiseProcLang.dll" />
			<arg value="..\bin\TortoiseProc${langCC}.dll" />
			<arg value="Tortoise_${langISO}.po" />
		</exec>
		<exec program="${ResTextFileName}" failonerror="false">
			<arg value="apply" />
			<arg value="..\bin\${platformfolder}\bin\TortoiseMergeLang.dll" />
			<arg value="..\bin\TortoiseMerge${langCC}.dll" />
			<arg value="Tortoise_${langISO}.po" />
		</exec>
		<exec program="${ResTextFileName}" failonerror="false">
			<arg value="apply" />
			<arg value="..\bin\${platformfolder}\bin\TortoiseBlameLang.dll" />
			<arg value="..\bin\TortoiseBlame${langCC}.dll" />
			<arg value="Tortoise_${langISO}.po" />
		</exec>
		<exec program="${ResTextFileName}" failonerror="false">
			<arg value="apply" />
			<arg value="..\bin\${platformfolder}\bin\TortoiseIDiffLang.dll" />
			<arg value="..\bin\TortoiseIDiff${langCC}.dll" />
			<arg value="Tortoise_${langISO}.po" />
		</exec>
		<!-- create the files for the installer -->
		<echo2 file="product.nsh">!define PRODUCT_NAME "TortoiseSVN ${langnative}"</echo2>
		<echo2 file="product.nsh" append="true">!define CountryCode "${langISO}"</echo2>
		<echo2 file="product.nsh" append="true">!define CountryID "${langCC}"</echo2>
		<echo2 file="product.nsh" append="true">!define InstLang "${langUI}"</echo2>
		<echo2 file="product.nsh" append="true" if="${langhelpfile == '1'}">!define LangHelp</echo2>
		<echo2 file="product.nsh" append="true" if="${devrelease != '-dev'}">!define HelpFatal</echo2>
		<echo2 file="product.nsh" append="true">!include "FindTSVN${platform}.nsh"</echo2>
		<!-- create the mo files -->
		<exec program="msgfmt" if="${file::exists('..\ext\Subversion\Subversion\po\${langISO}.po')}" failonerror="false" >
			<arg value="..\ext\Subversion\Subversion\po\${langISO}.po" />
			<arg value="-o" />
			<arg value="subversion.mo" />
			<arg value="-f" />
		</exec>
		<echo file="product.nsh" append="true" if="${file::exists('subversion.mo')}">!define MoFile "subversion.mo"</echo>
		<if test="${environment::variable-exists('MajorVersion')}">
			<loadfile file="LanguagePack.in" property="versionnsifile">
				<filterchain>
					<replacetokens begintoken="$" endtoken="$">
						<token key="MajorVersion" value="${environment::get-variable('MajorVersion')}" />
						<token key="MinorVersion" value="${environment::get-variable('MinorVersion')}" />
						<token key="MicroVersion" value="${environment::get-variable('Microversion')}" />
						<token key="WCREV" value="${environment::get-variable('WCREV')}" />
						<token key="DEVRELEASE" value="${devrelease}" />
						<token key="PLATFORM" value="${platform}" />
					</replacetokens>
				</filterchain>
			</loadfile>
			<echo file="LanguagePack.nsi" message="${versionnsifile}" />
		</if>
		<copy file="LanguagePack.in" tofile="LanguagePack.nsi" failonerror="false" unless="${environment::variable-exists('MajorVersion')}"/>
		
		<exec program="MakeNSIS" failonerror="false">
			<arg value="/V1" />
			<arg value="LanguagePack.nsi" />
		</exec>
		<delete file="..\bin\TortoiseProc${langCC}.dll" failonerror="false" />
		<delete file="..\bin\TortoiseMerge${langCC}.dll" failonerror="false" />
		<delete file="..\bin\TortoiseBlame${langCC}.dll" failonerror="false" />
		<delete file="..\bin\TortoiseIDiff${langCC}.dll" failonerror="false" />
		<delete file="subversion.mo" failonerror="false" />
	</target>
</project>















