First, you need to install the compiler package.

A. You need VS.NET2005 (or at least Visual C++ .NET 2005) to allow
   building of the full TortoiseSVN package. This is the recommended
   option, but it is not free :-(
   If you want to build the msi make sure the "Tools for Redistributing
   Applications" are installed.
   Also, make sure ServicePack 1 for VS.NET2005 is installed.

B. If you do not have access to VS.NET you can download the free
   Visual C++ 2005 Express Edition.
   This will allow you to build the subversion libraries and the
   SubWCRev, TortoiseBlame, TortoiseUDiff, TortoiseIDiff, CrashRpt
   and ResText projects only.
   - Install Visual C++ 2005 Express Edition.
     Download it from http://msdn.microsoft.com/vstudio/express/visualc/
   - Install Microsoft Platform SDK for Windows Server 2003 SP1
     You need at least the following components of the SDK:
       - Windows Core SDK
       - Web Workshop (IE) SDK
       - Data Access Services
       - Debugging Tools
   - Install MASM 6.15 from: http://win32assembly.online.fr/files/masm615.zip
     and add it to the PATH environment variable
   Do not bother to install WiX as you cannot build very much.

C. If you plan to build 64 bit packages, install the package 
   - "Language Tools" -> "Visual C++" -> "X64 Compilers and Tools" 
     available in the VS.NET2005 Professional and higher. 
     This will provide you with a cross-compiler and a suitable 
     command shell. On XP64, there will also be a native compiler.
   - Using the x64 SDK (available for free download in the Windows 
     Server 2003 Platform SDK on http://www.microsoft.com/downloads)
     may work as well but has not been tested.


Next you need to install some utilities/programs:
- Java runtime            : http://java.sun.com, http://java.sun.com/webapps/getjava/BrowserRedirect
- Python 2.4(*)           : http://www.python.org/windows/
- libxml2 python bindings : http://users.skynet.be/sbi/libxml-python/
- Perl                    : http://www.activestate.com/Products/ActivePerl/
- WiX(*)                  : http://wix.sourceforge.net
- NAnt(*)                 : http://nant.sourceforge.net
- gdiplus merge module(#) : http://www.installshield.com/downloads/modules.asp?prod=ISX&lan=english&xmlUse=y

(*) Add the paths of the binaries to the PATH environment variable
    You may have to logoff/logon to make the new environment variables take effect!
(#) Copy/Move the gdiplus.msm file to the "%CommonProgramFiles%\Merge Modules" directory


Next you need to download some more:
- OpenSSL source          : http://www.openssl.org/source/
- ZLib source             : http://www.gzip.org/zlib/
- tools collection        : http://tortoisesvn.tigris.org/files/documents/406/37871/Tools.zip
- dictionaries/thesauri   : http://lingucomponent.openoffice.org/


Now you're almost ready. Only a few more steps to do:
- create a new folder on your harddisk, e.g. SVN. Make sure you have at least
  1.5 GB of free space left!!!
- create a new folder in SVN called 'common'
- unzip the openssl sourcecode into 'common', and rename the folder to 'openssl'
- unzip the zlib sourcecode into 'common' and rename the folder to 'zlib'
- copy the dictionaries/thesauri to 'common\spell'.
  note that the names of the files are important!
  They have to be en_US.aff, en_US.dic, en_GB.aff and en_GB.dic (or whatever language you use).
  Warning: only the thesaurus in the format for OO2 will work. Earlier versions will
  crash TortoiseSVN!
- Checkout the TortoiseSVN sources from the Subversion repository into
  SVN\TortoiseSVN
- unzip the file 'tools.zip' into a folder, we suggest SVN\TortoiseSVN\Tools.
  Note: the path to the tools folder must not have special chars in it or spaces.
  If you checked out the TortoiseSVN source to such a location, you can store
  the tools folder somewhere else.
- Make a copy of the file default.build.user.tmpl in the TSVN root folder and
  rename that copy to default.build.user. Then simply adjust the paths as mentioned
  in that file.
- Make a copy of the file doc\doc.build.user.tmpl and rename that copy to 
  doc\doc.build.user. Then adjust the paths in that file according to your
  setup.
- The docs for certain languages need special tweaking. If there is a 'userconfig.template.xml'
  file in doc\xsl\languagecode\, copy that file to 'userconfig.xml' and adjust the
  paths in that file to your OS setup.


Building 32 bit packages

  Hint: before you can start building TortoiseSVN, you need to call the vsvars32.bat
  file which is located in %VS80COMNTOOLS%. If you don't want to do that every time,
  you can have the command shell call this file automatically:
  - Create a .reg file with the following code and merge it in your registry
    Windows Registry Editor Version 5.00

    [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Command Processor]
    "AutoRun"="\"C:\\Program Files\\Microsoft Visual Studio 8\\Common7\\Tools\\vsvars32.bat\""
  Next time you start the command prompt, that file will be executed automatically.

  Note that for the Express edition you need to sort out the vars for the platform SDK
  as well. The easiest way I found was to edit the supplied VC++ file
  C:\Program Files\Microsoft Visual Studio 8\VC\vcvarsall.bat
  Look for the :x86 label and add an extra call to setenv.cmd as shown below:

	:x86
	if not exist "%~dp0bin\vcvars32.bat" goto missing
	call "%~dp0bin\vcvars32.bat"
	rem Added SDK setup 14/12/2005 SJL
	call "C:\Program Files\Microsoft Platform SDK\setenv.cmd"
	goto :eof

  Then call vsvarsall.bat when you start your command processor instead
  of vsvars32 as described above.

  Now, if you got some time left you can run the build script to compile
  TortoiseSVN. Grab a cup of coffee - it can take up to two hours, depending on
  how fast your computer is (on mine, it takes 1 hour and 50 minutes)!

  > nant
  will show you some help about the targets you can use

  > nant setup
  will compile everything, including docs and languagepacks and create the msi installer

  Note: you may notice some compiler errors when the build script compiles 
  Subversion. The errors you will see are:
  > error C2065: 'SVN_FS_WANT_DB_MAJOR' : undeclared identifier
  > error C2065: 'SVN_FS_WANT_DB_MINOR' : undeclared identifier
  > error C2065: 'SVN_FS_WANT_DB_PATCH' : undeclared identifier
  This is expected and you don't have to worry about that. The reason for those
  errors is that TortoiseSVN builds the Subversion library twice. Once with 
  all the ra-layers and all dbs, and once without those. The errors come
  from that 'raw' build, but from libraries which aren't used in that build
  anyway. Sure, the build script could just compile the libraries which
  are really needed for that build, but it's much easier to just build the
  whole solution instead of individual projects.
  If you want to improve the build script to get rid of those errors, be our guest!

  If you are building using VC++ Express, your options are somewhat limited.
  Firstly you need to change the build tool in default.build.user.
  There is already a line to set this up which you need to un-comment:

	<property name="buildtool" value="vcexpress.exe" />

  Now you need to build the Subversion libraries:
  > nant Subversion

  Note that the VC Express compiler works in the background without a console
  window. There is a lot of disk activity with no apparent result showing
  in the Nant console window. Be patient!

  Before building the applications, update the version info:
  > nant VersionInfo

  Now you can open the SubWCRev.vcproj file to start the IDE.
  Some error dialogs will come up, which you can ignore.
  Right click on SubWCRev and 'Build'.

  You can also right click on TortoiseBlame and TortoiseIDiff and build those.


Building 64 bit packages on win32 (cross-compile)

  First, we build some 32-bit SVN utilities you will need later 
  during the build process. Follow the instruction above or just
  open "Microsoft Visual Studio 2005" -> "Visual Studio Tools" ->
  "Visual Studio 2005 Command Prompt", change to the TSVN source
  directory and run

	nant release binaries

  Now, build the x64 packages: Open 
  "Microsoft Visual Studio 2005" -> "Visual Studio Tools" -> 
  "Visual Studio 2005 x64 Cross Tools Command Prompt", change to the
  TSVN source directory and run

	nant x64 cross release setup

  After the script finished, the packages can be found in .\bin .


Building 64 bit packages on x64

  To build native packages on your 64 bit Windows, just open
  "Microsoft Visual Studio 2005" -> "Visual Studio Tools" -> 
  "Visual Studio 2005 Win64 Command Prompt", change to the
  TSVN source directory and run

	nant x64 release setup

  After the script finished, the packages can be found in .\bin .
