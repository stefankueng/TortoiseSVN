// To build this file, execute "nant APIDocs"
// After that, you can read the compiled version at TortoiseSVN\doc\output\TortoiseSVNAPI.chm

/**
\page build Build instructions

\section Introduction Introduction
Compiling TortoiseSVN is not very difficult, but it requires several steps
to finish, at least the first time.

Unlike other big open source projects, once you have built all the libraries
TortoiseSVN depends on, you can use the familiar VisualStudio IDE to build
and debug the binaries. No need to run the build script for every little change.

So don't give up if you read through the next section and all the requirements.
You only have to do this once.

\section Requirements Requirements

\subsection Requirements1 First, you need to install the compiler package.

-# You need VS2012 with Update 2 [http://support.microsoft.com/kb/2797912] to allow
   building of the full TortoiseSVN package.
   This is the recommended option, but it is not free :-(
   If you want to build the msi make sure the "Tools for Redistributing
   Applications" are installed.

\subsection Requirements2 Next you need to install some utilities/programs.
- Java runtime                     http://www.java.com
- Python 2.6(\b 1 \b 3)            http://www.python.org/windows/
- libxml2 python bindings (\b 2)   http://users.skynet.be/sbi/libxml-python/
- Perl                             http://www.activestate.com/Products/ActivePerl/
- WiX3.7(\b 1)                     http://wix.codeplex.com/
- NAnt 0.92 (\b 1)                 http://nant.sourceforge.net

(\b 1) Add the paths of the binaries to the PATH environment variable. You may have to
    logoff/logon to make the new environment variables take effect!
(\b 2) right-click on the installer file and "run as administrator" to install it.
(\b 3) use 32 bit installer (even on x64 OS)

\subsection Requirements3 Next you need to download some more.
- tools collection            http://code.google.com/p/tortoisesvn/downloads/list
- dictionaries/thesauri(\b Optional) http://wiki.openoffice.org/wiki/Dictionaries

\subsection Requirements4 Finally, you may need to install some fonts.
- Arabic(\b Optional)         http://www7.bev.net/civic/icb/quran/Iqraa_ttf.zip
- Japanese(\b Optional)       msgothic.ttc and msmincho.ttc should be available
                              if you activate support for international fonts in your OS.
- Chinese(\b Optional)        simhei.ttf and simsun.httf should be available
                              if you activate support for international fonts in your OS.

\section Preparations Preparations

Now you're almost ready. Only a few more steps to do:
- create a new folder on your harddisk, e.g. SVN. Make sure you have at least
  1.5 GB of free space left!!!
- create a new folder in SVN called 'common'
- copy the dictionaries/thesauri to 'common\spell'.
  note that the names of the files are important!
  They have to be en_US.aff, en_US.dic, en_GB.aff and en_GB.dic (or whatever language you use).
  Warning: only the thesaurus in the format for OO2 will work. Earlier versions will
  crash TortoiseSVN!  You can copy these files from your C:\Program Files\TortoiseSVN\Languages folder.
- Checkout the TortoiseSVN sources from the Subversion repository into
  SVN\TortoiseSVN
- unzip the file 'Tools.zip' into a folder, we suggest SVN\TortoiseSVN\Tools.
  Note: the path to the tools folder must not have special chars in it or spaces.
  If you checked out the TortoiseSVN source to such a location, you can store
  the tools folder somewhere else.
- Make a copy of the file default.build.user.tmpl in the TortoiseSVN root folder and
  rename that copy to default.build.user. Then adjust the paths as mentioned
  in that file. You may leave it unchanged if you installed / copied everything
  into the suggested default paths.
- Make a copy of the file doc\doc.build.user.tmpl and rename that copy to
  doc\doc.build.user. Then adjust the paths in that file according to your
  setup.
- Unzip (if necessary) and copy the font files into %WINDIR%\Fonts.
  You will need them only if you are building the respective language packs.


\section build32 Building 32 bit packages

  Hint: before you can start building TortoiseSVN, you need to call the vsvars32.bat
  file which is located in \%VS110COMNTOOLS%.

  Now, if you got some time left you can run the build script to compile
  TortoiseSVN. Grab a cup of coffee - it can take up to two hours, depending on
  how fast your computer is (on mine, it takes 1 hour and 50 minutes)!

\verbatim
  > nant
\endverbatim
  will show you some help about the targets you can use

\verbatim
  > nant setup
\endverbatim
  will compile everything, including docs and languagepacks and create the msi installer

  If you encounter any build errors, you can run nant again like this:
\verbatim
  > nant setup -l:buildlog.txt
\endverbatim
  which will create a build log file which you can use to analyse where
  exactly the build failed.

  Now you need to build the Subversion libraries:
\verbatim
  > nant Subversion
\endverbatim

\section build64cross Building 64 bit packages on win32 (cross-compile)

  First, we build some 32-bit SVN utilities you will need later
  during the build process. Follow the instruction above or just
  open "Microsoft Visual Studio 2012" -> "Visual Studio Tools" ->
  "Visual Studio 2012 Command Prompt", change to the TortoiseSVN source
  directory and run

\verbatim
  > nant release binaries
\endverbatim

  Now, build the x64 packages: Open
  "Microsoft Visual Studio 2012" -> "Visual Studio Tools" ->
  "Visual Studio 2012 x64 Cross Tools Command Prompt", change to the
  TortoiseSVN source directory and run

\verbatim
  > nant x64 cross release setup
\endverbatim

  After the script finished, the packages can be found in bin.

\section build64 Building 64 bit packages on x64

  To build native packages on your 64 bit Windows, just open
  "Microsoft Visual Studio 2012" -> "Visual Studio Tools" ->
  "Visual Studio 2012 Win64 Command Prompt", change to the
  TortoiseSVN source directory and run

\verbatim
  > nant x64 release setup
\endverbatim

  After the script finished, the packages can be found in bin.

\section clean Cleaning the build directories

  To clean the files you just built, open a command prompt as explained
  above, change to the TortoiseSVN source directory and run

\verbatim
  > nant release clean
\endverbatim

  You have to clean when alterning between x86 and x64 builds. You will find that
  Language\Tortoise.pot gets deleted. This is normal. This is a generated file
  that is in the repository so the translators don't need to build the whole
  thing to update documentation.

\section buildhelp Learning the current build options

  Many other settings can be used. You can have a description of the possible targets
  by running

\verbatim
  > nant help
\endverbatim

*/
