Index: be_all_s.c
===================================================================
--- be_all_s.c	(revision 26343)
+++ be_all_s.c	(working copy)
@@ -14,7 +14,7 @@
  * have tiny little source modules containing nothing but
  * declarations of appname, for as long as I can...
  */
-const char *const appname = "PuTTY";
+const char *const appname = "TortoisePlink";
 
 #ifdef TELNET_DEFAULT
 const int be_default_protocol = PROT_TELNET;
Index: cmdline.c
===================================================================
--- cmdline.c	(revision 26343)
+++ cmdline.c	(working copy)
@@ -363,7 +363,7 @@
 	conf_set_int(conf, CONF_nopty, TRUE);   /* command => no terminal */
 	sfree(command);
     }
-    if (!strcmp(p, "-P")) {
+    if ((!strcmp(p, "-P"))||(!strcmp(p, "-p"))) {
 	RETURN(2);
 	UNAVAILABLE_IN(TOOLTYPE_NONNETWORK);
 	SAVEABLE(1);		       /* lower priority than -ssh,-telnet */
Index: version.h
===================================================================
--- version.h	(revision 26343)
+++ version.h	(working copy)
@@ -1,5 +1,5 @@
 /* Generated by automated build script */
 #define RELEASE 0.64
 #define TEXTVER "Release 0.64"
-#define SSHVER "PuTTY-Release-0.64"
+#define SSHVER "TortoisePlink-Release-0.64"
 #define BINARY_VERSION 0,64,0,0
Index: windows/wincons.c
===================================================================
--- windows/wincons.c	(revision 26343)
+++ windows/wincons.c	(working copy)
@@ -52,8 +52,6 @@
                         void (*callback)(void *ctx, int result), void *ctx)
 {
     int ret;
-    HANDLE hin;
-    DWORD savemode, i;
 
     static const char absentmsg_batch[] =
 	"The server's host key is not cached in the registry. You\n"
@@ -68,13 +66,12 @@
 	"think it is.\n"
 	"The server's %s key fingerprint is:\n"
 	"%s\n"
-	"If you trust this host, enter \"y\" to add the key to\n"
+	"If you trust this host, hit Yes to add the key to\n"
 	"PuTTY's cache and carry on connecting.\n"
 	"If you want to carry on connecting just once, without\n"
-	"adding the key to the cache, enter \"n\".\n"
-	"If you do not trust this host, press Return to abandon the\n"
-	"connection.\n"
-	"Store key in cache? (y/n) ";
+	"adding the key to the cache, hit No.\n"
+	"If you do not trust this host, hit Cancel to abandon the\n"
+	"connection.\n";
 
     static const char wrongmsg_batch[] =
 	"WARNING - POTENTIAL SECURITY BREACH!\n"
@@ -96,17 +93,14 @@
 	"The new %s key fingerprint is:\n"
 	"%s\n"
 	"If you were expecting this change and trust the new key,\n"
-	"enter \"y\" to update PuTTY's cache and continue connecting.\n"
+	"hit Yes to update PuTTY's cache and continue connecting.\n"
 	"If you want to carry on connecting but without updating\n"
-	"the cache, enter \"n\".\n"
-	"If you want to abandon the connection completely, press\n"
-	"Return to cancel. Pressing Return is the ONLY guaranteed\n"
-	"safe choice.\n"
-	"Update cached key? (y/n, Return cancels connection) ";
+	"the cache, hit No.\n"
+	"If you want to abandon the connection completely, hit\n"
+	"Cancel. Hitting Cancel is the ONLY guaranteed safe\n" "choice.\n";
 
     static const char abandoned[] = "Connection abandoned.\n";
 
-    char line[32];
 	static const char mbtitle[] = "%s Security Alert";
 
     /*
@@ -121,7 +115,7 @@
 	int mbret;
 	char *message, *title;
 
-	message = dupprintf(wrongmsg, keytype, fingerprint, appname);
+	message = dupprintf(wrongmsg, keytype, fingerprint);
 	title = dupprintf(mbtitle, appname);
 
 	mbret = MessageBox(GetParentHwnd(), message, title, MB_ICONWARNING | MB_YESNOCANCEL | MB_DEFBUTTON3);
@@ -138,10 +132,11 @@
 	else
 		return 0;
 	}
+
     if (ret == 1) {		       /* key was absent */
 	int mbret;
 	char *message, *title;
-	message = dupprintf(absentmsg, keytype, fingerprint, appname);
+	message = dupprintf(absentmsg, keytype, fingerprint);
 	title = dupprintf(mbtitle, appname);
 	mbret = MessageBox(GetParentHwnd(), message, title,
 		MB_ICONWARNING | MB_ICONWARNING | MB_YESNOCANCEL | MB_DEFBUTTON3);
@@ -177,11 +172,6 @@
 	"The first %s supported by the server is\n"
 	"%s, which is below the configured warning threshold.\n"
 	"Continue with connection? (y/n) ";
-    static const char msg_batch[] =
-	"The first %s supported by the server is\n"
-	"%s, which is below the configured warning threshold.\n"
-	"Connection abandoned.\n";
-    static const char abandoned[] = "Connection abandoned.\n";
 
 	static const char mbtitle[] = "%s Security Alert";
 
@@ -309,7 +299,6 @@
 
 int console_get_userpass_input(prompts_t *p, unsigned char *in, int inlen)
 {
-    HANDLE hin, hout;
     size_t curr_prompt;
 
     /*
Index: windows/winmisc.c
===================================================================
--- windows/winmisc.c	(revision 26343)
+++ windows/winmisc.c	(working copy)
@@ -142,7 +142,7 @@
 
 BOOL init_winver(void)
 {
-    ZeroMemory(&osVersion, sizeof(osVersion));
+    SecureZeroMemory(&osVersion, sizeof(osVersion));
     osVersion.dwOSVersionInfoSize = sizeof (OSVERSIONINFO);
     return GetVersionEx ( (OSVERSIONINFO *) &osVersion);
 }
Index: windows/winplink.c
===================================================================
--- windows/winplink.c	(revision 26343)
+++ windows/winplink.c	(working copy)
@@ -197,9 +197,9 @@
     char buf[10000];
     int j = 0;
 
-    j += sprintf(buf+j, "Plink: command-line connection utility\n");
+    j += sprintf(buf+j, "TortoisePlink: command-line connection utility (based on PuTTY Plink)\n");
     j += sprintf(buf+j, "%s\n", ver);
-    j += sprintf(buf+j, "Usage: plink [options] [user@]host [command]\n");
+    j += sprintf(buf+j, "Usage: tortoiseplink [options] [user@]host [command]\n");
     j += sprintf(buf+j, "       (\"host\" can also be a PuTTY saved session name)\n");
     j += sprintf(buf+j, "Options:\n");
     j += sprintf(buf+j, "  -V        print version information and exit\n");
@@ -210,7 +210,6 @@
     j += sprintf(buf+j, "            force use of a particular protocol\n");
     j += sprintf(buf+j, "  -P port   connect to specified port\n");
     j += sprintf(buf+j, "  -l user   connect with specified username\n");
-    j += sprintf(buf+j, "  -batch    disable all interactive prompts\n");
     j += sprintf(buf+j, "  -sercfg configuration-string (e.g. 19200,8,n,1,X)\n");
     j += sprintf(buf+j, "            Specify the serial configuration (serial only)\n");
     j += sprintf(buf+j, "The following options only apply to SSH connections:\n");
@@ -347,24 +346,11 @@
     conf = conf_new();
     do_defaults(NULL, conf);
     loaded_session = FALSE;
-    default_protocol = conf_get_int(conf, CONF_protocol);
-    default_port = conf_get_int(conf, CONF_port);
     errors = 0;
-    {
-	/*
-	 * Override the default protocol if PLINK_PROTOCOL is set.
-	 */
-	char *p = getenv("PLINK_PROTOCOL");
-	if (p) {
-	    const Backend *b = backend_from_name(p);
-	    if (b) {
-		default_protocol = b->protocol;
-		default_port = b->default_port;
-		conf_set_int(conf, CONF_protocol, default_protocol);
-		conf_set_int(conf, CONF_port, default_port);
-	    }
-	}
-    }
+    conf_set_int(conf, CONF_protocol, default_protocol);
+    conf_set_int(conf, CONF_port, default_port);
+    conf_set_int(conf, CONF_agentfwd, 0);
+    conf_set_int(conf, CONF_x11_forward, 0);
     while (--argc) {
 	char *p = *++argv;
 	if (*p == '-') {
@@ -372,7 +358,7 @@
 					    1, conf);
 	    if (ret == -2) {
 		fprintf(stderr,
-			"plink: option \"%s\" requires an argument\n", p);
+			"tortoiseplink: option \"%s\" requires an argument\n", p);
 		errors = 1;
 	    } else if (ret == 2) {
 		--argc, ++argv;
@@ -379,7 +365,7 @@
 	    } else if (ret == 1) {
 		continue;
 	    } else if (!strcmp(p, "-batch")) {
-		console_batch_mode = 1;
+			// ignore and do not print an error message
 	    } else if (!strcmp(p, "-s")) {
 		/* Save status to write to conf later. */
 		use_subsystem = 1;
@@ -391,7 +377,7 @@
                 pgp_fingerprints();
                 exit(1);
 	    } else {
-		fprintf(stderr, "plink: unknown option \"%s\"\n", p);
+		fprintf(stderr, "tortoiseplink: unknown option \"%s\"\n", p);
 		errors = 1;
 	    }
 	} else if (*p) {
