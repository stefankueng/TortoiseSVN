Index: include/Scintilla.h
===================================================================
--- include/Scintilla.h	(revision 28635)
+++ include/Scintilla.h	(working copy)
@@ -1143,6 +1143,8 @@
 #endif
 /* --Autogenerated -- end of section automatically generated from Scintilla.iface */
 
+#define SCN_GETBKCOLOR 5000
+
 /* These structures are defined to be exactly the same shape as the Win32
  * CHARRANGE, TEXTRANGE, FINDTEXTEX, FORMATRANGE, and NMHDR structs.
  * So older code that treats Scintilla as a RichEdit will work. */
Index: src/Editor.cxx
===================================================================
--- src/Editor.cxx	(revision 28635)
+++ src/Editor.cxx	(working copy)
@@ -110,6 +110,7 @@
 }
 
 Editor::Editor() : durationWrapOneLine(0.00001, 0.000001, 0.0001) {
+    view.editor = this;
 	ctrlID = 0;
 
 	stylesValid = false;
Index: src/Editor.h
===================================================================
--- src/Editor.h	(revision 28635)
+++ src/Editor.h	(working copy)
@@ -601,6 +601,7 @@
 public:
 	~Editor() override;
 
+	virtual void NotifyParent(SCNotification * scn) = 0;
 	// Public so the COM thunks can access it.
 	bool IsUnicodeMode() const noexcept;
 	// Public so scintilla_send_message can use it.
Index: src/EditView.cxx
===================================================================
--- src/EditView.cxx	(revision 28635)
+++ src/EditView.cxx	(working copy)
@@ -56,6 +56,7 @@
 #include "MarginView.h"
 #include "EditView.h"
 #include "ElapsedPeriod.h"
+#include "Editor.h"
 
 using namespace Scintilla;
 
@@ -188,6 +189,7 @@
 	tabArrowHeight = 4;
 	customDrawTabArrow = nullptr;
 	customDrawWrapMarker = nullptr;
+	editor = NULL;
 }
 
 EditView::~EditView() {
@@ -2020,7 +2022,17 @@
 	}
 
 	// See if something overrides the line background colour.
-	const ColourOptional background = vsDraw.Background(model.pdoc->GetMark(line), model.caret.active, ll->containsCaret);
+	ColourOptional background = vsDraw.Background(model.pdoc->GetMark(line), model.caret.active, ll->containsCaret);
+	SCNotification scn = { 0 };
+	scn.nmhdr.code = SCN_GETBKCOLOR;
+	scn.line = line;
+	scn.lParam = -1;
+	if (editor)
+		((Editor*)editor)->NotifyParent(&scn);
+	if (scn.lParam != -1)
+	{
+		background = ColourOptional(true, scn.lParam);
+	}
 
 	const Sci::Position posLineStart = model.pdoc->LineStart(line);
 
Index: src/EditView.h
===================================================================
--- src/EditView.h	(revision 28635)
+++ src/EditView.h	(working copy)
@@ -77,6 +77,7 @@
 	std::unique_ptr<Surface> pixmapLine;
 	std::unique_ptr<Surface> pixmapIndentGuide;
 	std::unique_ptr<Surface> pixmapIndentGuideHighlight;
+	void	*editor;
 
 	LineLayoutCache llc;
 	PositionCache posCache;
Index: win32/ScintillaWin.cxx
===================================================================
--- win32/ScintillaWin.cxx	(revision 28635)
+++ win32/ScintillaWin.cxx	(working copy)
@@ -367,6 +367,7 @@
 	void SetCtrlID(int identifier) override;
 	int GetCtrlID() override;
 	void NotifyParent(SCNotification scn) override;
+	virtual void NotifyParent(SCNotification * scn);
 	void NotifyDoubleClick(Point pt, int modifiers) override;
 	CaseFolder *CaseFolderForEncoding() override;
 	std::string CaseMapString(const std::string &s, int caseMapping) override;
@@ -2017,6 +2018,13 @@
 	              GetCtrlID(), reinterpret_cast<LPARAM>(&scn));
 }
 
+void ScintillaWin::NotifyParent(SCNotification * scn) {
+	scn->nmhdr.hwndFrom = MainHWND();
+	scn->nmhdr.idFrom = GetCtrlID();
+	::SendMessage(::GetParent(MainHWND()), WM_NOTIFY,
+		GetCtrlID(), reinterpret_cast<LPARAM>(scn));
+}
+
 void ScintillaWin::NotifyDoubleClick(Point pt, int modifiers) {
 	//Platform::DebugPrintf("ScintillaWin Double click 0\n");
 	ScintillaBase::NotifyDoubleClick(pt, modifiers);
