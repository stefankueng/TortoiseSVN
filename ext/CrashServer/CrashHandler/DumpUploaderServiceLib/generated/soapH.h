/* soapH.h
   Generated by gSOAP 2.8.17r from DumpUploader.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap*, const char*, void*, size_t, int, int, size_t, unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__byte
#define SOAP_TYPE_xsd__byte (16)
#endif

#define soap_default_xsd__byte(soap, a) soap_default_byte(soap, a)

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_xsd__byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_xsd__byte
#define soap_write_xsd__byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__byte(soap, data),0) || soap_put_xsd__byte(soap, data, "xsd:byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_xsd__byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_xsd__byte
#define soap_read_xsd__byte(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_byte(soap, data),0) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_short
#define SOAP_TYPE_short (44)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_short(struct soap*, short *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_short(struct soap*, const char*, int, const short *, const char*);
SOAP_FMAC3 short * SOAP_FMAC4 soap_in_short(struct soap*, const char*, short *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_short(struct soap*, const short *, const char*, const char*);

#ifndef soap_write_short
#define soap_write_short(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_short(soap, data),0) || soap_put_short(soap, data, "short", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 short * SOAP_FMAC4 soap_get_short(struct soap*, short *, const char*, const char*);

#ifndef soap_read_short
#define soap_read_short(soap, data) ( soap_begin_recv(soap) || !soap_get_short(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns3__char
#define SOAP_TYPE_ns3__char (80)
#endif

#define soap_default_ns3__char(soap, a) soap_default_int(soap, a)

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__char(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_ns3__char(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__char(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_ns3__char
#define soap_write_ns3__char(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns3__char(soap, data),0) || soap_put_ns3__char(soap, data, "ns3:char", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_ns3__char(struct soap*, int *, const char*, const char*);

#ifndef soap_read_ns3__char
#define soap_read_ns3__char(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__char(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_int(soap, data),0) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_LONG64
#define SOAP_TYPE_LONG64 (42)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap*, LONG64 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap*, const char*, int, const LONG64 *, const char*);
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap*, const char*, LONG64 *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap*, const LONG64 *, const char*, const char*);

#ifndef soap_write_LONG64
#define soap_write_LONG64(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_LONG64(soap, data),0) || soap_put_LONG64(soap, data, "long", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap*, LONG64 *, const char*, const char*);

#ifndef soap_read_LONG64
#define soap_read_LONG64(soap, data) ( soap_begin_recv(soap) || !soap_get_LONG64(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_float
#define SOAP_TYPE_float (39)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_float(struct soap*, float *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap*, const char*, int, const float *, const char*);
SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap*, const char*, float *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap*, const float *, const char*, const char*);

#ifndef soap_write_float
#define soap_write_float(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_float(soap, data),0) || soap_put_float(soap, data, "float", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap*, float *, const char*, const char*);

#ifndef soap_read_float
#define soap_read_float(soap, data) ( soap_begin_recv(soap) || !soap_get_float(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_double
#define SOAP_TYPE_double (35)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap*, double *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

#ifndef soap_write_double
#define soap_write_double(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_double(soap, data),0) || soap_put_double(soap, data, "double", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

#ifndef soap_read_double
#define soap_read_double(soap, data) ( soap_begin_recv(soap) || !soap_get_double(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xsd__unsignedByte
#define SOAP_TYPE_xsd__unsignedByte (17)
#endif

#define soap_default_xsd__unsignedByte(soap, a) soap_default_unsignedByte(soap, a)

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_xsd__unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

#ifndef soap_write_xsd__unsignedByte
#define soap_write_xsd__unsignedByte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__unsignedByte(soap, data),0) || soap_put_xsd__unsignedByte(soap, data, "xsd:unsignedByte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_xsd__unsignedByte(struct soap*, unsigned char *, const char*, const char*);

#ifndef soap_read_xsd__unsignedByte
#define soap_read_xsd__unsignedByte(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__unsignedByte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_unsignedByte
#define SOAP_TYPE_unsignedByte (14)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap*, unsigned char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

#ifndef soap_write_unsignedByte
#define soap_write_unsignedByte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_unsignedByte(soap, data),0) || soap_put_unsignedByte(soap, data, "unsignedByte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

#ifndef soap_read_unsignedByte
#define soap_read_unsignedByte(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedByte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_unsignedShort
#define SOAP_TYPE_unsignedShort (51)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedShort(struct soap*, unsigned short *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedShort(struct soap*, const char*, int, const unsigned short *, const char*);
SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_in_unsignedShort(struct soap*, const char*, unsigned short *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedShort(struct soap*, const unsigned short *, const char*, const char*);

#ifndef soap_write_unsignedShort
#define soap_write_unsignedShort(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_unsignedShort(soap, data),0) || soap_put_unsignedShort(soap, data, "unsignedShort", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_get_unsignedShort(struct soap*, unsigned short *, const char*, const char*);

#ifndef soap_read_unsignedShort
#define soap_read_unsignedShort(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedShort(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_unsignedInt
#define SOAP_TYPE_unsignedInt (13)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap*, unsigned int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

#ifndef soap_write_unsignedInt
#define soap_write_unsignedInt(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_unsignedInt(soap, data),0) || soap_put_unsignedInt(soap, data, "unsignedInt", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

#ifndef soap_read_unsignedInt
#define soap_read_unsignedInt(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedInt(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_unsignedLONG64
#define SOAP_TYPE_unsignedLONG64 (49)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedLONG64(struct soap*, ULONG64 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedLONG64(struct soap*, const char*, int, const ULONG64 *, const char*);
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_unsignedLONG64(struct soap*, const char*, ULONG64 *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedLONG64(struct soap*, const ULONG64 *, const char*, const char*);

#ifndef soap_write_unsignedLONG64
#define soap_write_unsignedLONG64(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_unsignedLONG64(soap, data),0) || soap_put_unsignedLONG64(soap, data, "unsignedLong", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_unsignedLONG64(struct soap*, ULONG64 *, const char*, const char*);

#ifndef soap_read_unsignedLONG64
#define soap_read_unsignedLONG64(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedLONG64(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_time
#define SOAP_TYPE_time (31)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_time(struct soap*, time_t *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_time(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_time(struct soap*, const char*, time_t *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_time(struct soap*, const time_t *, const char*, const char*);

#ifndef soap_write_time
#define soap_write_time(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_time(soap, data),0) || soap_put_time(soap, data, "dateTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_time(struct soap*, time_t *, const char*, const char*);

#ifndef soap_read_time
#define soap_read_time(soap, data) ( soap_begin_recv(soap) || !soap_get_time(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns4__HaveSolutionResponse_SolutionType
#define SOAP_TYPE_ns4__HaveSolutionResponse_SolutionType (90)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__HaveSolutionResponse_SolutionType(struct soap*, enum ns4__HaveSolutionResponse_SolutionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__HaveSolutionResponse_SolutionType(struct soap*, const char*, int, const enum ns4__HaveSolutionResponse_SolutionType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns4__HaveSolutionResponse_SolutionType2s(struct soap*, enum ns4__HaveSolutionResponse_SolutionType);
SOAP_FMAC3 enum ns4__HaveSolutionResponse_SolutionType * SOAP_FMAC4 soap_in_ns4__HaveSolutionResponse_SolutionType(struct soap*, const char*, enum ns4__HaveSolutionResponse_SolutionType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns4__HaveSolutionResponse_SolutionType(struct soap*, const char*, enum ns4__HaveSolutionResponse_SolutionType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__HaveSolutionResponse_SolutionType(struct soap*, const enum ns4__HaveSolutionResponse_SolutionType *, const char*, const char*);

#ifndef soap_write_ns4__HaveSolutionResponse_SolutionType
#define soap_write_ns4__HaveSolutionResponse_SolutionType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns4__HaveSolutionResponse_SolutionType(soap, data),0) || soap_put_ns4__HaveSolutionResponse_SolutionType(soap, data, "ns4:HaveSolutionResponse.SolutionType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns4__HaveSolutionResponse_SolutionType * SOAP_FMAC4 soap_get_ns4__HaveSolutionResponse_SolutionType(struct soap*, enum ns4__HaveSolutionResponse_SolutionType *, const char*, const char*);

#ifndef soap_read_ns4__HaveSolutionResponse_SolutionType
#define soap_read_ns4__HaveSolutionResponse_SolutionType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns4__HaveSolutionResponse_SolutionType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns4__ClientLib_ClientType
#define SOAP_TYPE_ns4__ClientLib_ClientType (88)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__ClientLib_ClientType(struct soap*, enum ns4__ClientLib_ClientType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__ClientLib_ClientType(struct soap*, const char*, int, const enum ns4__ClientLib_ClientType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns4__ClientLib_ClientType2s(struct soap*, enum ns4__ClientLib_ClientType);
SOAP_FMAC3 enum ns4__ClientLib_ClientType * SOAP_FMAC4 soap_in_ns4__ClientLib_ClientType(struct soap*, const char*, enum ns4__ClientLib_ClientType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns4__ClientLib_ClientType(struct soap*, const char*, enum ns4__ClientLib_ClientType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__ClientLib_ClientType(struct soap*, const enum ns4__ClientLib_ClientType *, const char*, const char*);

#ifndef soap_write_ns4__ClientLib_ClientType
#define soap_write_ns4__ClientLib_ClientType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns4__ClientLib_ClientType(soap, data),0) || soap_put_ns4__ClientLib_ClientType(soap, data, "ns4:ClientLib.ClientType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns4__ClientLib_ClientType * SOAP_FMAC4 soap_get_ns4__ClientLib_ClientType(struct soap*, enum ns4__ClientLib_ClientType *, const char*, const char*);

#ifndef soap_read_ns4__ClientLib_ClientType
#define soap_read_ns4__ClientLib_ClientType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns4__ClientLib_ClientType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns4__ClientLib_Architecture
#define SOAP_TYPE_ns4__ClientLib_Architecture (86)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__ClientLib_Architecture(struct soap*, enum ns4__ClientLib_Architecture *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__ClientLib_Architecture(struct soap*, const char*, int, const enum ns4__ClientLib_Architecture *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns4__ClientLib_Architecture2s(struct soap*, enum ns4__ClientLib_Architecture);
SOAP_FMAC3 enum ns4__ClientLib_Architecture * SOAP_FMAC4 soap_in_ns4__ClientLib_Architecture(struct soap*, const char*, enum ns4__ClientLib_Architecture *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns4__ClientLib_Architecture(struct soap*, const char*, enum ns4__ClientLib_Architecture *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__ClientLib_Architecture(struct soap*, const enum ns4__ClientLib_Architecture *, const char*, const char*);

#ifndef soap_write_ns4__ClientLib_Architecture
#define soap_write_ns4__ClientLib_Architecture(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns4__ClientLib_Architecture(soap, data),0) || soap_put_ns4__ClientLib_Architecture(soap, data, "ns4:ClientLib.Architecture", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns4__ClientLib_Architecture * SOAP_FMAC4 soap_get_ns4__ClientLib_Architecture(struct soap*, enum ns4__ClientLib_Architecture *, const char*, const char*);

#ifndef soap_read_ns4__ClientLib_Architecture
#define soap_read_ns4__ClientLib_Architecture(soap, data) ( soap_begin_recv(soap) || !soap_get_ns4__ClientLib_Architecture(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (28)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap*, bool *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

#ifndef soap_write_bool
#define soap_write_bool(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_bool(soap, data),0) || soap_put_bool(soap, data, "boolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

#ifndef soap_read_bool
#define soap_read_bool(soap, data) ( soap_begin_recv(soap) || !soap_get_bool(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns4__HaveSolutionResponse_SolutionType_
#define SOAP_TYPE_ns4__HaveSolutionResponse_SolutionType_ (91)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__HaveSolutionResponse_SolutionType_(struct soap*, const char*, int, const ns4__HaveSolutionResponse_SolutionType_ *, const char*);
SOAP_FMAC3 ns4__HaveSolutionResponse_SolutionType_ * SOAP_FMAC4 soap_in_ns4__HaveSolutionResponse_SolutionType_(struct soap*, const char*, ns4__HaveSolutionResponse_SolutionType_ *, const char*);

#ifndef soap_write_ns4__HaveSolutionResponse_SolutionType_
#define soap_write_ns4__HaveSolutionResponse_SolutionType_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:HaveSolutionResponse.SolutionType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__HaveSolutionResponse_SolutionType_ * SOAP_FMAC4 soap_get_ns4__HaveSolutionResponse_SolutionType_(struct soap*, ns4__HaveSolutionResponse_SolutionType_ *, const char*, const char*);

#ifndef soap_read_ns4__HaveSolutionResponse_SolutionType_
#define soap_read_ns4__HaveSolutionResponse_SolutionType_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns4__HaveSolutionResponse_SolutionType_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns4__HaveSolutionResponse_SolutionType_ * SOAP_FMAC2 soap_instantiate_ns4__HaveSolutionResponse_SolutionType_(struct soap*, int, const char*, const char*, size_t*);

inline ns4__HaveSolutionResponse_SolutionType_ * soap_new_ns4__HaveSolutionResponse_SolutionType_(struct soap *soap, int n = -1) { return soap_instantiate_ns4__HaveSolutionResponse_SolutionType_(soap, n, NULL, NULL, NULL); }

inline ns4__HaveSolutionResponse_SolutionType_ * soap_new_req_ns4__HaveSolutionResponse_SolutionType_(struct soap *soap, enum ns4__HaveSolutionResponse_SolutionType __item) { ns4__HaveSolutionResponse_SolutionType_ *_p = soap_instantiate_ns4__HaveSolutionResponse_SolutionType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__HaveSolutionResponse_SolutionType_::__item = __item; } return _p; }

inline ns4__HaveSolutionResponse_SolutionType_ * soap_new_set_ns4__HaveSolutionResponse_SolutionType_(struct soap *soap, enum ns4__HaveSolutionResponse_SolutionType __item, char *__item1) { ns4__HaveSolutionResponse_SolutionType_ *_p = soap_instantiate_ns4__HaveSolutionResponse_SolutionType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__HaveSolutionResponse_SolutionType_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns4__HaveSolutionResponse_SolutionType_(struct soap *soap, ns4__HaveSolutionResponse_SolutionType_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__HaveSolutionResponse_SolutionType_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns4__ClientLib_ClientType_
#define SOAP_TYPE_ns4__ClientLib_ClientType_ (89)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__ClientLib_ClientType_(struct soap*, const char*, int, const ns4__ClientLib_ClientType_ *, const char*);
SOAP_FMAC3 ns4__ClientLib_ClientType_ * SOAP_FMAC4 soap_in_ns4__ClientLib_ClientType_(struct soap*, const char*, ns4__ClientLib_ClientType_ *, const char*);

#ifndef soap_write_ns4__ClientLib_ClientType_
#define soap_write_ns4__ClientLib_ClientType_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:ClientLib.ClientType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__ClientLib_ClientType_ * SOAP_FMAC4 soap_get_ns4__ClientLib_ClientType_(struct soap*, ns4__ClientLib_ClientType_ *, const char*, const char*);

#ifndef soap_read_ns4__ClientLib_ClientType_
#define soap_read_ns4__ClientLib_ClientType_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns4__ClientLib_ClientType_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns4__ClientLib_ClientType_ * SOAP_FMAC2 soap_instantiate_ns4__ClientLib_ClientType_(struct soap*, int, const char*, const char*, size_t*);

inline ns4__ClientLib_ClientType_ * soap_new_ns4__ClientLib_ClientType_(struct soap *soap, int n = -1) { return soap_instantiate_ns4__ClientLib_ClientType_(soap, n, NULL, NULL, NULL); }

inline ns4__ClientLib_ClientType_ * soap_new_req_ns4__ClientLib_ClientType_(struct soap *soap, enum ns4__ClientLib_ClientType __item) { ns4__ClientLib_ClientType_ *_p = soap_instantiate_ns4__ClientLib_ClientType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__ClientLib_ClientType_::__item = __item; } return _p; }

inline ns4__ClientLib_ClientType_ * soap_new_set_ns4__ClientLib_ClientType_(struct soap *soap, enum ns4__ClientLib_ClientType __item, char *__item1) { ns4__ClientLib_ClientType_ *_p = soap_instantiate_ns4__ClientLib_ClientType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__ClientLib_ClientType_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns4__ClientLib_ClientType_(struct soap *soap, ns4__ClientLib_ClientType_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__ClientLib_ClientType_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns4__ClientLib_Architecture_
#define SOAP_TYPE_ns4__ClientLib_Architecture_ (87)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__ClientLib_Architecture_(struct soap*, const char*, int, const ns4__ClientLib_Architecture_ *, const char*);
SOAP_FMAC3 ns4__ClientLib_Architecture_ * SOAP_FMAC4 soap_in_ns4__ClientLib_Architecture_(struct soap*, const char*, ns4__ClientLib_Architecture_ *, const char*);

#ifndef soap_write_ns4__ClientLib_Architecture_
#define soap_write_ns4__ClientLib_Architecture_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:ClientLib.Architecture", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__ClientLib_Architecture_ * SOAP_FMAC4 soap_get_ns4__ClientLib_Architecture_(struct soap*, ns4__ClientLib_Architecture_ *, const char*, const char*);

#ifndef soap_read_ns4__ClientLib_Architecture_
#define soap_read_ns4__ClientLib_Architecture_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns4__ClientLib_Architecture_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns4__ClientLib_Architecture_ * SOAP_FMAC2 soap_instantiate_ns4__ClientLib_Architecture_(struct soap*, int, const char*, const char*, size_t*);

inline ns4__ClientLib_Architecture_ * soap_new_ns4__ClientLib_Architecture_(struct soap *soap, int n = -1) { return soap_instantiate_ns4__ClientLib_Architecture_(soap, n, NULL, NULL, NULL); }

inline ns4__ClientLib_Architecture_ * soap_new_req_ns4__ClientLib_Architecture_(struct soap *soap, enum ns4__ClientLib_Architecture __item) { ns4__ClientLib_Architecture_ *_p = soap_instantiate_ns4__ClientLib_Architecture_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__ClientLib_Architecture_::__item = __item; } return _p; }

inline ns4__ClientLib_Architecture_ * soap_new_set_ns4__ClientLib_Architecture_(struct soap *soap, enum ns4__ClientLib_Architecture __item, char *__item1) { ns4__ClientLib_Architecture_ *_p = soap_instantiate_ns4__ClientLib_Architecture_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__ClientLib_Architecture_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns4__ClientLib_Architecture_(struct soap *soap, ns4__ClientLib_Architecture_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__ClientLib_Architecture_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__guid__
#define SOAP_TYPE_ns3__guid__ (85)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__guid__(struct soap*, const char*, int, const ns3__guid__ *, const char*);
SOAP_FMAC3 ns3__guid__ * SOAP_FMAC4 soap_in_ns3__guid__(struct soap*, const char*, ns3__guid__ *, const char*);

#ifndef soap_write_ns3__guid__
#define soap_write_ns3__guid__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:guid", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__guid__ * SOAP_FMAC4 soap_get_ns3__guid__(struct soap*, ns3__guid__ *, const char*, const char*);

#ifndef soap_read_ns3__guid__
#define soap_read_ns3__guid__(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__guid__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__guid__ * SOAP_FMAC2 soap_instantiate_ns3__guid__(struct soap*, int, const char*, const char*, size_t*);

inline ns3__guid__ * soap_new_ns3__guid__(struct soap *soap, int n = -1) { return soap_instantiate_ns3__guid__(soap, n, NULL, NULL, NULL); }

inline ns3__guid__ * soap_new_req_ns3__guid__(struct soap *soap, std::wstring& __item) { ns3__guid__ *_p = soap_instantiate_ns3__guid__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__guid__::__item = __item; } return _p; }

inline ns3__guid__ * soap_new_set_ns3__guid__(struct soap *soap, std::wstring& __item, char *__item1) { ns3__guid__ *_p = soap_instantiate_ns3__guid__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__guid__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns3__guid__(struct soap *soap, ns3__guid__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__guid__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__guid
#define SOAP_TYPE_ns3__guid (84)
#endif

#define soap_default_ns3__guid(soap, a) soap_default_std__wstring(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns3__guid(struct soap*, const std::wstring *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__guid(struct soap*, const char*, int, const std::wstring*, const char*);
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_ns3__guid(struct soap*, const char*, std::wstring*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__guid(struct soap*, const std::wstring *, const char*, const char*);

#ifndef soap_write_ns3__guid
#define soap_write_ns3__guid(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns3__guid(soap, data),0) || soap_put_ns3__guid(soap, data, "ns3:guid", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_ns3__guid(struct soap*, std::wstring *, const char*, const char*);

#ifndef soap_read_ns3__guid
#define soap_read_ns3__guid(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__guid(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_ns3__guid soap_instantiate_std__wstring


#define soap_copy_ns3__guid soap_copy_std__wstring

#ifndef SOAP_TYPE_ns3__duration__
#define SOAP_TYPE_ns3__duration__ (83)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__duration__(struct soap*, const char*, int, const ns3__duration__ *, const char*);
SOAP_FMAC3 ns3__duration__ * SOAP_FMAC4 soap_in_ns3__duration__(struct soap*, const char*, ns3__duration__ *, const char*);

#ifndef soap_write_ns3__duration__
#define soap_write_ns3__duration__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:duration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__duration__ * SOAP_FMAC4 soap_get_ns3__duration__(struct soap*, ns3__duration__ *, const char*, const char*);

#ifndef soap_read_ns3__duration__
#define soap_read_ns3__duration__(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__duration__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__duration__ * SOAP_FMAC2 soap_instantiate_ns3__duration__(struct soap*, int, const char*, const char*, size_t*);

inline ns3__duration__ * soap_new_ns3__duration__(struct soap *soap, int n = -1) { return soap_instantiate_ns3__duration__(soap, n, NULL, NULL, NULL); }

inline ns3__duration__ * soap_new_req_ns3__duration__(struct soap *soap, std::wstring& __item) { ns3__duration__ *_p = soap_instantiate_ns3__duration__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__duration__::__item = __item; } return _p; }

inline ns3__duration__ * soap_new_set_ns3__duration__(struct soap *soap, std::wstring& __item, char *__item1) { ns3__duration__ *_p = soap_instantiate_ns3__duration__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__duration__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns3__duration__(struct soap *soap, ns3__duration__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__duration__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__duration
#define SOAP_TYPE_ns3__duration (82)
#endif

#define soap_default_ns3__duration(soap, a) soap_default_std__wstring(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns3__duration(struct soap*, const std::wstring *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__duration(struct soap*, const char*, int, const std::wstring*, const char*);
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_ns3__duration(struct soap*, const char*, std::wstring*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__duration(struct soap*, const std::wstring *, const char*, const char*);

#ifndef soap_write_ns3__duration
#define soap_write_ns3__duration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns3__duration(soap, data),0) || soap_put_ns3__duration(soap, data, "ns3:duration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_ns3__duration(struct soap*, std::wstring *, const char*, const char*);

#ifndef soap_read_ns3__duration
#define soap_read_ns3__duration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__duration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_ns3__duration soap_instantiate_std__wstring


#define soap_copy_ns3__duration soap_copy_std__wstring

#ifndef SOAP_TYPE_ns3__char__
#define SOAP_TYPE_ns3__char__ (81)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__char__(struct soap*, const char*, int, const ns3__char__ *, const char*);
SOAP_FMAC3 ns3__char__ * SOAP_FMAC4 soap_in_ns3__char__(struct soap*, const char*, ns3__char__ *, const char*);

#ifndef soap_write_ns3__char__
#define soap_write_ns3__char__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:char", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__char__ * SOAP_FMAC4 soap_get_ns3__char__(struct soap*, ns3__char__ *, const char*, const char*);

#ifndef soap_read_ns3__char__
#define soap_read_ns3__char__(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__char__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__char__ * SOAP_FMAC2 soap_instantiate_ns3__char__(struct soap*, int, const char*, const char*, size_t*);

inline ns3__char__ * soap_new_ns3__char__(struct soap *soap, int n = -1) { return soap_instantiate_ns3__char__(soap, n, NULL, NULL, NULL); }

inline ns3__char__ * soap_new_req_ns3__char__(struct soap *soap, int __item) { ns3__char__ *_p = soap_instantiate_ns3__char__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__char__::__item = __item; } return _p; }

inline ns3__char__ * soap_new_set_ns3__char__(struct soap *soap, int __item, char *__item1) { ns3__char__ *_p = soap_instantiate_ns3__char__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__char__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns3__char__(struct soap *soap, ns3__char__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__char__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns5__ArrayOfstring
#define SOAP_TYPE_ns5__ArrayOfstring (79)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__ArrayOfstring(struct soap*, const char*, int, const ns5__ArrayOfstring *, const char*);
SOAP_FMAC3 ns5__ArrayOfstring * SOAP_FMAC4 soap_in_ns5__ArrayOfstring(struct soap*, const char*, ns5__ArrayOfstring *, const char*);

#ifndef soap_write_ns5__ArrayOfstring
#define soap_write_ns5__ArrayOfstring(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns5:ArrayOfstring", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__ArrayOfstring * SOAP_FMAC4 soap_get_ns5__ArrayOfstring(struct soap*, ns5__ArrayOfstring *, const char*, const char*);

#ifndef soap_read_ns5__ArrayOfstring
#define soap_read_ns5__ArrayOfstring(soap, data) ( soap_begin_recv(soap) || !soap_get_ns5__ArrayOfstring(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns5__ArrayOfstring * SOAP_FMAC2 soap_instantiate_ns5__ArrayOfstring(struct soap*, int, const char*, const char*, size_t*);

inline ns5__ArrayOfstring * soap_new_ns5__ArrayOfstring(struct soap *soap, int n = -1) { return soap_instantiate_ns5__ArrayOfstring(soap, n, NULL, NULL, NULL); }

inline ns5__ArrayOfstring * soap_new_req_ns5__ArrayOfstring(struct soap *soap) { ns5__ArrayOfstring *_p = soap_instantiate_ns5__ArrayOfstring(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns5__ArrayOfstring * soap_new_set_ns5__ArrayOfstring(struct soap *soap, std::vector<std::wstring >& string, char *__item1) { ns5__ArrayOfstring *_p = soap_instantiate_ns5__ArrayOfstring(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__ArrayOfstring::string = string; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns5__ArrayOfstring(struct soap *soap, ns5__ArrayOfstring *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__ArrayOfstring(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__UploadSymbolResponse
#define SOAP_TYPE__ns1__UploadSymbolResponse (78)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UploadSymbolResponse(struct soap*, const char*, int, const _ns1__UploadSymbolResponse *, const char*);
SOAP_FMAC3 _ns1__UploadSymbolResponse * SOAP_FMAC4 soap_in__ns1__UploadSymbolResponse(struct soap*, const char*, _ns1__UploadSymbolResponse *, const char*);

#ifndef soap_write__ns1__UploadSymbolResponse
#define soap_write__ns1__UploadSymbolResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:UploadSymbolResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__UploadSymbolResponse * SOAP_FMAC4 soap_get__ns1__UploadSymbolResponse(struct soap*, _ns1__UploadSymbolResponse *, const char*, const char*);

#ifndef soap_read__ns1__UploadSymbolResponse
#define soap_read__ns1__UploadSymbolResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__UploadSymbolResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__UploadSymbolResponse * SOAP_FMAC2 soap_instantiate__ns1__UploadSymbolResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__UploadSymbolResponse * soap_new__ns1__UploadSymbolResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__UploadSymbolResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__UploadSymbolResponse * soap_new_req__ns1__UploadSymbolResponse(struct soap *soap) { _ns1__UploadSymbolResponse *_p = soap_instantiate__ns1__UploadSymbolResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__UploadSymbolResponse * soap_new_set__ns1__UploadSymbolResponse(struct soap *soap, std::wstring *UploadSymbolResult) { _ns1__UploadSymbolResponse *_p = soap_instantiate__ns1__UploadSymbolResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__UploadSymbolResponse::UploadSymbolResult = UploadSymbolResult; } return _p; }

inline void soap_delete__ns1__UploadSymbolResponse(struct soap *soap, _ns1__UploadSymbolResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__UploadSymbolResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__UploadSymbol
#define SOAP_TYPE__ns1__UploadSymbol (77)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UploadSymbol(struct soap*, const char*, int, const _ns1__UploadSymbol *, const char*);
SOAP_FMAC3 _ns1__UploadSymbol * SOAP_FMAC4 soap_in__ns1__UploadSymbol(struct soap*, const char*, _ns1__UploadSymbol *, const char*);

#ifndef soap_write__ns1__UploadSymbol
#define soap_write__ns1__UploadSymbol(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:UploadSymbol", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__UploadSymbol * SOAP_FMAC4 soap_get__ns1__UploadSymbol(struct soap*, _ns1__UploadSymbol *, const char*, const char*);

#ifndef soap_read__ns1__UploadSymbol
#define soap_read__ns1__UploadSymbol(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__UploadSymbol(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__UploadSymbol * SOAP_FMAC2 soap_instantiate__ns1__UploadSymbol(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__UploadSymbol * soap_new__ns1__UploadSymbol(struct soap *soap, int n = -1) { return soap_instantiate__ns1__UploadSymbol(soap, n, NULL, NULL, NULL); }

inline _ns1__UploadSymbol * soap_new_req__ns1__UploadSymbol(struct soap *soap) { _ns1__UploadSymbol *_p = soap_instantiate__ns1__UploadSymbol(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__UploadSymbol * soap_new_set__ns1__UploadSymbol(struct soap *soap, ns1__ClientLib *client, ns1__Application *app, bool *publish, struct _xop__Include *sym) { _ns1__UploadSymbol *_p = soap_instantiate__ns1__UploadSymbol(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__UploadSymbol::client = client; _p->_ns1__UploadSymbol::app = app; _p->_ns1__UploadSymbol::publish = publish; _p->_ns1__UploadSymbol::sym = sym; } return _p; }

inline void soap_delete__ns1__UploadSymbol(struct soap *soap, _ns1__UploadSymbol *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__UploadSymbol(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__RejectedToSendAdditionalInfoResponse
#define SOAP_TYPE__ns1__RejectedToSendAdditionalInfoResponse (76)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RejectedToSendAdditionalInfoResponse(struct soap*, const char*, int, const _ns1__RejectedToSendAdditionalInfoResponse *, const char*);
SOAP_FMAC3 _ns1__RejectedToSendAdditionalInfoResponse * SOAP_FMAC4 soap_in__ns1__RejectedToSendAdditionalInfoResponse(struct soap*, const char*, _ns1__RejectedToSendAdditionalInfoResponse *, const char*);

#ifndef soap_write__ns1__RejectedToSendAdditionalInfoResponse
#define soap_write__ns1__RejectedToSendAdditionalInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:RejectedToSendAdditionalInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__RejectedToSendAdditionalInfoResponse * SOAP_FMAC4 soap_get__ns1__RejectedToSendAdditionalInfoResponse(struct soap*, _ns1__RejectedToSendAdditionalInfoResponse *, const char*, const char*);

#ifndef soap_read__ns1__RejectedToSendAdditionalInfoResponse
#define soap_read__ns1__RejectedToSendAdditionalInfoResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__RejectedToSendAdditionalInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__RejectedToSendAdditionalInfoResponse * SOAP_FMAC2 soap_instantiate__ns1__RejectedToSendAdditionalInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RejectedToSendAdditionalInfoResponse * soap_new__ns1__RejectedToSendAdditionalInfoResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__RejectedToSendAdditionalInfoResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__RejectedToSendAdditionalInfoResponse * soap_new_req__ns1__RejectedToSendAdditionalInfoResponse(struct soap *soap) { _ns1__RejectedToSendAdditionalInfoResponse *_p = soap_instantiate__ns1__RejectedToSendAdditionalInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__RejectedToSendAdditionalInfoResponse * soap_new_set__ns1__RejectedToSendAdditionalInfoResponse(struct soap *soap, ns1__Response *RejectedToSendAdditionalInfoResult) { _ns1__RejectedToSendAdditionalInfoResponse *_p = soap_instantiate__ns1__RejectedToSendAdditionalInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__RejectedToSendAdditionalInfoResponse::RejectedToSendAdditionalInfoResult = RejectedToSendAdditionalInfoResult; } return _p; }

inline void soap_delete__ns1__RejectedToSendAdditionalInfoResponse(struct soap *soap, _ns1__RejectedToSendAdditionalInfoResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__RejectedToSendAdditionalInfoResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__RejectedToSendAdditionalInfo
#define SOAP_TYPE__ns1__RejectedToSendAdditionalInfo (75)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RejectedToSendAdditionalInfo(struct soap*, const char*, int, const _ns1__RejectedToSendAdditionalInfo *, const char*);
SOAP_FMAC3 _ns1__RejectedToSendAdditionalInfo * SOAP_FMAC4 soap_in__ns1__RejectedToSendAdditionalInfo(struct soap*, const char*, _ns1__RejectedToSendAdditionalInfo *, const char*);

#ifndef soap_write__ns1__RejectedToSendAdditionalInfo
#define soap_write__ns1__RejectedToSendAdditionalInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:RejectedToSendAdditionalInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__RejectedToSendAdditionalInfo * SOAP_FMAC4 soap_get__ns1__RejectedToSendAdditionalInfo(struct soap*, _ns1__RejectedToSendAdditionalInfo *, const char*, const char*);

#ifndef soap_read__ns1__RejectedToSendAdditionalInfo
#define soap_read__ns1__RejectedToSendAdditionalInfo(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__RejectedToSendAdditionalInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__RejectedToSendAdditionalInfo * SOAP_FMAC2 soap_instantiate__ns1__RejectedToSendAdditionalInfo(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RejectedToSendAdditionalInfo * soap_new__ns1__RejectedToSendAdditionalInfo(struct soap *soap, int n = -1) { return soap_instantiate__ns1__RejectedToSendAdditionalInfo(soap, n, NULL, NULL, NULL); }

inline _ns1__RejectedToSendAdditionalInfo * soap_new_req__ns1__RejectedToSendAdditionalInfo(struct soap *soap) { _ns1__RejectedToSendAdditionalInfo *_p = soap_instantiate__ns1__RejectedToSendAdditionalInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__RejectedToSendAdditionalInfo * soap_new_set__ns1__RejectedToSendAdditionalInfo(struct soap *soap, ns1__ClientLib *client, ns1__Application *app, int *miniDumpID, struct _xop__Include *context) { _ns1__RejectedToSendAdditionalInfo *_p = soap_instantiate__ns1__RejectedToSendAdditionalInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__RejectedToSendAdditionalInfo::client = client; _p->_ns1__RejectedToSendAdditionalInfo::app = app; _p->_ns1__RejectedToSendAdditionalInfo::miniDumpID = miniDumpID; _p->_ns1__RejectedToSendAdditionalInfo::context = context; } return _p; }

inline void soap_delete__ns1__RejectedToSendAdditionalInfo(struct soap *soap, _ns1__RejectedToSendAdditionalInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__RejectedToSendAdditionalInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__UploadAdditionalInfoResponse
#define SOAP_TYPE__ns1__UploadAdditionalInfoResponse (74)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UploadAdditionalInfoResponse(struct soap*, const char*, int, const _ns1__UploadAdditionalInfoResponse *, const char*);
SOAP_FMAC3 _ns1__UploadAdditionalInfoResponse * SOAP_FMAC4 soap_in__ns1__UploadAdditionalInfoResponse(struct soap*, const char*, _ns1__UploadAdditionalInfoResponse *, const char*);

#ifndef soap_write__ns1__UploadAdditionalInfoResponse
#define soap_write__ns1__UploadAdditionalInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:UploadAdditionalInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__UploadAdditionalInfoResponse * SOAP_FMAC4 soap_get__ns1__UploadAdditionalInfoResponse(struct soap*, _ns1__UploadAdditionalInfoResponse *, const char*, const char*);

#ifndef soap_read__ns1__UploadAdditionalInfoResponse
#define soap_read__ns1__UploadAdditionalInfoResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__UploadAdditionalInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__UploadAdditionalInfoResponse * SOAP_FMAC2 soap_instantiate__ns1__UploadAdditionalInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__UploadAdditionalInfoResponse * soap_new__ns1__UploadAdditionalInfoResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__UploadAdditionalInfoResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__UploadAdditionalInfoResponse * soap_new_req__ns1__UploadAdditionalInfoResponse(struct soap *soap) { _ns1__UploadAdditionalInfoResponse *_p = soap_instantiate__ns1__UploadAdditionalInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__UploadAdditionalInfoResponse * soap_new_set__ns1__UploadAdditionalInfoResponse(struct soap *soap, ns1__Response *UploadAdditionalInfoResult) { _ns1__UploadAdditionalInfoResponse *_p = soap_instantiate__ns1__UploadAdditionalInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__UploadAdditionalInfoResponse::UploadAdditionalInfoResult = UploadAdditionalInfoResult; } return _p; }

inline void soap_delete__ns1__UploadAdditionalInfoResponse(struct soap *soap, _ns1__UploadAdditionalInfoResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__UploadAdditionalInfoResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__UploadAdditionalInfo
#define SOAP_TYPE__ns1__UploadAdditionalInfo (73)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UploadAdditionalInfo(struct soap*, const char*, int, const _ns1__UploadAdditionalInfo *, const char*);
SOAP_FMAC3 _ns1__UploadAdditionalInfo * SOAP_FMAC4 soap_in__ns1__UploadAdditionalInfo(struct soap*, const char*, _ns1__UploadAdditionalInfo *, const char*);

#ifndef soap_write__ns1__UploadAdditionalInfo
#define soap_write__ns1__UploadAdditionalInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:UploadAdditionalInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__UploadAdditionalInfo * SOAP_FMAC4 soap_get__ns1__UploadAdditionalInfo(struct soap*, _ns1__UploadAdditionalInfo *, const char*, const char*);

#ifndef soap_read__ns1__UploadAdditionalInfo
#define soap_read__ns1__UploadAdditionalInfo(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__UploadAdditionalInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__UploadAdditionalInfo * SOAP_FMAC2 soap_instantiate__ns1__UploadAdditionalInfo(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__UploadAdditionalInfo * soap_new__ns1__UploadAdditionalInfo(struct soap *soap, int n = -1) { return soap_instantiate__ns1__UploadAdditionalInfo(soap, n, NULL, NULL, NULL); }

inline _ns1__UploadAdditionalInfo * soap_new_req__ns1__UploadAdditionalInfo(struct soap *soap) { _ns1__UploadAdditionalInfo *_p = soap_instantiate__ns1__UploadAdditionalInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__UploadAdditionalInfo * soap_new_set__ns1__UploadAdditionalInfo(struct soap *soap, ns1__ClientLib *client, ns1__Application *app, int *miniDumpID, struct _xop__Include *info, struct _xop__Include *context) { _ns1__UploadAdditionalInfo *_p = soap_instantiate__ns1__UploadAdditionalInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__UploadAdditionalInfo::client = client; _p->_ns1__UploadAdditionalInfo::app = app; _p->_ns1__UploadAdditionalInfo::miniDumpID = miniDumpID; _p->_ns1__UploadAdditionalInfo::info = info; _p->_ns1__UploadAdditionalInfo::context = context; } return _p; }

inline void soap_delete__ns1__UploadAdditionalInfo(struct soap *soap, _ns1__UploadAdditionalInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__UploadAdditionalInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__UploadFullDumpResponse
#define SOAP_TYPE__ns1__UploadFullDumpResponse (72)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UploadFullDumpResponse(struct soap*, const char*, int, const _ns1__UploadFullDumpResponse *, const char*);
SOAP_FMAC3 _ns1__UploadFullDumpResponse * SOAP_FMAC4 soap_in__ns1__UploadFullDumpResponse(struct soap*, const char*, _ns1__UploadFullDumpResponse *, const char*);

#ifndef soap_write__ns1__UploadFullDumpResponse
#define soap_write__ns1__UploadFullDumpResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:UploadFullDumpResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__UploadFullDumpResponse * SOAP_FMAC4 soap_get__ns1__UploadFullDumpResponse(struct soap*, _ns1__UploadFullDumpResponse *, const char*, const char*);

#ifndef soap_read__ns1__UploadFullDumpResponse
#define soap_read__ns1__UploadFullDumpResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__UploadFullDumpResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__UploadFullDumpResponse * SOAP_FMAC2 soap_instantiate__ns1__UploadFullDumpResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__UploadFullDumpResponse * soap_new__ns1__UploadFullDumpResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__UploadFullDumpResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__UploadFullDumpResponse * soap_new_req__ns1__UploadFullDumpResponse(struct soap *soap) { _ns1__UploadFullDumpResponse *_p = soap_instantiate__ns1__UploadFullDumpResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__UploadFullDumpResponse * soap_new_set__ns1__UploadFullDumpResponse(struct soap *soap, ns1__Response *UploadFullDumpResult) { _ns1__UploadFullDumpResponse *_p = soap_instantiate__ns1__UploadFullDumpResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__UploadFullDumpResponse::UploadFullDumpResult = UploadFullDumpResult; } return _p; }

inline void soap_delete__ns1__UploadFullDumpResponse(struct soap *soap, _ns1__UploadFullDumpResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__UploadFullDumpResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__UploadFullDump
#define SOAP_TYPE__ns1__UploadFullDump (71)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UploadFullDump(struct soap*, const char*, int, const _ns1__UploadFullDump *, const char*);
SOAP_FMAC3 _ns1__UploadFullDump * SOAP_FMAC4 soap_in__ns1__UploadFullDump(struct soap*, const char*, _ns1__UploadFullDump *, const char*);

#ifndef soap_write__ns1__UploadFullDump
#define soap_write__ns1__UploadFullDump(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:UploadFullDump", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__UploadFullDump * SOAP_FMAC4 soap_get__ns1__UploadFullDump(struct soap*, _ns1__UploadFullDump *, const char*, const char*);

#ifndef soap_read__ns1__UploadFullDump
#define soap_read__ns1__UploadFullDump(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__UploadFullDump(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__UploadFullDump * SOAP_FMAC2 soap_instantiate__ns1__UploadFullDump(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__UploadFullDump * soap_new__ns1__UploadFullDump(struct soap *soap, int n = -1) { return soap_instantiate__ns1__UploadFullDump(soap, n, NULL, NULL, NULL); }

inline _ns1__UploadFullDump * soap_new_req__ns1__UploadFullDump(struct soap *soap) { _ns1__UploadFullDump *_p = soap_instantiate__ns1__UploadFullDump(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__UploadFullDump * soap_new_set__ns1__UploadFullDump(struct soap *soap, ns1__ClientLib *client, ns1__Application *app, int *miniDumpID, struct _xop__Include *dumpInZip, struct _xop__Include *context) { _ns1__UploadFullDump *_p = soap_instantiate__ns1__UploadFullDump(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__UploadFullDump::client = client; _p->_ns1__UploadFullDump::app = app; _p->_ns1__UploadFullDump::miniDumpID = miniDumpID; _p->_ns1__UploadFullDump::dumpInZip = dumpInZip; _p->_ns1__UploadFullDump::context = context; } return _p; }

inline void soap_delete__ns1__UploadFullDump(struct soap *soap, _ns1__UploadFullDump *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__UploadFullDump(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__UploadMiniDumpResponse
#define SOAP_TYPE__ns1__UploadMiniDumpResponse (70)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UploadMiniDumpResponse(struct soap*, const char*, int, const _ns1__UploadMiniDumpResponse *, const char*);
SOAP_FMAC3 _ns1__UploadMiniDumpResponse * SOAP_FMAC4 soap_in__ns1__UploadMiniDumpResponse(struct soap*, const char*, _ns1__UploadMiniDumpResponse *, const char*);

#ifndef soap_write__ns1__UploadMiniDumpResponse
#define soap_write__ns1__UploadMiniDumpResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:UploadMiniDumpResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__UploadMiniDumpResponse * SOAP_FMAC4 soap_get__ns1__UploadMiniDumpResponse(struct soap*, _ns1__UploadMiniDumpResponse *, const char*, const char*);

#ifndef soap_read__ns1__UploadMiniDumpResponse
#define soap_read__ns1__UploadMiniDumpResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__UploadMiniDumpResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__UploadMiniDumpResponse * SOAP_FMAC2 soap_instantiate__ns1__UploadMiniDumpResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__UploadMiniDumpResponse * soap_new__ns1__UploadMiniDumpResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__UploadMiniDumpResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__UploadMiniDumpResponse * soap_new_req__ns1__UploadMiniDumpResponse(struct soap *soap) { _ns1__UploadMiniDumpResponse *_p = soap_instantiate__ns1__UploadMiniDumpResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__UploadMiniDumpResponse * soap_new_set__ns1__UploadMiniDumpResponse(struct soap *soap, ns1__Response *UploadMiniDumpResult) { _ns1__UploadMiniDumpResponse *_p = soap_instantiate__ns1__UploadMiniDumpResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__UploadMiniDumpResponse::UploadMiniDumpResult = UploadMiniDumpResult; } return _p; }

inline void soap_delete__ns1__UploadMiniDumpResponse(struct soap *soap, _ns1__UploadMiniDumpResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__UploadMiniDumpResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__UploadMiniDump
#define SOAP_TYPE__ns1__UploadMiniDump (69)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UploadMiniDump(struct soap*, const char*, int, const _ns1__UploadMiniDump *, const char*);
SOAP_FMAC3 _ns1__UploadMiniDump * SOAP_FMAC4 soap_in__ns1__UploadMiniDump(struct soap*, const char*, _ns1__UploadMiniDump *, const char*);

#ifndef soap_write__ns1__UploadMiniDump
#define soap_write__ns1__UploadMiniDump(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:UploadMiniDump", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__UploadMiniDump * SOAP_FMAC4 soap_get__ns1__UploadMiniDump(struct soap*, _ns1__UploadMiniDump *, const char*, const char*);

#ifndef soap_read__ns1__UploadMiniDump
#define soap_read__ns1__UploadMiniDump(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__UploadMiniDump(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__UploadMiniDump * SOAP_FMAC2 soap_instantiate__ns1__UploadMiniDump(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__UploadMiniDump * soap_new__ns1__UploadMiniDump(struct soap *soap, int n = -1) { return soap_instantiate__ns1__UploadMiniDump(soap, n, NULL, NULL, NULL); }

inline _ns1__UploadMiniDump * soap_new_req__ns1__UploadMiniDump(struct soap *soap) { _ns1__UploadMiniDump *_p = soap_instantiate__ns1__UploadMiniDump(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__UploadMiniDump * soap_new_set__ns1__UploadMiniDump(struct soap *soap, ns1__ClientLib *client, ns1__Application *app, ns1__DumpAdditionalInfo *addInfo, struct _xop__Include *dump, struct _xop__Include *context) { _ns1__UploadMiniDump *_p = soap_instantiate__ns1__UploadMiniDump(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__UploadMiniDump::client = client; _p->_ns1__UploadMiniDump::app = app; _p->_ns1__UploadMiniDump::addInfo = addInfo; _p->_ns1__UploadMiniDump::dump = dump; _p->_ns1__UploadMiniDump::context = context; } return _p; }

inline void soap_delete__ns1__UploadMiniDump(struct soap *soap, _ns1__UploadMiniDump *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__UploadMiniDump(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__HelloResponse
#define SOAP_TYPE__ns1__HelloResponse (68)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__HelloResponse(struct soap*, const char*, int, const _ns1__HelloResponse *, const char*);
SOAP_FMAC3 _ns1__HelloResponse * SOAP_FMAC4 soap_in__ns1__HelloResponse(struct soap*, const char*, _ns1__HelloResponse *, const char*);

#ifndef soap_write__ns1__HelloResponse
#define soap_write__ns1__HelloResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:HelloResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__HelloResponse * SOAP_FMAC4 soap_get__ns1__HelloResponse(struct soap*, _ns1__HelloResponse *, const char*, const char*);

#ifndef soap_read__ns1__HelloResponse
#define soap_read__ns1__HelloResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__HelloResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__HelloResponse * SOAP_FMAC2 soap_instantiate__ns1__HelloResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__HelloResponse * soap_new__ns1__HelloResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__HelloResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__HelloResponse * soap_new_req__ns1__HelloResponse(struct soap *soap) { _ns1__HelloResponse *_p = soap_instantiate__ns1__HelloResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__HelloResponse * soap_new_set__ns1__HelloResponse(struct soap *soap, ns1__Response *HelloResult) { _ns1__HelloResponse *_p = soap_instantiate__ns1__HelloResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__HelloResponse::HelloResult = HelloResult; } return _p; }

inline void soap_delete__ns1__HelloResponse(struct soap *soap, _ns1__HelloResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__HelloResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__Hello
#define SOAP_TYPE__ns1__Hello (67)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Hello(struct soap*, const char*, int, const _ns1__Hello *, const char*);
SOAP_FMAC3 _ns1__Hello * SOAP_FMAC4 soap_in__ns1__Hello(struct soap*, const char*, _ns1__Hello *, const char*);

#ifndef soap_write__ns1__Hello
#define soap_write__ns1__Hello(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:Hello", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__Hello * SOAP_FMAC4 soap_get__ns1__Hello(struct soap*, _ns1__Hello *, const char*, const char*);

#ifndef soap_read__ns1__Hello
#define soap_read__ns1__Hello(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__Hello(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__Hello * SOAP_FMAC2 soap_instantiate__ns1__Hello(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__Hello * soap_new__ns1__Hello(struct soap *soap, int n = -1) { return soap_instantiate__ns1__Hello(soap, n, NULL, NULL, NULL); }

inline _ns1__Hello * soap_new_req__ns1__Hello(struct soap *soap) { _ns1__Hello *_p = soap_instantiate__ns1__Hello(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__Hello * soap_new_set__ns1__Hello(struct soap *soap, ns1__ClientLib *clientLib, ns1__Application *app, ns1__AppAdditionalInfo *appAddInfo, ns1__DumpAdditionalInfo *addInfo, ns1__ArrayOfModuleSymbolInfo *availableSymbols, struct _xop__Include *stack) { _ns1__Hello *_p = soap_instantiate__ns1__Hello(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__Hello::clientLib = clientLib; _p->_ns1__Hello::app = app; _p->_ns1__Hello::appAddInfo = appAddInfo; _p->_ns1__Hello::addInfo = addInfo; _p->_ns1__Hello::availableSymbols = availableSymbols; _p->_ns1__Hello::stack = stack; } return _p; }

inline void soap_delete__ns1__Hello(struct soap *soap, _ns1__Hello *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__Hello(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__NeedMoreInfoResponse
#define SOAP_TYPE_ns1__NeedMoreInfoResponse (66)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__NeedMoreInfoResponse(struct soap*, const char*, int, const ns1__NeedMoreInfoResponse *, const char*);
SOAP_FMAC3 ns1__NeedMoreInfoResponse * SOAP_FMAC4 soap_in_ns1__NeedMoreInfoResponse(struct soap*, const char*, ns1__NeedMoreInfoResponse *, const char*);

#ifndef soap_write_ns1__NeedMoreInfoResponse
#define soap_write_ns1__NeedMoreInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:NeedMoreInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__NeedMoreInfoResponse * SOAP_FMAC4 soap_get_ns1__NeedMoreInfoResponse(struct soap*, ns1__NeedMoreInfoResponse *, const char*, const char*);

#ifndef soap_read_ns1__NeedMoreInfoResponse
#define soap_read_ns1__NeedMoreInfoResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__NeedMoreInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__NeedMoreInfoResponse * SOAP_FMAC2 soap_instantiate_ns1__NeedMoreInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__NeedMoreInfoResponse * soap_new_ns1__NeedMoreInfoResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__NeedMoreInfoResponse(soap, n, NULL, NULL, NULL); }

inline ns1__NeedMoreInfoResponse * soap_new_req_ns1__NeedMoreInfoResponse(struct soap *soap) { ns1__NeedMoreInfoResponse *_p = soap_instantiate_ns1__NeedMoreInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__NeedMoreInfoResponse * soap_new_set_ns1__NeedMoreInfoResponse(struct soap *soap, struct _xop__Include *infoModule, std::wstring *infoModuleCfg, std::wstring *clientID1, struct _xop__Include *context1, int *dumpGroupID1, int *dumpID1, struct _xop__Include *garbage1, int *problemID1, std::wstring *urlToProblem1, char *__item2) { ns1__NeedMoreInfoResponse *_p = soap_instantiate_ns1__NeedMoreInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__NeedMoreInfoResponse::infoModule = infoModule; _p->ns1__NeedMoreInfoResponse::infoModuleCfg = infoModuleCfg; _p->ns1__Response::clientID = clientID1; _p->ns1__Response::context = context1; _p->ns1__Response::dumpGroupID = dumpGroupID1; _p->ns1__Response::dumpID = dumpID1; _p->ns1__Response::garbage = garbage1; _p->ns1__Response::problemID = problemID1; _p->ns1__Response::urlToProblem = urlToProblem1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_ns1__NeedMoreInfoResponse(struct soap *soap, ns1__NeedMoreInfoResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__NeedMoreInfoResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__NeedFullDumpResponse
#define SOAP_TYPE_ns1__NeedFullDumpResponse (65)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__NeedFullDumpResponse(struct soap*, const char*, int, const ns1__NeedFullDumpResponse *, const char*);
SOAP_FMAC3 ns1__NeedFullDumpResponse * SOAP_FMAC4 soap_in_ns1__NeedFullDumpResponse(struct soap*, const char*, ns1__NeedFullDumpResponse *, const char*);

#ifndef soap_write_ns1__NeedFullDumpResponse
#define soap_write_ns1__NeedFullDumpResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:NeedFullDumpResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__NeedFullDumpResponse * SOAP_FMAC4 soap_get_ns1__NeedFullDumpResponse(struct soap*, ns1__NeedFullDumpResponse *, const char*, const char*);

#ifndef soap_read_ns1__NeedFullDumpResponse
#define soap_read_ns1__NeedFullDumpResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__NeedFullDumpResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__NeedFullDumpResponse * SOAP_FMAC2 soap_instantiate_ns1__NeedFullDumpResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__NeedFullDumpResponse * soap_new_ns1__NeedFullDumpResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__NeedFullDumpResponse(soap, n, NULL, NULL, NULL); }

inline ns1__NeedFullDumpResponse * soap_new_req_ns1__NeedFullDumpResponse(struct soap *soap, bool attachUserInfo, unsigned int restrictedDumpType) { ns1__NeedFullDumpResponse *_p = soap_instantiate_ns1__NeedFullDumpResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__NeedFullDumpResponse::attachUserInfo = attachUserInfo; _p->ns1__NeedFullDumpResponse::restrictedDumpType = restrictedDumpType; } return _p; }

inline ns1__NeedFullDumpResponse * soap_new_set_ns1__NeedFullDumpResponse(struct soap *soap, bool attachUserInfo, unsigned int restrictedDumpType, std::wstring *clientID1, struct _xop__Include *context1, int *dumpGroupID1, int *dumpID1, struct _xop__Include *garbage1, int *problemID1, std::wstring *urlToProblem1, char *__item2) { ns1__NeedFullDumpResponse *_p = soap_instantiate_ns1__NeedFullDumpResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__NeedFullDumpResponse::attachUserInfo = attachUserInfo; _p->ns1__NeedFullDumpResponse::restrictedDumpType = restrictedDumpType; _p->ns1__Response::clientID = clientID1; _p->ns1__Response::context = context1; _p->ns1__Response::dumpGroupID = dumpGroupID1; _p->ns1__Response::dumpID = dumpID1; _p->ns1__Response::garbage = garbage1; _p->ns1__Response::problemID = problemID1; _p->ns1__Response::urlToProblem = urlToProblem1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_ns1__NeedFullDumpResponse(struct soap *soap, ns1__NeedFullDumpResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__NeedFullDumpResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__NeedMiniDumpResponse
#define SOAP_TYPE_ns1__NeedMiniDumpResponse (64)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__NeedMiniDumpResponse(struct soap*, const char*, int, const ns1__NeedMiniDumpResponse *, const char*);
SOAP_FMAC3 ns1__NeedMiniDumpResponse * SOAP_FMAC4 soap_in_ns1__NeedMiniDumpResponse(struct soap*, const char*, ns1__NeedMiniDumpResponse *, const char*);

#ifndef soap_write_ns1__NeedMiniDumpResponse
#define soap_write_ns1__NeedMiniDumpResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:NeedMiniDumpResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__NeedMiniDumpResponse * SOAP_FMAC4 soap_get_ns1__NeedMiniDumpResponse(struct soap*, ns1__NeedMiniDumpResponse *, const char*, const char*);

#ifndef soap_read_ns1__NeedMiniDumpResponse
#define soap_read_ns1__NeedMiniDumpResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__NeedMiniDumpResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__NeedMiniDumpResponse * SOAP_FMAC2 soap_instantiate_ns1__NeedMiniDumpResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__NeedMiniDumpResponse * soap_new_ns1__NeedMiniDumpResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__NeedMiniDumpResponse(soap, n, NULL, NULL, NULL); }

inline ns1__NeedMiniDumpResponse * soap_new_req_ns1__NeedMiniDumpResponse(struct soap *soap) { ns1__NeedMiniDumpResponse *_p = soap_instantiate_ns1__NeedMiniDumpResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__NeedMiniDumpResponse * soap_new_set_ns1__NeedMiniDumpResponse(struct soap *soap, std::wstring *clientID1, struct _xop__Include *context1, int *dumpGroupID1, int *dumpID1, struct _xop__Include *garbage1, int *problemID1, std::wstring *urlToProblem1, char *__item2) { ns1__NeedMiniDumpResponse *_p = soap_instantiate_ns1__NeedMiniDumpResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__Response::clientID = clientID1; _p->ns1__Response::context = context1; _p->ns1__Response::dumpGroupID = dumpGroupID1; _p->ns1__Response::dumpID = dumpID1; _p->ns1__Response::garbage = garbage1; _p->ns1__Response::problemID = problemID1; _p->ns1__Response::urlToProblem = urlToProblem1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_ns1__NeedMiniDumpResponse(struct soap *soap, ns1__NeedMiniDumpResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__NeedMiniDumpResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__NeedSymbolsThenMiniDumpResponse
#define SOAP_TYPE_ns1__NeedSymbolsThenMiniDumpResponse (63)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__NeedSymbolsThenMiniDumpResponse(struct soap*, const char*, int, const ns1__NeedSymbolsThenMiniDumpResponse *, const char*);
SOAP_FMAC3 ns1__NeedSymbolsThenMiniDumpResponse * SOAP_FMAC4 soap_in_ns1__NeedSymbolsThenMiniDumpResponse(struct soap*, const char*, ns1__NeedSymbolsThenMiniDumpResponse *, const char*);

#ifndef soap_write_ns1__NeedSymbolsThenMiniDumpResponse
#define soap_write_ns1__NeedSymbolsThenMiniDumpResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:NeedSymbolsThenMiniDumpResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__NeedSymbolsThenMiniDumpResponse * SOAP_FMAC4 soap_get_ns1__NeedSymbolsThenMiniDumpResponse(struct soap*, ns1__NeedSymbolsThenMiniDumpResponse *, const char*, const char*);

#ifndef soap_read_ns1__NeedSymbolsThenMiniDumpResponse
#define soap_read_ns1__NeedSymbolsThenMiniDumpResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__NeedSymbolsThenMiniDumpResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__NeedSymbolsThenMiniDumpResponse * SOAP_FMAC2 soap_instantiate_ns1__NeedSymbolsThenMiniDumpResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__NeedSymbolsThenMiniDumpResponse * soap_new_ns1__NeedSymbolsThenMiniDumpResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__NeedSymbolsThenMiniDumpResponse(soap, n, NULL, NULL, NULL); }

inline ns1__NeedSymbolsThenMiniDumpResponse * soap_new_req_ns1__NeedSymbolsThenMiniDumpResponse(struct soap *soap, bool askConfirmation) { ns1__NeedSymbolsThenMiniDumpResponse *_p = soap_instantiate_ns1__NeedSymbolsThenMiniDumpResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__NeedSymbolsThenMiniDumpResponse::askConfirmation = askConfirmation; } return _p; }

inline ns1__NeedSymbolsThenMiniDumpResponse * soap_new_set_ns1__NeedSymbolsThenMiniDumpResponse(struct soap *soap, bool askConfirmation, ns5__ArrayOfstring *msSymbols, ns5__ArrayOfstring *symbols, std::wstring *clientID1, struct _xop__Include *context1, int *dumpGroupID1, int *dumpID1, struct _xop__Include *garbage1, int *problemID1, std::wstring *urlToProblem1, char *__item2) { ns1__NeedSymbolsThenMiniDumpResponse *_p = soap_instantiate_ns1__NeedSymbolsThenMiniDumpResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__NeedSymbolsThenMiniDumpResponse::askConfirmation = askConfirmation; _p->ns1__NeedSymbolsThenMiniDumpResponse::msSymbols = msSymbols; _p->ns1__NeedSymbolsThenMiniDumpResponse::symbols = symbols; _p->ns1__Response::clientID = clientID1; _p->ns1__Response::context = context1; _p->ns1__Response::dumpGroupID = dumpGroupID1; _p->ns1__Response::dumpID = dumpID1; _p->ns1__Response::garbage = garbage1; _p->ns1__Response::problemID = problemID1; _p->ns1__Response::urlToProblem = urlToProblem1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_ns1__NeedSymbolsThenMiniDumpResponse(struct soap *soap, ns1__NeedSymbolsThenMiniDumpResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__NeedSymbolsThenMiniDumpResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__HaveSolutionResponse
#define SOAP_TYPE_ns1__HaveSolutionResponse (62)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__HaveSolutionResponse(struct soap*, const char*, int, const ns1__HaveSolutionResponse *, const char*);
SOAP_FMAC3 ns1__HaveSolutionResponse * SOAP_FMAC4 soap_in_ns1__HaveSolutionResponse(struct soap*, const char*, ns1__HaveSolutionResponse *, const char*);

#ifndef soap_write_ns1__HaveSolutionResponse
#define soap_write_ns1__HaveSolutionResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:HaveSolutionResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__HaveSolutionResponse * SOAP_FMAC4 soap_get_ns1__HaveSolutionResponse(struct soap*, ns1__HaveSolutionResponse *, const char*, const char*);

#ifndef soap_read_ns1__HaveSolutionResponse
#define soap_read_ns1__HaveSolutionResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__HaveSolutionResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__HaveSolutionResponse * SOAP_FMAC2 soap_instantiate_ns1__HaveSolutionResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__HaveSolutionResponse * soap_new_ns1__HaveSolutionResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__HaveSolutionResponse(soap, n, NULL, NULL, NULL); }

inline ns1__HaveSolutionResponse * soap_new_req_ns1__HaveSolutionResponse(struct soap *soap, bool askConfirmation, enum ns4__HaveSolutionResponse_SolutionType type) { ns1__HaveSolutionResponse *_p = soap_instantiate_ns1__HaveSolutionResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__HaveSolutionResponse::askConfirmation = askConfirmation; _p->ns1__HaveSolutionResponse::type = type; } return _p; }

inline ns1__HaveSolutionResponse * soap_new_set_ns1__HaveSolutionResponse(struct soap *soap, bool askConfirmation, struct _xop__Include *exe, enum ns4__HaveSolutionResponse_SolutionType type, std::wstring *url, std::wstring *clientID1, struct _xop__Include *context1, int *dumpGroupID1, int *dumpID1, struct _xop__Include *garbage1, int *problemID1, std::wstring *urlToProblem1, char *__item2) { ns1__HaveSolutionResponse *_p = soap_instantiate_ns1__HaveSolutionResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__HaveSolutionResponse::askConfirmation = askConfirmation; _p->ns1__HaveSolutionResponse::exe = exe; _p->ns1__HaveSolutionResponse::type = type; _p->ns1__HaveSolutionResponse::url = url; _p->ns1__Response::clientID = clientID1; _p->ns1__Response::context = context1; _p->ns1__Response::dumpGroupID = dumpGroupID1; _p->ns1__Response::dumpID = dumpID1; _p->ns1__Response::garbage = garbage1; _p->ns1__Response::problemID = problemID1; _p->ns1__Response::urlToProblem = urlToProblem1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_ns1__HaveSolutionResponse(struct soap *soap, ns1__HaveSolutionResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__HaveSolutionResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__ErrorResponse
#define SOAP_TYPE_ns1__ErrorResponse (61)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ErrorResponse(struct soap*, const char*, int, const ns1__ErrorResponse *, const char*);
SOAP_FMAC3 ns1__ErrorResponse * SOAP_FMAC4 soap_in_ns1__ErrorResponse(struct soap*, const char*, ns1__ErrorResponse *, const char*);

#ifndef soap_write_ns1__ErrorResponse
#define soap_write_ns1__ErrorResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:ErrorResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ErrorResponse * SOAP_FMAC4 soap_get_ns1__ErrorResponse(struct soap*, ns1__ErrorResponse *, const char*, const char*);

#ifndef soap_read_ns1__ErrorResponse
#define soap_read_ns1__ErrorResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__ErrorResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__ErrorResponse * SOAP_FMAC2 soap_instantiate_ns1__ErrorResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ErrorResponse * soap_new_ns1__ErrorResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__ErrorResponse(soap, n, NULL, NULL, NULL); }

inline ns1__ErrorResponse * soap_new_req_ns1__ErrorResponse(struct soap *soap) { ns1__ErrorResponse *_p = soap_instantiate_ns1__ErrorResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__ErrorResponse * soap_new_set_ns1__ErrorResponse(struct soap *soap, std::wstring *error, std::wstring *clientID1, struct _xop__Include *context1, int *dumpGroupID1, int *dumpID1, struct _xop__Include *garbage1, int *problemID1, std::wstring *urlToProblem1, char *__item2) { ns1__ErrorResponse *_p = soap_instantiate_ns1__ErrorResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__ErrorResponse::error = error; _p->ns1__Response::clientID = clientID1; _p->ns1__Response::context = context1; _p->ns1__Response::dumpGroupID = dumpGroupID1; _p->ns1__Response::dumpID = dumpID1; _p->ns1__Response::garbage = garbage1; _p->ns1__Response::problemID = problemID1; _p->ns1__Response::urlToProblem = urlToProblem1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_ns1__ErrorResponse(struct soap *soap, ns1__ErrorResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ErrorResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__StopResponse
#define SOAP_TYPE_ns1__StopResponse (60)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__StopResponse(struct soap*, const char*, int, const ns1__StopResponse *, const char*);
SOAP_FMAC3 ns1__StopResponse * SOAP_FMAC4 soap_in_ns1__StopResponse(struct soap*, const char*, ns1__StopResponse *, const char*);

#ifndef soap_write_ns1__StopResponse
#define soap_write_ns1__StopResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:StopResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__StopResponse * SOAP_FMAC4 soap_get_ns1__StopResponse(struct soap*, ns1__StopResponse *, const char*, const char*);

#ifndef soap_read_ns1__StopResponse
#define soap_read_ns1__StopResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__StopResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__StopResponse * SOAP_FMAC2 soap_instantiate_ns1__StopResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__StopResponse * soap_new_ns1__StopResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__StopResponse(soap, n, NULL, NULL, NULL); }

inline ns1__StopResponse * soap_new_req_ns1__StopResponse(struct soap *soap) { ns1__StopResponse *_p = soap_instantiate_ns1__StopResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__StopResponse * soap_new_set_ns1__StopResponse(struct soap *soap, std::wstring *clientID1, struct _xop__Include *context1, int *dumpGroupID1, int *dumpID1, struct _xop__Include *garbage1, int *problemID1, std::wstring *urlToProblem1, char *__item2) { ns1__StopResponse *_p = soap_instantiate_ns1__StopResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__Response::clientID = clientID1; _p->ns1__Response::context = context1; _p->ns1__Response::dumpGroupID = dumpGroupID1; _p->ns1__Response::dumpID = dumpID1; _p->ns1__Response::garbage = garbage1; _p->ns1__Response::problemID = problemID1; _p->ns1__Response::urlToProblem = urlToProblem1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_ns1__StopResponse(struct soap *soap, ns1__StopResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__StopResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__Response
#define SOAP_TYPE_ns1__Response (59)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Response(struct soap*, const char*, int, const ns1__Response *, const char*);
SOAP_FMAC3 ns1__Response * SOAP_FMAC4 soap_in_ns1__Response(struct soap*, const char*, ns1__Response *, const char*);

#ifndef soap_write_ns1__Response
#define soap_write_ns1__Response(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:Response", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__Response * SOAP_FMAC4 soap_get_ns1__Response(struct soap*, ns1__Response *, const char*, const char*);

#ifndef soap_read_ns1__Response
#define soap_read_ns1__Response(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__Response(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__Response * SOAP_FMAC2 soap_instantiate_ns1__Response(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Response * soap_new_ns1__Response(struct soap *soap, int n = -1) { return soap_instantiate_ns1__Response(soap, n, NULL, NULL, NULL); }

inline ns1__Response * soap_new_req_ns1__Response(struct soap *soap) { ns1__Response *_p = soap_instantiate_ns1__Response(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__Response * soap_new_set_ns1__Response(struct soap *soap, std::wstring *clientID, struct _xop__Include *context, int *dumpGroupID, int *dumpID, struct _xop__Include *garbage, int *problemID, std::wstring *urlToProblem, char *__item1) { ns1__Response *_p = soap_instantiate_ns1__Response(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__Response::clientID = clientID; _p->ns1__Response::context = context; _p->ns1__Response::dumpGroupID = dumpGroupID; _p->ns1__Response::dumpID = dumpID; _p->ns1__Response::garbage = garbage; _p->ns1__Response::problemID = problemID; _p->ns1__Response::urlToProblem = urlToProblem; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__Response(struct soap *soap, ns1__Response *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__Response(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__Pdb70File
#define SOAP_TYPE_ns1__Pdb70File (58)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Pdb70File(struct soap*, const char*, int, const ns1__Pdb70File *, const char*);
SOAP_FMAC3 ns1__Pdb70File * SOAP_FMAC4 soap_in_ns1__Pdb70File(struct soap*, const char*, ns1__Pdb70File *, const char*);

#ifndef soap_write_ns1__Pdb70File
#define soap_write_ns1__Pdb70File(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:Pdb70File", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__Pdb70File * SOAP_FMAC4 soap_get_ns1__Pdb70File(struct soap*, ns1__Pdb70File *, const char*, const char*);

#ifndef soap_read_ns1__Pdb70File
#define soap_read_ns1__Pdb70File(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__Pdb70File(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__Pdb70File * SOAP_FMAC2 soap_instantiate_ns1__Pdb70File(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Pdb70File * soap_new_ns1__Pdb70File(struct soap *soap, int n = -1) { return soap_instantiate_ns1__Pdb70File(soap, n, NULL, NULL, NULL); }

inline ns1__Pdb70File * soap_new_req_ns1__Pdb70File(struct soap *soap, unsigned int age, std::wstring& signature) { ns1__Pdb70File *_p = soap_instantiate_ns1__Pdb70File(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__Pdb70File::age = age; _p->ns1__Pdb70File::signature = signature; } return _p; }

inline ns1__Pdb70File * soap_new_set_ns1__Pdb70File(struct soap *soap, unsigned int age, std::wstring *path, std::wstring& signature, char *__item1) { ns1__Pdb70File *_p = soap_instantiate_ns1__Pdb70File(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__Pdb70File::age = age; _p->ns1__Pdb70File::path = path; _p->ns1__Pdb70File::signature = signature; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__Pdb70File(struct soap *soap, ns1__Pdb70File *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__Pdb70File(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__ModuleSymbolInfo
#define SOAP_TYPE_ns1__ModuleSymbolInfo (57)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ModuleSymbolInfo(struct soap*, const char*, int, const ns1__ModuleSymbolInfo *, const char*);
SOAP_FMAC3 ns1__ModuleSymbolInfo * SOAP_FMAC4 soap_in_ns1__ModuleSymbolInfo(struct soap*, const char*, ns1__ModuleSymbolInfo *, const char*);

#ifndef soap_write_ns1__ModuleSymbolInfo
#define soap_write_ns1__ModuleSymbolInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:ModuleSymbolInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ModuleSymbolInfo * SOAP_FMAC4 soap_get_ns1__ModuleSymbolInfo(struct soap*, ns1__ModuleSymbolInfo *, const char*, const char*);

#ifndef soap_read_ns1__ModuleSymbolInfo
#define soap_read_ns1__ModuleSymbolInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__ModuleSymbolInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__ModuleSymbolInfo * SOAP_FMAC2 soap_instantiate_ns1__ModuleSymbolInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ModuleSymbolInfo * soap_new_ns1__ModuleSymbolInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns1__ModuleSymbolInfo(soap, n, NULL, NULL, NULL); }

inline ns1__ModuleSymbolInfo * soap_new_req_ns1__ModuleSymbolInfo(struct soap *soap, bool isMicrosoftModule, unsigned int sizeOfImage, unsigned int timeDateStamp) { ns1__ModuleSymbolInfo *_p = soap_instantiate_ns1__ModuleSymbolInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__ModuleSymbolInfo::isMicrosoftModule = isMicrosoftModule; _p->ns1__ModuleSymbolInfo::sizeOfImage = sizeOfImage; _p->ns1__ModuleSymbolInfo::timeDateStamp = timeDateStamp; } return _p; }

inline ns1__ModuleSymbolInfo * soap_new_set_ns1__ModuleSymbolInfo(struct soap *soap, bool isMicrosoftModule, std::wstring *path, ns1__Pdb70File *pdb, unsigned int sizeOfImage, unsigned int timeDateStamp, char *__item1) { ns1__ModuleSymbolInfo *_p = soap_instantiate_ns1__ModuleSymbolInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__ModuleSymbolInfo::isMicrosoftModule = isMicrosoftModule; _p->ns1__ModuleSymbolInfo::path = path; _p->ns1__ModuleSymbolInfo::pdb = pdb; _p->ns1__ModuleSymbolInfo::sizeOfImage = sizeOfImage; _p->ns1__ModuleSymbolInfo::timeDateStamp = timeDateStamp; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__ModuleSymbolInfo(struct soap *soap, ns1__ModuleSymbolInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ModuleSymbolInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__ArrayOfModuleSymbolInfo
#define SOAP_TYPE_ns1__ArrayOfModuleSymbolInfo (56)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfModuleSymbolInfo(struct soap*, const char*, int, const ns1__ArrayOfModuleSymbolInfo *, const char*);
SOAP_FMAC3 ns1__ArrayOfModuleSymbolInfo * SOAP_FMAC4 soap_in_ns1__ArrayOfModuleSymbolInfo(struct soap*, const char*, ns1__ArrayOfModuleSymbolInfo *, const char*);

#ifndef soap_write_ns1__ArrayOfModuleSymbolInfo
#define soap_write_ns1__ArrayOfModuleSymbolInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:ArrayOfModuleSymbolInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ArrayOfModuleSymbolInfo * SOAP_FMAC4 soap_get_ns1__ArrayOfModuleSymbolInfo(struct soap*, ns1__ArrayOfModuleSymbolInfo *, const char*, const char*);

#ifndef soap_read_ns1__ArrayOfModuleSymbolInfo
#define soap_read_ns1__ArrayOfModuleSymbolInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__ArrayOfModuleSymbolInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__ArrayOfModuleSymbolInfo * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfModuleSymbolInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ArrayOfModuleSymbolInfo * soap_new_ns1__ArrayOfModuleSymbolInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns1__ArrayOfModuleSymbolInfo(soap, n, NULL, NULL, NULL); }

inline ns1__ArrayOfModuleSymbolInfo * soap_new_req_ns1__ArrayOfModuleSymbolInfo(struct soap *soap) { ns1__ArrayOfModuleSymbolInfo *_p = soap_instantiate_ns1__ArrayOfModuleSymbolInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__ArrayOfModuleSymbolInfo * soap_new_set_ns1__ArrayOfModuleSymbolInfo(struct soap *soap, std::vector<ns1__ModuleSymbolInfo * >& ModuleSymbolInfo, char *__item1) { ns1__ArrayOfModuleSymbolInfo *_p = soap_instantiate_ns1__ArrayOfModuleSymbolInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__ArrayOfModuleSymbolInfo::ModuleSymbolInfo = ModuleSymbolInfo; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__ArrayOfModuleSymbolInfo(struct soap *soap, ns1__ArrayOfModuleSymbolInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfModuleSymbolInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__DumpAdditionalInfo
#define SOAP_TYPE_ns1__DumpAdditionalInfo (55)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DumpAdditionalInfo(struct soap*, const char*, int, const ns1__DumpAdditionalInfo *, const char*);
SOAP_FMAC3 ns1__DumpAdditionalInfo * SOAP_FMAC4 soap_in_ns1__DumpAdditionalInfo(struct soap*, const char*, ns1__DumpAdditionalInfo *, const char*);

#ifndef soap_write_ns1__DumpAdditionalInfo
#define soap_write_ns1__DumpAdditionalInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:DumpAdditionalInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__DumpAdditionalInfo * SOAP_FMAC4 soap_get_ns1__DumpAdditionalInfo(struct soap*, ns1__DumpAdditionalInfo *, const char*, const char*);

#ifndef soap_read_ns1__DumpAdditionalInfo
#define soap_read_ns1__DumpAdditionalInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__DumpAdditionalInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__DumpAdditionalInfo * SOAP_FMAC2 soap_instantiate_ns1__DumpAdditionalInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DumpAdditionalInfo * soap_new_ns1__DumpAdditionalInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns1__DumpAdditionalInfo(soap, n, NULL, NULL, NULL); }

inline ns1__DumpAdditionalInfo * soap_new_req_ns1__DumpAdditionalInfo(struct soap *soap, int PCID, time_t crashDate, int submitterID) { ns1__DumpAdditionalInfo *_p = soap_instantiate_ns1__DumpAdditionalInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__DumpAdditionalInfo::PCID = PCID; _p->ns1__DumpAdditionalInfo::crashDate = crashDate; _p->ns1__DumpAdditionalInfo::submitterID = submitterID; } return _p; }

inline ns1__DumpAdditionalInfo * soap_new_set_ns1__DumpAdditionalInfo(struct soap *soap, int PCID, time_t crashDate, std::wstring *description, std::wstring *group, int submitterID, char *__item1) { ns1__DumpAdditionalInfo *_p = soap_instantiate_ns1__DumpAdditionalInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__DumpAdditionalInfo::PCID = PCID; _p->ns1__DumpAdditionalInfo::crashDate = crashDate; _p->ns1__DumpAdditionalInfo::description = description; _p->ns1__DumpAdditionalInfo::group = group; _p->ns1__DumpAdditionalInfo::submitterID = submitterID; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__DumpAdditionalInfo(struct soap *soap, ns1__DumpAdditionalInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__DumpAdditionalInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__AppAdditionalInfo
#define SOAP_TYPE_ns1__AppAdditionalInfo (54)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AppAdditionalInfo(struct soap*, const char*, int, const ns1__AppAdditionalInfo *, const char*);
SOAP_FMAC3 ns1__AppAdditionalInfo * SOAP_FMAC4 soap_in_ns1__AppAdditionalInfo(struct soap*, const char*, ns1__AppAdditionalInfo *, const char*);

#ifndef soap_write_ns1__AppAdditionalInfo
#define soap_write_ns1__AppAdditionalInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:AppAdditionalInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__AppAdditionalInfo * SOAP_FMAC4 soap_get_ns1__AppAdditionalInfo(struct soap*, ns1__AppAdditionalInfo *, const char*, const char*);

#ifndef soap_read_ns1__AppAdditionalInfo
#define soap_read_ns1__AppAdditionalInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__AppAdditionalInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__AppAdditionalInfo * SOAP_FMAC2 soap_instantiate_ns1__AppAdditionalInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns1__AppAdditionalInfo * soap_new_ns1__AppAdditionalInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns1__AppAdditionalInfo(soap, n, NULL, NULL, NULL); }

inline ns1__AppAdditionalInfo * soap_new_req_ns1__AppAdditionalInfo(struct soap *soap) { ns1__AppAdditionalInfo *_p = soap_instantiate_ns1__AppAdditionalInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__AppAdditionalInfo * soap_new_set_ns1__AppAdditionalInfo(struct soap *soap, std::wstring *appName, std::wstring *companyName, char *__item1) { ns1__AppAdditionalInfo *_p = soap_instantiate_ns1__AppAdditionalInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__AppAdditionalInfo::appName = appName; _p->ns1__AppAdditionalInfo::companyName = companyName; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__AppAdditionalInfo(struct soap *soap, ns1__AppAdditionalInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__AppAdditionalInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__Application
#define SOAP_TYPE_ns1__Application (53)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Application(struct soap*, const char*, int, const ns1__Application *, const char*);
SOAP_FMAC3 ns1__Application * SOAP_FMAC4 soap_in_ns1__Application(struct soap*, const char*, ns1__Application *, const char*);

#ifndef soap_write_ns1__Application
#define soap_write_ns1__Application(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:Application", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__Application * SOAP_FMAC4 soap_get_ns1__Application(struct soap*, ns1__Application *, const char*, const char*);

#ifndef soap_read_ns1__Application
#define soap_read_ns1__Application(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__Application(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__Application * SOAP_FMAC2 soap_instantiate_ns1__Application(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Application * soap_new_ns1__Application(struct soap *soap, int n = -1) { return soap_instantiate_ns1__Application(soap, n, NULL, NULL, NULL); }

inline ns1__Application * soap_new_req_ns1__Application(struct soap *soap, std::wstring& applicationGUID, unsigned short hotfix, unsigned short v1, unsigned short v2, unsigned short v3, unsigned short v4) { ns1__Application *_p = soap_instantiate_ns1__Application(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__Application::applicationGUID = applicationGUID; _p->ns1__Application::hotfix = hotfix; _p->ns1__Application::v1 = v1; _p->ns1__Application::v2 = v2; _p->ns1__Application::v3 = v3; _p->ns1__Application::v4 = v4; } return _p; }

inline ns1__Application * soap_new_set_ns1__Application(struct soap *soap, std::wstring& applicationGUID, unsigned short hotfix, std::wstring *mainModule, unsigned short v1, unsigned short v2, unsigned short v3, unsigned short v4, char *__item1) { ns1__Application *_p = soap_instantiate_ns1__Application(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__Application::applicationGUID = applicationGUID; _p->ns1__Application::hotfix = hotfix; _p->ns1__Application::mainModule = mainModule; _p->ns1__Application::v1 = v1; _p->ns1__Application::v2 = v2; _p->ns1__Application::v3 = v3; _p->ns1__Application::v4 = v4; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__Application(struct soap *soap, ns1__Application *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__Application(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__ClientLib
#define SOAP_TYPE_ns1__ClientLib (52)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ClientLib(struct soap*, const char*, int, const ns1__ClientLib *, const char*);
SOAP_FMAC3 ns1__ClientLib * SOAP_FMAC4 soap_in_ns1__ClientLib(struct soap*, const char*, ns1__ClientLib *, const char*);

#ifndef soap_write_ns1__ClientLib
#define soap_write_ns1__ClientLib(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:ClientLib", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ClientLib * SOAP_FMAC4 soap_get_ns1__ClientLib(struct soap*, ns1__ClientLib *, const char*, const char*);

#ifndef soap_read_ns1__ClientLib
#define soap_read_ns1__ClientLib(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__ClientLib(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__ClientLib * SOAP_FMAC2 soap_instantiate_ns1__ClientLib(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ClientLib * soap_new_ns1__ClientLib(struct soap *soap, int n = -1) { return soap_instantiate_ns1__ClientLib(soap, n, NULL, NULL, NULL); }

inline ns1__ClientLib * soap_new_req_ns1__ClientLib(struct soap *soap, enum ns4__ClientLib_Architecture arch, enum ns4__ClientLib_ClientType type, unsigned short v1, unsigned short v2, unsigned short v3, unsigned short v4) { ns1__ClientLib *_p = soap_instantiate_ns1__ClientLib(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__ClientLib::arch = arch; _p->ns1__ClientLib::type = type; _p->ns1__ClientLib::v1 = v1; _p->ns1__ClientLib::v2 = v2; _p->ns1__ClientLib::v3 = v3; _p->ns1__ClientLib::v4 = v4; } return _p; }

inline ns1__ClientLib * soap_new_set_ns1__ClientLib(struct soap *soap, enum ns4__ClientLib_Architecture arch, enum ns4__ClientLib_ClientType type, unsigned short v1, unsigned short v2, unsigned short v3, unsigned short v4, char *__item1) { ns1__ClientLib *_p = soap_instantiate_ns1__ClientLib(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__ClientLib::arch = arch; _p->ns1__ClientLib::type = type; _p->ns1__ClientLib::v1 = v1; _p->ns1__ClientLib::v2 = v2; _p->ns1__ClientLib::v3 = v3; _p->ns1__ClientLib::v4 = v4; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__ClientLib(struct soap *soap, ns1__ClientLib *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ClientLib(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__unsignedShort
#define SOAP_TYPE_xsd__unsignedShort (50)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedShort(struct soap*, const char*, int, const xsd__unsignedShort *, const char*);
SOAP_FMAC3 xsd__unsignedShort * SOAP_FMAC4 soap_in_xsd__unsignedShort(struct soap*, const char*, xsd__unsignedShort *, const char*);

#ifndef soap_write_xsd__unsignedShort
#define soap_write_xsd__unsignedShort(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:unsignedShort", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__unsignedShort * SOAP_FMAC4 soap_get_xsd__unsignedShort(struct soap*, xsd__unsignedShort *, const char*, const char*);

#ifndef soap_read_xsd__unsignedShort
#define soap_read_xsd__unsignedShort(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__unsignedShort(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__unsignedShort * SOAP_FMAC2 soap_instantiate_xsd__unsignedShort(struct soap*, int, const char*, const char*, size_t*);

inline xsd__unsignedShort * soap_new_xsd__unsignedShort(struct soap *soap, int n = -1) { return soap_instantiate_xsd__unsignedShort(soap, n, NULL, NULL, NULL); }

inline xsd__unsignedShort * soap_new_req_xsd__unsignedShort(struct soap *soap, unsigned short __item) { xsd__unsignedShort *_p = soap_instantiate_xsd__unsignedShort(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__unsignedShort::__item = __item; } return _p; }

inline xsd__unsignedShort * soap_new_set_xsd__unsignedShort(struct soap *soap, unsigned short __item, char *__item1) { xsd__unsignedShort *_p = soap_instantiate_xsd__unsignedShort(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__unsignedShort::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__unsignedShort(struct soap *soap, xsd__unsignedShort *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__unsignedShort(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__unsignedLong
#define SOAP_TYPE_xsd__unsignedLong (48)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedLong(struct soap*, const char*, int, const xsd__unsignedLong *, const char*);
SOAP_FMAC3 xsd__unsignedLong * SOAP_FMAC4 soap_in_xsd__unsignedLong(struct soap*, const char*, xsd__unsignedLong *, const char*);

#ifndef soap_write_xsd__unsignedLong
#define soap_write_xsd__unsignedLong(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:unsignedLong", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__unsignedLong * SOAP_FMAC4 soap_get_xsd__unsignedLong(struct soap*, xsd__unsignedLong *, const char*, const char*);

#ifndef soap_read_xsd__unsignedLong
#define soap_read_xsd__unsignedLong(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__unsignedLong(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__unsignedLong * SOAP_FMAC2 soap_instantiate_xsd__unsignedLong(struct soap*, int, const char*, const char*, size_t*);

inline xsd__unsignedLong * soap_new_xsd__unsignedLong(struct soap *soap, int n = -1) { return soap_instantiate_xsd__unsignedLong(soap, n, NULL, NULL, NULL); }

inline xsd__unsignedLong * soap_new_req_xsd__unsignedLong(struct soap *soap, ULONG64 __item) { xsd__unsignedLong *_p = soap_instantiate_xsd__unsignedLong(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__unsignedLong::__item = __item; } return _p; }

inline xsd__unsignedLong * soap_new_set_xsd__unsignedLong(struct soap *soap, ULONG64 __item, char *__item1) { xsd__unsignedLong *_p = soap_instantiate_xsd__unsignedLong(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__unsignedLong::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__unsignedLong(struct soap *soap, xsd__unsignedLong *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__unsignedLong(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__unsignedInt
#define SOAP_TYPE_xsd__unsignedInt (47)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedInt(struct soap*, const char*, int, const xsd__unsignedInt *, const char*);
SOAP_FMAC3 xsd__unsignedInt * SOAP_FMAC4 soap_in_xsd__unsignedInt(struct soap*, const char*, xsd__unsignedInt *, const char*);

#ifndef soap_write_xsd__unsignedInt
#define soap_write_xsd__unsignedInt(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:unsignedInt", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__unsignedInt * SOAP_FMAC4 soap_get_xsd__unsignedInt(struct soap*, xsd__unsignedInt *, const char*, const char*);

#ifndef soap_read_xsd__unsignedInt
#define soap_read_xsd__unsignedInt(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__unsignedInt(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__unsignedInt * SOAP_FMAC2 soap_instantiate_xsd__unsignedInt(struct soap*, int, const char*, const char*, size_t*);

inline xsd__unsignedInt * soap_new_xsd__unsignedInt(struct soap *soap, int n = -1) { return soap_instantiate_xsd__unsignedInt(soap, n, NULL, NULL, NULL); }

inline xsd__unsignedInt * soap_new_req_xsd__unsignedInt(struct soap *soap, unsigned int __item) { xsd__unsignedInt *_p = soap_instantiate_xsd__unsignedInt(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__unsignedInt::__item = __item; } return _p; }

inline xsd__unsignedInt * soap_new_set_xsd__unsignedInt(struct soap *soap, unsigned int __item, char *__item1) { xsd__unsignedInt *_p = soap_instantiate_xsd__unsignedInt(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__unsignedInt::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__unsignedInt(struct soap *soap, xsd__unsignedInt *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__unsignedInt(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__unsignedByte_
#define SOAP_TYPE_xsd__unsignedByte_ (46)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedByte_(struct soap*, const char*, int, const xsd__unsignedByte_ *, const char*);
SOAP_FMAC3 xsd__unsignedByte_ * SOAP_FMAC4 soap_in_xsd__unsignedByte_(struct soap*, const char*, xsd__unsignedByte_ *, const char*);

#ifndef soap_write_xsd__unsignedByte_
#define soap_write_xsd__unsignedByte_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:unsignedByte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__unsignedByte_ * SOAP_FMAC4 soap_get_xsd__unsignedByte_(struct soap*, xsd__unsignedByte_ *, const char*, const char*);

#ifndef soap_read_xsd__unsignedByte_
#define soap_read_xsd__unsignedByte_(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__unsignedByte_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__unsignedByte_ * SOAP_FMAC2 soap_instantiate_xsd__unsignedByte_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__unsignedByte_ * soap_new_xsd__unsignedByte_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__unsignedByte_(soap, n, NULL, NULL, NULL); }

inline xsd__unsignedByte_ * soap_new_req_xsd__unsignedByte_(struct soap *soap, unsigned char __item) { xsd__unsignedByte_ *_p = soap_instantiate_xsd__unsignedByte_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__unsignedByte_::__item = __item; } return _p; }

inline xsd__unsignedByte_ * soap_new_set_xsd__unsignedByte_(struct soap *soap, unsigned char __item, char *__item1) { xsd__unsignedByte_ *_p = soap_instantiate_xsd__unsignedByte_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__unsignedByte_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__unsignedByte_(struct soap *soap, xsd__unsignedByte_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__unsignedByte_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__string
#define SOAP_TYPE_xsd__string (45)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap*, const char*, int, const xsd__string *, const char*);
SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_in_xsd__string(struct soap*, const char*, xsd__string *, const char*);

#ifndef soap_write_xsd__string
#define soap_write_xsd__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_get_xsd__string(struct soap*, xsd__string *, const char*, const char*);

#ifndef soap_read_xsd__string
#define soap_read_xsd__string(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__string * SOAP_FMAC2 soap_instantiate_xsd__string(struct soap*, int, const char*, const char*, size_t*);

inline xsd__string * soap_new_xsd__string(struct soap *soap, int n = -1) { return soap_instantiate_xsd__string(soap, n, NULL, NULL, NULL); }

inline xsd__string * soap_new_req_xsd__string(struct soap *soap, std::wstring& __item) { xsd__string *_p = soap_instantiate_xsd__string(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__string::__item = __item; } return _p; }

inline xsd__string * soap_new_set_xsd__string(struct soap *soap, std::wstring& __item, char *__item1) { xsd__string *_p = soap_instantiate_xsd__string(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__string::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__string(struct soap *soap, xsd__string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__short
#define SOAP_TYPE_xsd__short (43)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__short(struct soap*, const char*, int, const xsd__short *, const char*);
SOAP_FMAC3 xsd__short * SOAP_FMAC4 soap_in_xsd__short(struct soap*, const char*, xsd__short *, const char*);

#ifndef soap_write_xsd__short
#define soap_write_xsd__short(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:short", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__short * SOAP_FMAC4 soap_get_xsd__short(struct soap*, xsd__short *, const char*, const char*);

#ifndef soap_read_xsd__short
#define soap_read_xsd__short(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__short(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__short * SOAP_FMAC2 soap_instantiate_xsd__short(struct soap*, int, const char*, const char*, size_t*);

inline xsd__short * soap_new_xsd__short(struct soap *soap, int n = -1) { return soap_instantiate_xsd__short(soap, n, NULL, NULL, NULL); }

inline xsd__short * soap_new_req_xsd__short(struct soap *soap, short __item) { xsd__short *_p = soap_instantiate_xsd__short(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__short::__item = __item; } return _p; }

inline xsd__short * soap_new_set_xsd__short(struct soap *soap, short __item, char *__item1) { xsd__short *_p = soap_instantiate_xsd__short(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__short::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__short(struct soap *soap, xsd__short *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__short(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__long
#define SOAP_TYPE_xsd__long (41)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__long(struct soap*, const char*, int, const xsd__long *, const char*);
SOAP_FMAC3 xsd__long * SOAP_FMAC4 soap_in_xsd__long(struct soap*, const char*, xsd__long *, const char*);

#ifndef soap_write_xsd__long
#define soap_write_xsd__long(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:long", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__long * SOAP_FMAC4 soap_get_xsd__long(struct soap*, xsd__long *, const char*, const char*);

#ifndef soap_read_xsd__long
#define soap_read_xsd__long(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__long(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__long * SOAP_FMAC2 soap_instantiate_xsd__long(struct soap*, int, const char*, const char*, size_t*);

inline xsd__long * soap_new_xsd__long(struct soap *soap, int n = -1) { return soap_instantiate_xsd__long(soap, n, NULL, NULL, NULL); }

inline xsd__long * soap_new_req_xsd__long(struct soap *soap, LONG64 __item) { xsd__long *_p = soap_instantiate_xsd__long(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__long::__item = __item; } return _p; }

inline xsd__long * soap_new_set_xsd__long(struct soap *soap, LONG64 __item, char *__item1) { xsd__long *_p = soap_instantiate_xsd__long(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__long::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__long(struct soap *soap, xsd__long *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__long(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__int
#define SOAP_TYPE_xsd__int (40)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap*, const char*, int, const xsd__int *, const char*);
SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_in_xsd__int(struct soap*, const char*, xsd__int *, const char*);

#ifndef soap_write_xsd__int
#define soap_write_xsd__int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_get_xsd__int(struct soap*, xsd__int *, const char*, const char*);

#ifndef soap_read_xsd__int
#define soap_read_xsd__int(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__int * SOAP_FMAC2 soap_instantiate_xsd__int(struct soap*, int, const char*, const char*, size_t*);

inline xsd__int * soap_new_xsd__int(struct soap *soap, int n = -1) { return soap_instantiate_xsd__int(soap, n, NULL, NULL, NULL); }

inline xsd__int * soap_new_req_xsd__int(struct soap *soap, int __item) { xsd__int *_p = soap_instantiate_xsd__int(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__int::__item = __item; } return _p; }

inline xsd__int * soap_new_set_xsd__int(struct soap *soap, int __item, char *__item1) { xsd__int *_p = soap_instantiate_xsd__int(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__int::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__int(struct soap *soap, xsd__int *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__int(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__float
#define SOAP_TYPE_xsd__float (38)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__float(struct soap*, const char*, int, const xsd__float *, const char*);
SOAP_FMAC3 xsd__float * SOAP_FMAC4 soap_in_xsd__float(struct soap*, const char*, xsd__float *, const char*);

#ifndef soap_write_xsd__float
#define soap_write_xsd__float(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:float", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__float * SOAP_FMAC4 soap_get_xsd__float(struct soap*, xsd__float *, const char*, const char*);

#ifndef soap_read_xsd__float
#define soap_read_xsd__float(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__float(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__float * SOAP_FMAC2 soap_instantiate_xsd__float(struct soap*, int, const char*, const char*, size_t*);

inline xsd__float * soap_new_xsd__float(struct soap *soap, int n = -1) { return soap_instantiate_xsd__float(soap, n, NULL, NULL, NULL); }

inline xsd__float * soap_new_req_xsd__float(struct soap *soap, float __item) { xsd__float *_p = soap_instantiate_xsd__float(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__float::__item = __item; } return _p; }

inline xsd__float * soap_new_set_xsd__float(struct soap *soap, float __item, char *__item1) { xsd__float *_p = soap_instantiate_xsd__float(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__float::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__float(struct soap *soap, xsd__float *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__float(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__duration_
#define SOAP_TYPE_xsd__duration_ (37)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__duration_(struct soap*, const char*, int, const xsd__duration_ *, const char*);
SOAP_FMAC3 xsd__duration_ * SOAP_FMAC4 soap_in_xsd__duration_(struct soap*, const char*, xsd__duration_ *, const char*);

#ifndef soap_write_xsd__duration_
#define soap_write_xsd__duration_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:duration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__duration_ * SOAP_FMAC4 soap_get_xsd__duration_(struct soap*, xsd__duration_ *, const char*, const char*);

#ifndef soap_read_xsd__duration_
#define soap_read_xsd__duration_(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__duration_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__duration_ * SOAP_FMAC2 soap_instantiate_xsd__duration_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__duration_ * soap_new_xsd__duration_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__duration_(soap, n, NULL, NULL, NULL); }

inline xsd__duration_ * soap_new_req_xsd__duration_(struct soap *soap, std::wstring& __item) { xsd__duration_ *_p = soap_instantiate_xsd__duration_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__duration_::__item = __item; } return _p; }

inline xsd__duration_ * soap_new_set_xsd__duration_(struct soap *soap, std::wstring& __item, char *__item1) { xsd__duration_ *_p = soap_instantiate_xsd__duration_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__duration_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__duration_(struct soap *soap, xsd__duration_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__duration_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__duration
#define SOAP_TYPE_xsd__duration (36)
#endif

#define soap_default_xsd__duration(soap, a) soap_default_std__wstring(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__duration(struct soap*, const std::wstring *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__duration(struct soap*, const char*, int, const std::wstring*, const char*);
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_xsd__duration(struct soap*, const char*, std::wstring*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__duration(struct soap*, const std::wstring *, const char*, const char*);

#ifndef soap_write_xsd__duration
#define soap_write_xsd__duration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__duration(soap, data),0) || soap_put_xsd__duration(soap, data, "xsd:duration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_xsd__duration(struct soap*, std::wstring *, const char*, const char*);

#ifndef soap_read_xsd__duration
#define soap_read_xsd__duration(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__duration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_xsd__duration soap_instantiate_std__wstring


#define soap_copy_xsd__duration soap_copy_std__wstring

#ifndef SOAP_TYPE_xsd__double
#define SOAP_TYPE_xsd__double (34)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__double(struct soap*, const char*, int, const xsd__double *, const char*);
SOAP_FMAC3 xsd__double * SOAP_FMAC4 soap_in_xsd__double(struct soap*, const char*, xsd__double *, const char*);

#ifndef soap_write_xsd__double
#define soap_write_xsd__double(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:double", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__double * SOAP_FMAC4 soap_get_xsd__double(struct soap*, xsd__double *, const char*, const char*);

#ifndef soap_read_xsd__double
#define soap_read_xsd__double(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__double(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__double * SOAP_FMAC2 soap_instantiate_xsd__double(struct soap*, int, const char*, const char*, size_t*);

inline xsd__double * soap_new_xsd__double(struct soap *soap, int n = -1) { return soap_instantiate_xsd__double(soap, n, NULL, NULL, NULL); }

inline xsd__double * soap_new_req_xsd__double(struct soap *soap, double __item) { xsd__double *_p = soap_instantiate_xsd__double(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__double::__item = __item; } return _p; }

inline xsd__double * soap_new_set_xsd__double(struct soap *soap, double __item, char *__item1) { xsd__double *_p = soap_instantiate_xsd__double(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__double::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__double(struct soap *soap, xsd__double *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__double(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__decimal_
#define SOAP_TYPE_xsd__decimal_ (33)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal_(struct soap*, const char*, int, const xsd__decimal_ *, const char*);
SOAP_FMAC3 xsd__decimal_ * SOAP_FMAC4 soap_in_xsd__decimal_(struct soap*, const char*, xsd__decimal_ *, const char*);

#ifndef soap_write_xsd__decimal_
#define soap_write_xsd__decimal_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:decimal", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__decimal_ * SOAP_FMAC4 soap_get_xsd__decimal_(struct soap*, xsd__decimal_ *, const char*, const char*);

#ifndef soap_read_xsd__decimal_
#define soap_read_xsd__decimal_(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__decimal_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__decimal_ * SOAP_FMAC2 soap_instantiate_xsd__decimal_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__decimal_ * soap_new_xsd__decimal_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__decimal_(soap, n, NULL, NULL, NULL); }

inline xsd__decimal_ * soap_new_req_xsd__decimal_(struct soap *soap, std::wstring& __item) { xsd__decimal_ *_p = soap_instantiate_xsd__decimal_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__decimal_::__item = __item; } return _p; }

inline xsd__decimal_ * soap_new_set_xsd__decimal_(struct soap *soap, std::wstring& __item, char *__item1) { xsd__decimal_ *_p = soap_instantiate_xsd__decimal_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__decimal_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__decimal_(struct soap *soap, xsd__decimal_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__decimal_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__decimal
#define SOAP_TYPE_xsd__decimal (32)
#endif

#define soap_default_xsd__decimal(soap, a) soap_default_std__wstring(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__decimal(struct soap*, const std::wstring *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal(struct soap*, const char*, int, const std::wstring*, const char*);
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_xsd__decimal(struct soap*, const char*, std::wstring*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__decimal(struct soap*, const std::wstring *, const char*, const char*);

#ifndef soap_write_xsd__decimal
#define soap_write_xsd__decimal(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__decimal(soap, data),0) || soap_put_xsd__decimal(soap, data, "xsd:decimal", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_xsd__decimal(struct soap*, std::wstring *, const char*, const char*);

#ifndef soap_read_xsd__decimal
#define soap_read_xsd__decimal(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__decimal(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_xsd__decimal soap_instantiate_std__wstring


#define soap_copy_xsd__decimal soap_copy_std__wstring

#ifndef SOAP_TYPE_xsd__dateTime
#define SOAP_TYPE_xsd__dateTime (30)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__dateTime(struct soap*, const char*, int, const xsd__dateTime *, const char*);
SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_in_xsd__dateTime(struct soap*, const char*, xsd__dateTime *, const char*);

#ifndef soap_write_xsd__dateTime
#define soap_write_xsd__dateTime(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:dateTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_get_xsd__dateTime(struct soap*, xsd__dateTime *, const char*, const char*);

#ifndef soap_read_xsd__dateTime
#define soap_read_xsd__dateTime(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__dateTime(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__dateTime * SOAP_FMAC2 soap_instantiate_xsd__dateTime(struct soap*, int, const char*, const char*, size_t*);

inline xsd__dateTime * soap_new_xsd__dateTime(struct soap *soap, int n = -1) { return soap_instantiate_xsd__dateTime(soap, n, NULL, NULL, NULL); }

inline xsd__dateTime * soap_new_req_xsd__dateTime(struct soap *soap, time_t __item) { xsd__dateTime *_p = soap_instantiate_xsd__dateTime(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__dateTime::__item = __item; } return _p; }

inline xsd__dateTime * soap_new_set_xsd__dateTime(struct soap *soap, time_t __item, char *__item1) { xsd__dateTime *_p = soap_instantiate_xsd__dateTime(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__dateTime::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__dateTime(struct soap *soap, xsd__dateTime *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__dateTime(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__byte_
#define SOAP_TYPE_xsd__byte_ (29)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__byte_(struct soap*, const char*, int, const xsd__byte_ *, const char*);
SOAP_FMAC3 xsd__byte_ * SOAP_FMAC4 soap_in_xsd__byte_(struct soap*, const char*, xsd__byte_ *, const char*);

#ifndef soap_write_xsd__byte_
#define soap_write_xsd__byte_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__byte_ * SOAP_FMAC4 soap_get_xsd__byte_(struct soap*, xsd__byte_ *, const char*, const char*);

#ifndef soap_read_xsd__byte_
#define soap_read_xsd__byte_(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__byte_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__byte_ * SOAP_FMAC2 soap_instantiate_xsd__byte_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__byte_ * soap_new_xsd__byte_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__byte_(soap, n, NULL, NULL, NULL); }

inline xsd__byte_ * soap_new_req_xsd__byte_(struct soap *soap, char __item) { xsd__byte_ *_p = soap_instantiate_xsd__byte_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__byte_::__item = __item; } return _p; }

inline xsd__byte_ * soap_new_set_xsd__byte_(struct soap *soap, char __item, char *__item1) { xsd__byte_ *_p = soap_instantiate_xsd__byte_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__byte_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__byte_(struct soap *soap, xsd__byte_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__byte_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__boolean
#define SOAP_TYPE_xsd__boolean (27)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__boolean(struct soap*, const char*, int, const xsd__boolean *, const char*);
SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_in_xsd__boolean(struct soap*, const char*, xsd__boolean *, const char*);

#ifndef soap_write_xsd__boolean
#define soap_write_xsd__boolean(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:boolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_get_xsd__boolean(struct soap*, xsd__boolean *, const char*, const char*);

#ifndef soap_read_xsd__boolean
#define soap_read_xsd__boolean(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__boolean(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__boolean * SOAP_FMAC2 soap_instantiate_xsd__boolean(struct soap*, int, const char*, const char*, size_t*);

inline xsd__boolean * soap_new_xsd__boolean(struct soap *soap, int n = -1) { return soap_instantiate_xsd__boolean(soap, n, NULL, NULL, NULL); }

inline xsd__boolean * soap_new_req_xsd__boolean(struct soap *soap, bool __item) { xsd__boolean *_p = soap_instantiate_xsd__boolean(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__boolean::__item = __item; } return _p; }

inline xsd__boolean * soap_new_set_xsd__boolean(struct soap *soap, bool __item, char *__item1) { xsd__boolean *_p = soap_instantiate_xsd__boolean(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__boolean::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__boolean(struct soap *soap, xsd__boolean *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__boolean(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (26)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap*, const char*, int, const xsd__base64Binary *, const char*);
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *, const char*);

#ifndef soap_write_xsd__base64Binary
#define soap_write_xsd__base64Binary(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:base64Binary", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap*, xsd__base64Binary *, const char*, const char*);

#ifndef soap_read_xsd__base64Binary
#define soap_read_xsd__base64Binary(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__base64Binary(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary * soap_new_xsd__base64Binary(struct soap *soap, int n = -1) { return soap_instantiate_xsd__base64Binary(soap, n, NULL, NULL, NULL); }

inline xsd__base64Binary * soap_new_req_xsd__base64Binary(struct soap *soap, struct _xop__Include& __item) { xsd__base64Binary *_p = soap_instantiate_xsd__base64Binary(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__base64Binary::__item = __item; } return _p; }

inline xsd__base64Binary * soap_new_set_xsd__base64Binary(struct soap *soap, struct _xop__Include& __item, char *__item1) { xsd__base64Binary *_p = soap_instantiate_xsd__base64Binary(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__base64Binary::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__base64Binary(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__anyURI_
#define SOAP_TYPE_xsd__anyURI_ (25)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI_(struct soap*, const char*, int, const xsd__anyURI_ *, const char*);
SOAP_FMAC3 xsd__anyURI_ * SOAP_FMAC4 soap_in_xsd__anyURI_(struct soap*, const char*, xsd__anyURI_ *, const char*);

#ifndef soap_write_xsd__anyURI_
#define soap_write_xsd__anyURI_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:anyURI", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__anyURI_ * SOAP_FMAC4 soap_get_xsd__anyURI_(struct soap*, xsd__anyURI_ *, const char*, const char*);

#ifndef soap_read_xsd__anyURI_
#define soap_read_xsd__anyURI_(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__anyURI_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__anyURI_ * SOAP_FMAC2 soap_instantiate_xsd__anyURI_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__anyURI_ * soap_new_xsd__anyURI_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__anyURI_(soap, n, NULL, NULL, NULL); }

inline xsd__anyURI_ * soap_new_req_xsd__anyURI_(struct soap *soap, std::wstring& __item) { xsd__anyURI_ *_p = soap_instantiate_xsd__anyURI_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__anyURI_::__item = __item; } return _p; }

inline xsd__anyURI_ * soap_new_set_xsd__anyURI_(struct soap *soap, std::wstring& __item, char *__item1) { xsd__anyURI_ *_p = soap_instantiate_xsd__anyURI_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__anyURI_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__anyURI_(struct soap *soap, xsd__anyURI_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__anyURI_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__anyURI
#define SOAP_TYPE_xsd__anyURI (24)
#endif

#define soap_default_xsd__anyURI(soap, a) soap_default_std__wstring(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap*, const std::wstring *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap*, const char*, int, const std::wstring*, const char*);
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap*, const char*, std::wstring*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap*, const std::wstring *, const char*, const char*);

#ifndef soap_write_xsd__anyURI
#define soap_write_xsd__anyURI(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__anyURI(soap, data),0) || soap_put_xsd__anyURI(soap, data, "xsd:anyURI", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_xsd__anyURI(struct soap*, std::wstring *, const char*, const char*);

#ifndef soap_read_xsd__anyURI
#define soap_read_xsd__anyURI(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__anyURI(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_xsd__anyURI soap_instantiate_std__wstring


#define soap_copy_xsd__anyURI soap_copy_std__wstring

#ifndef SOAP_TYPE_xsd__QName_
#define SOAP_TYPE_xsd__QName_ (23)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName_(struct soap*, const char*, int, const xsd__QName_ *, const char*);
SOAP_FMAC3 xsd__QName_ * SOAP_FMAC4 soap_in_xsd__QName_(struct soap*, const char*, xsd__QName_ *, const char*);

#ifndef soap_write_xsd__QName_
#define soap_write_xsd__QName_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:QName", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__QName_ * SOAP_FMAC4 soap_get_xsd__QName_(struct soap*, xsd__QName_ *, const char*, const char*);

#ifndef soap_read_xsd__QName_
#define soap_read_xsd__QName_(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__QName_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__QName_ * SOAP_FMAC2 soap_instantiate_xsd__QName_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__QName_ * soap_new_xsd__QName_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__QName_(soap, n, NULL, NULL, NULL); }

inline xsd__QName_ * soap_new_req_xsd__QName_(struct soap *soap, std::string& __item) { xsd__QName_ *_p = soap_instantiate_xsd__QName_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__QName_::__item = __item; } return _p; }

inline xsd__QName_ * soap_new_set_xsd__QName_(struct soap *soap, std::string& __item, char *__item1) { xsd__QName_ *_p = soap_instantiate_xsd__QName_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__QName_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__QName_(struct soap *soap, xsd__QName_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__QName_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__IDREF_
#define SOAP_TYPE_xsd__IDREF_ (22)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__IDREF_(struct soap*, const char*, int, const xsd__IDREF_ *, const char*);
SOAP_FMAC3 xsd__IDREF_ * SOAP_FMAC4 soap_in_xsd__IDREF_(struct soap*, const char*, xsd__IDREF_ *, const char*);

#ifndef soap_write_xsd__IDREF_
#define soap_write_xsd__IDREF_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:IDREF", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__IDREF_ * SOAP_FMAC4 soap_get_xsd__IDREF_(struct soap*, xsd__IDREF_ *, const char*, const char*);

#ifndef soap_read_xsd__IDREF_
#define soap_read_xsd__IDREF_(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__IDREF_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__IDREF_ * SOAP_FMAC2 soap_instantiate_xsd__IDREF_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__IDREF_ * soap_new_xsd__IDREF_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__IDREF_(soap, n, NULL, NULL, NULL); }

inline xsd__IDREF_ * soap_new_req_xsd__IDREF_(struct soap *soap, std::wstring& __item) { xsd__IDREF_ *_p = soap_instantiate_xsd__IDREF_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__IDREF_::__item = __item; } return _p; }

inline xsd__IDREF_ * soap_new_set_xsd__IDREF_(struct soap *soap, std::wstring& __item, char *__item1) { xsd__IDREF_ *_p = soap_instantiate_xsd__IDREF_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__IDREF_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__IDREF_(struct soap *soap, xsd__IDREF_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__IDREF_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__IDREF
#define SOAP_TYPE_xsd__IDREF (21)
#endif

#define soap_default_xsd__IDREF(soap, a) soap_default_std__wstring(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__IDREF(struct soap*, const std::wstring *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__IDREF(struct soap*, const char*, int, const std::wstring*, const char*);
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_xsd__IDREF(struct soap*, const char*, std::wstring*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__IDREF(struct soap*, const std::wstring *, const char*, const char*);

#ifndef soap_write_xsd__IDREF
#define soap_write_xsd__IDREF(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__IDREF(soap, data),0) || soap_put_xsd__IDREF(soap, data, "xsd:IDREF", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_xsd__IDREF(struct soap*, std::wstring *, const char*, const char*);

#ifndef soap_read_xsd__IDREF
#define soap_read_xsd__IDREF(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__IDREF(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_xsd__IDREF soap_instantiate_std__wstring


#define soap_copy_xsd__IDREF soap_copy_std__wstring

#ifndef SOAP_TYPE_xsd__ID_
#define SOAP_TYPE_xsd__ID_ (20)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__ID_(struct soap*, const char*, int, const xsd__ID_ *, const char*);
SOAP_FMAC3 xsd__ID_ * SOAP_FMAC4 soap_in_xsd__ID_(struct soap*, const char*, xsd__ID_ *, const char*);

#ifndef soap_write_xsd__ID_
#define soap_write_xsd__ID_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:ID", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__ID_ * SOAP_FMAC4 soap_get_xsd__ID_(struct soap*, xsd__ID_ *, const char*, const char*);

#ifndef soap_read_xsd__ID_
#define soap_read_xsd__ID_(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__ID_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__ID_ * SOAP_FMAC2 soap_instantiate_xsd__ID_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__ID_ * soap_new_xsd__ID_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__ID_(soap, n, NULL, NULL, NULL); }

inline xsd__ID_ * soap_new_req_xsd__ID_(struct soap *soap, std::wstring& __item) { xsd__ID_ *_p = soap_instantiate_xsd__ID_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__ID_::__item = __item; } return _p; }

inline xsd__ID_ * soap_new_set_xsd__ID_(struct soap *soap, std::wstring& __item, char *__item1) { xsd__ID_ *_p = soap_instantiate_xsd__ID_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__ID_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__ID_(struct soap *soap, xsd__ID_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__ID_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__ID
#define SOAP_TYPE_xsd__ID (19)
#endif

#define soap_default_xsd__ID(soap, a) soap_default_std__wstring(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__ID(struct soap*, const std::wstring *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__ID(struct soap*, const char*, int, const std::wstring*, const char*);
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_xsd__ID(struct soap*, const char*, std::wstring*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__ID(struct soap*, const std::wstring *, const char*, const char*);

#ifndef soap_write_xsd__ID
#define soap_write_xsd__ID(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__ID(soap, data),0) || soap_put_xsd__ID(soap, data, "xsd:ID", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_xsd__ID(struct soap*, std::wstring *, const char*, const char*);

#ifndef soap_read_xsd__ID
#define soap_read_xsd__ID(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__ID(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_xsd__ID soap_instantiate_std__wstring


#define soap_copy_xsd__ID soap_copy_std__wstring

#ifndef SOAP_TYPE_std__wstring
#define SOAP_TYPE_std__wstring (18)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__wstring(struct soap*, std::wstring *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__wstring(struct soap*, const std::wstring *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__wstring(struct soap*, const char*, int, const std::wstring*, const char*);
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_std__wstring(struct soap*, const char*, std::wstring*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__wstring(struct soap*, const std::wstring *, const char*, const char*);

#ifndef soap_write_std__wstring
#define soap_write_std__wstring(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_std__wstring(soap, data),0) || soap_put_std__wstring(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_std__wstring(struct soap*, std::wstring *, const char*, const char*);

#ifndef soap_read_std__wstring
#define soap_read_std__wstring(soap, data) ( soap_begin_recv(soap) || !soap_get_std__wstring(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 std::wstring * SOAP_FMAC2 soap_instantiate_std__wstring(struct soap*, int, const char*, const char*, size_t*);

inline std::wstring * soap_new_std__wstring(struct soap *soap, int n = -1) { return soap_instantiate_std__wstring(soap, n, NULL, NULL, NULL); }

inline std::wstring * soap_new_req_std__wstring(struct soap *soap) { std::wstring *_p = soap_instantiate_std__wstring(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__wstring(soap, _p); } return _p; }

inline std::wstring * soap_new_set_std__wstring(struct soap *soap) { std::wstring *_p = soap_instantiate_std__wstring(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__wstring(soap, _p); } return _p; }

inline void soap_delete_std__wstring(struct soap *soap, std::wstring *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__wstring(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__QName
#define SOAP_TYPE_xsd__QName (11)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__QName(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__QName(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__QName(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__QName(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__QName
#define soap_write_xsd__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__QName(soap, data),0) || soap_put_xsd__QName(soap, data, "xsd:QName", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__QName(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__QName
#define soap_read_xsd__QName(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_xsd__QName(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_xsd__QName(struct soap *soap, int n = -1) { return soap_instantiate_xsd__QName(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_xsd__QName(struct soap *soap) { std::string *_p = soap_instantiate_xsd__QName(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_xsd__QName(soap, _p); } return _p; }

inline std::string * soap_new_set_xsd__QName(struct soap *soap) { std::string *_p = soap_instantiate_xsd__QName(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_xsd__QName(soap, _p); } return _p; }

inline void soap_delete_xsd__QName(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__QName(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (10)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_std__string(soap, data),0) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( soap_begin_recv(soap) || !soap_get_std__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline std::string * soap_new_set_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline void soap_delete_std__string(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__anyType
#define SOAP_TYPE_xsd__anyType (8)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyType(struct soap*, const char*, int, const xsd__anyType *, const char*);
SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_in_xsd__anyType(struct soap*, const char*, xsd__anyType *, const char*);

#ifndef soap_write_xsd__anyType
#define soap_write_xsd__anyType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:anyType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_get_xsd__anyType(struct soap*, xsd__anyType *, const char*, const char*);

#ifndef soap_read_xsd__anyType
#define soap_read_xsd__anyType(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__anyType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__anyType * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap*, int, const char*, const char*, size_t*);

inline xsd__anyType * soap_new_xsd__anyType(struct soap *soap, int n = -1) { return soap_instantiate_xsd__anyType(soap, n, NULL, NULL, NULL); }

inline xsd__anyType * soap_new_req_xsd__anyType(struct soap *soap) { xsd__anyType *_p = soap_instantiate_xsd__anyType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xsd__anyType * soap_new_set_xsd__anyType(struct soap *soap, char *__item) { xsd__anyType *_p = soap_instantiate_xsd__anyType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__anyType::__item = __item; } return _p; }

inline void soap_delete_xsd__anyType(struct soap *soap, xsd__anyType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__anyType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (138)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data),0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (137)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data),0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (134)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data),0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (132)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data),0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (131)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data),0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE___ns1__UploadSymbol
#define SOAP_TYPE___ns1__UploadSymbol (130)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__UploadSymbol(struct soap*, struct __ns1__UploadSymbol *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__UploadSymbol(struct soap*, const struct __ns1__UploadSymbol *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__UploadSymbol(struct soap*, const char*, int, const struct __ns1__UploadSymbol *, const char*);
SOAP_FMAC3 struct __ns1__UploadSymbol * SOAP_FMAC4 soap_in___ns1__UploadSymbol(struct soap*, const char*, struct __ns1__UploadSymbol *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__UploadSymbol(struct soap*, const struct __ns1__UploadSymbol *, const char*, const char*);

#ifndef soap_write___ns1__UploadSymbol
#define soap_write___ns1__UploadSymbol(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__UploadSymbol(soap, data),0) || soap_put___ns1__UploadSymbol(soap, data, "-ns1:UploadSymbol", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__UploadSymbol * SOAP_FMAC4 soap_get___ns1__UploadSymbol(struct soap*, struct __ns1__UploadSymbol *, const char*, const char*);

#ifndef soap_read___ns1__UploadSymbol
#define soap_read___ns1__UploadSymbol(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__UploadSymbol(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__UploadSymbol * SOAP_FMAC2 soap_instantiate___ns1__UploadSymbol(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__UploadSymbol * soap_new___ns1__UploadSymbol(struct soap *soap, int n = -1) { return soap_instantiate___ns1__UploadSymbol(soap, n, NULL, NULL, NULL); }

inline struct __ns1__UploadSymbol * soap_new_req___ns1__UploadSymbol(struct soap *soap) { struct __ns1__UploadSymbol *_p = soap_instantiate___ns1__UploadSymbol(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__UploadSymbol(soap, _p); } return _p; }

inline struct __ns1__UploadSymbol * soap_new_set___ns1__UploadSymbol(struct soap *soap, _ns1__UploadSymbol *ns1__UploadSymbol) { struct __ns1__UploadSymbol *_p = soap_instantiate___ns1__UploadSymbol(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__UploadSymbol(soap, _p); _p->ns1__UploadSymbol = ns1__UploadSymbol; } return _p; }

inline void soap_delete___ns1__UploadSymbol(struct soap *soap, struct __ns1__UploadSymbol *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__UploadSymbol(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__RejectedToSendAdditionalInfo
#define SOAP_TYPE___ns1__RejectedToSendAdditionalInfo (126)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__RejectedToSendAdditionalInfo(struct soap*, struct __ns1__RejectedToSendAdditionalInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__RejectedToSendAdditionalInfo(struct soap*, const struct __ns1__RejectedToSendAdditionalInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__RejectedToSendAdditionalInfo(struct soap*, const char*, int, const struct __ns1__RejectedToSendAdditionalInfo *, const char*);
SOAP_FMAC3 struct __ns1__RejectedToSendAdditionalInfo * SOAP_FMAC4 soap_in___ns1__RejectedToSendAdditionalInfo(struct soap*, const char*, struct __ns1__RejectedToSendAdditionalInfo *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__RejectedToSendAdditionalInfo(struct soap*, const struct __ns1__RejectedToSendAdditionalInfo *, const char*, const char*);

#ifndef soap_write___ns1__RejectedToSendAdditionalInfo
#define soap_write___ns1__RejectedToSendAdditionalInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__RejectedToSendAdditionalInfo(soap, data),0) || soap_put___ns1__RejectedToSendAdditionalInfo(soap, data, "-ns1:RejectedToSendAdditionalInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__RejectedToSendAdditionalInfo * SOAP_FMAC4 soap_get___ns1__RejectedToSendAdditionalInfo(struct soap*, struct __ns1__RejectedToSendAdditionalInfo *, const char*, const char*);

#ifndef soap_read___ns1__RejectedToSendAdditionalInfo
#define soap_read___ns1__RejectedToSendAdditionalInfo(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__RejectedToSendAdditionalInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__RejectedToSendAdditionalInfo * SOAP_FMAC2 soap_instantiate___ns1__RejectedToSendAdditionalInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__RejectedToSendAdditionalInfo * soap_new___ns1__RejectedToSendAdditionalInfo(struct soap *soap, int n = -1) { return soap_instantiate___ns1__RejectedToSendAdditionalInfo(soap, n, NULL, NULL, NULL); }

inline struct __ns1__RejectedToSendAdditionalInfo * soap_new_req___ns1__RejectedToSendAdditionalInfo(struct soap *soap) { struct __ns1__RejectedToSendAdditionalInfo *_p = soap_instantiate___ns1__RejectedToSendAdditionalInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__RejectedToSendAdditionalInfo(soap, _p); } return _p; }

inline struct __ns1__RejectedToSendAdditionalInfo * soap_new_set___ns1__RejectedToSendAdditionalInfo(struct soap *soap, _ns1__RejectedToSendAdditionalInfo *ns1__RejectedToSendAdditionalInfo) { struct __ns1__RejectedToSendAdditionalInfo *_p = soap_instantiate___ns1__RejectedToSendAdditionalInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__RejectedToSendAdditionalInfo(soap, _p); _p->ns1__RejectedToSendAdditionalInfo = ns1__RejectedToSendAdditionalInfo; } return _p; }

inline void soap_delete___ns1__RejectedToSendAdditionalInfo(struct soap *soap, struct __ns1__RejectedToSendAdditionalInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__RejectedToSendAdditionalInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__UploadAdditionalInfo
#define SOAP_TYPE___ns1__UploadAdditionalInfo (122)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__UploadAdditionalInfo(struct soap*, struct __ns1__UploadAdditionalInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__UploadAdditionalInfo(struct soap*, const struct __ns1__UploadAdditionalInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__UploadAdditionalInfo(struct soap*, const char*, int, const struct __ns1__UploadAdditionalInfo *, const char*);
SOAP_FMAC3 struct __ns1__UploadAdditionalInfo * SOAP_FMAC4 soap_in___ns1__UploadAdditionalInfo(struct soap*, const char*, struct __ns1__UploadAdditionalInfo *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__UploadAdditionalInfo(struct soap*, const struct __ns1__UploadAdditionalInfo *, const char*, const char*);

#ifndef soap_write___ns1__UploadAdditionalInfo
#define soap_write___ns1__UploadAdditionalInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__UploadAdditionalInfo(soap, data),0) || soap_put___ns1__UploadAdditionalInfo(soap, data, "-ns1:UploadAdditionalInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__UploadAdditionalInfo * SOAP_FMAC4 soap_get___ns1__UploadAdditionalInfo(struct soap*, struct __ns1__UploadAdditionalInfo *, const char*, const char*);

#ifndef soap_read___ns1__UploadAdditionalInfo
#define soap_read___ns1__UploadAdditionalInfo(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__UploadAdditionalInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__UploadAdditionalInfo * SOAP_FMAC2 soap_instantiate___ns1__UploadAdditionalInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__UploadAdditionalInfo * soap_new___ns1__UploadAdditionalInfo(struct soap *soap, int n = -1) { return soap_instantiate___ns1__UploadAdditionalInfo(soap, n, NULL, NULL, NULL); }

inline struct __ns1__UploadAdditionalInfo * soap_new_req___ns1__UploadAdditionalInfo(struct soap *soap) { struct __ns1__UploadAdditionalInfo *_p = soap_instantiate___ns1__UploadAdditionalInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__UploadAdditionalInfo(soap, _p); } return _p; }

inline struct __ns1__UploadAdditionalInfo * soap_new_set___ns1__UploadAdditionalInfo(struct soap *soap, _ns1__UploadAdditionalInfo *ns1__UploadAdditionalInfo) { struct __ns1__UploadAdditionalInfo *_p = soap_instantiate___ns1__UploadAdditionalInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__UploadAdditionalInfo(soap, _p); _p->ns1__UploadAdditionalInfo = ns1__UploadAdditionalInfo; } return _p; }

inline void soap_delete___ns1__UploadAdditionalInfo(struct soap *soap, struct __ns1__UploadAdditionalInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__UploadAdditionalInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__UploadFullDump
#define SOAP_TYPE___ns1__UploadFullDump (118)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__UploadFullDump(struct soap*, struct __ns1__UploadFullDump *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__UploadFullDump(struct soap*, const struct __ns1__UploadFullDump *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__UploadFullDump(struct soap*, const char*, int, const struct __ns1__UploadFullDump *, const char*);
SOAP_FMAC3 struct __ns1__UploadFullDump * SOAP_FMAC4 soap_in___ns1__UploadFullDump(struct soap*, const char*, struct __ns1__UploadFullDump *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__UploadFullDump(struct soap*, const struct __ns1__UploadFullDump *, const char*, const char*);

#ifndef soap_write___ns1__UploadFullDump
#define soap_write___ns1__UploadFullDump(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__UploadFullDump(soap, data),0) || soap_put___ns1__UploadFullDump(soap, data, "-ns1:UploadFullDump", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__UploadFullDump * SOAP_FMAC4 soap_get___ns1__UploadFullDump(struct soap*, struct __ns1__UploadFullDump *, const char*, const char*);

#ifndef soap_read___ns1__UploadFullDump
#define soap_read___ns1__UploadFullDump(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__UploadFullDump(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__UploadFullDump * SOAP_FMAC2 soap_instantiate___ns1__UploadFullDump(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__UploadFullDump * soap_new___ns1__UploadFullDump(struct soap *soap, int n = -1) { return soap_instantiate___ns1__UploadFullDump(soap, n, NULL, NULL, NULL); }

inline struct __ns1__UploadFullDump * soap_new_req___ns1__UploadFullDump(struct soap *soap) { struct __ns1__UploadFullDump *_p = soap_instantiate___ns1__UploadFullDump(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__UploadFullDump(soap, _p); } return _p; }

inline struct __ns1__UploadFullDump * soap_new_set___ns1__UploadFullDump(struct soap *soap, _ns1__UploadFullDump *ns1__UploadFullDump) { struct __ns1__UploadFullDump *_p = soap_instantiate___ns1__UploadFullDump(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__UploadFullDump(soap, _p); _p->ns1__UploadFullDump = ns1__UploadFullDump; } return _p; }

inline void soap_delete___ns1__UploadFullDump(struct soap *soap, struct __ns1__UploadFullDump *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__UploadFullDump(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__UploadMiniDump
#define SOAP_TYPE___ns1__UploadMiniDump (114)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__UploadMiniDump(struct soap*, struct __ns1__UploadMiniDump *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__UploadMiniDump(struct soap*, const struct __ns1__UploadMiniDump *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__UploadMiniDump(struct soap*, const char*, int, const struct __ns1__UploadMiniDump *, const char*);
SOAP_FMAC3 struct __ns1__UploadMiniDump * SOAP_FMAC4 soap_in___ns1__UploadMiniDump(struct soap*, const char*, struct __ns1__UploadMiniDump *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__UploadMiniDump(struct soap*, const struct __ns1__UploadMiniDump *, const char*, const char*);

#ifndef soap_write___ns1__UploadMiniDump
#define soap_write___ns1__UploadMiniDump(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__UploadMiniDump(soap, data),0) || soap_put___ns1__UploadMiniDump(soap, data, "-ns1:UploadMiniDump", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__UploadMiniDump * SOAP_FMAC4 soap_get___ns1__UploadMiniDump(struct soap*, struct __ns1__UploadMiniDump *, const char*, const char*);

#ifndef soap_read___ns1__UploadMiniDump
#define soap_read___ns1__UploadMiniDump(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__UploadMiniDump(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__UploadMiniDump * SOAP_FMAC2 soap_instantiate___ns1__UploadMiniDump(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__UploadMiniDump * soap_new___ns1__UploadMiniDump(struct soap *soap, int n = -1) { return soap_instantiate___ns1__UploadMiniDump(soap, n, NULL, NULL, NULL); }

inline struct __ns1__UploadMiniDump * soap_new_req___ns1__UploadMiniDump(struct soap *soap) { struct __ns1__UploadMiniDump *_p = soap_instantiate___ns1__UploadMiniDump(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__UploadMiniDump(soap, _p); } return _p; }

inline struct __ns1__UploadMiniDump * soap_new_set___ns1__UploadMiniDump(struct soap *soap, _ns1__UploadMiniDump *ns1__UploadMiniDump) { struct __ns1__UploadMiniDump *_p = soap_instantiate___ns1__UploadMiniDump(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__UploadMiniDump(soap, _p); _p->ns1__UploadMiniDump = ns1__UploadMiniDump; } return _p; }

inline void soap_delete___ns1__UploadMiniDump(struct soap *soap, struct __ns1__UploadMiniDump *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__UploadMiniDump(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__Hello
#define SOAP_TYPE___ns1__Hello (110)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Hello(struct soap*, struct __ns1__Hello *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Hello(struct soap*, const struct __ns1__Hello *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Hello(struct soap*, const char*, int, const struct __ns1__Hello *, const char*);
SOAP_FMAC3 struct __ns1__Hello * SOAP_FMAC4 soap_in___ns1__Hello(struct soap*, const char*, struct __ns1__Hello *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Hello(struct soap*, const struct __ns1__Hello *, const char*, const char*);

#ifndef soap_write___ns1__Hello
#define soap_write___ns1__Hello(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__Hello(soap, data),0) || soap_put___ns1__Hello(soap, data, "-ns1:Hello", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__Hello * SOAP_FMAC4 soap_get___ns1__Hello(struct soap*, struct __ns1__Hello *, const char*, const char*);

#ifndef soap_read___ns1__Hello
#define soap_read___ns1__Hello(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__Hello(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__Hello * SOAP_FMAC2 soap_instantiate___ns1__Hello(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Hello * soap_new___ns1__Hello(struct soap *soap, int n = -1) { return soap_instantiate___ns1__Hello(soap, n, NULL, NULL, NULL); }

inline struct __ns1__Hello * soap_new_req___ns1__Hello(struct soap *soap) { struct __ns1__Hello *_p = soap_instantiate___ns1__Hello(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__Hello(soap, _p); } return _p; }

inline struct __ns1__Hello * soap_new_set___ns1__Hello(struct soap *soap, _ns1__Hello *ns1__Hello) { struct __ns1__Hello *_p = soap_instantiate___ns1__Hello(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__Hello(soap, _p); _p->ns1__Hello = ns1__Hello; } return _p; }

inline void soap_delete___ns1__Hello(struct soap *soap, struct __ns1__Hello *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Hello(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__xop__Include
#define SOAP_TYPE__xop__Include (12)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__xop__Include(struct soap*, struct _xop__Include *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__xop__Include(struct soap*, struct _xop__Include const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__xop__Include(struct soap*, const char*, int, const struct _xop__Include *, const char*);
SOAP_FMAC3 struct _xop__Include * SOAP_FMAC4 soap_in__xop__Include(struct soap*, const char*, struct _xop__Include *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put__xop__Include(struct soap*, const struct _xop__Include *, const char*, const char*);

#ifndef soap_write__xop__Include
#define soap_write__xop__Include(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__xop__Include(soap, data),0) || soap_put__xop__Include(soap, data, "xop:Include", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _xop__Include * SOAP_FMAC4 soap_get__xop__Include(struct soap*, struct _xop__Include *, const char*, const char*);

#ifndef soap_read__xop__Include
#define soap_read__xop__Include(soap, data) ( soap_begin_recv(soap) || !soap_get__xop__Include(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct _xop__Include * SOAP_FMAC2 soap_instantiate__xop__Include(struct soap*, int, const char*, const char*, size_t*);

inline struct _xop__Include * soap_new__xop__Include(struct soap *soap, int n = -1) { return soap_instantiate__xop__Include(soap, n, NULL, NULL, NULL); }

inline struct _xop__Include * soap_new_req__xop__Include(struct soap *soap) { struct _xop__Include *_p = soap_instantiate__xop__Include(soap, -1, NULL, NULL, NULL); if (_p) { soap_default__xop__Include(soap, _p); } return _p; }

inline struct _xop__Include * soap_new_set__xop__Include(struct soap *soap, unsigned char *__ptr, int __size, char *id, char *type, char *options) { struct _xop__Include *_p = soap_instantiate__xop__Include(soap, -1, NULL, NULL, NULL); if (_p) { soap_default__xop__Include(soap, _p); _p->__ptr = __ptr; _p->__size = __size; _p->id = id; _p->type = type; _p->options = options; } return _p; }

inline void soap_delete__xop__Include(struct soap *soap, struct _xop__Include *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__xop__Include(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (140)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Reason(soap, data),0) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (139)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Detail(soap, data),0) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (133)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Code(soap, data),0) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_PointerTo_ns1__UploadSymbolResponse
#define SOAP_TYPE_PointerTo_ns1__UploadSymbolResponse (128)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__UploadSymbolResponse(struct soap*, _ns1__UploadSymbolResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__UploadSymbolResponse(struct soap*, const char *, int, _ns1__UploadSymbolResponse *const*, const char *);
SOAP_FMAC3 _ns1__UploadSymbolResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__UploadSymbolResponse(struct soap*, const char*, _ns1__UploadSymbolResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__UploadSymbolResponse(struct soap*, _ns1__UploadSymbolResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__UploadSymbolResponse
#define soap_write_PointerTo_ns1__UploadSymbolResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__UploadSymbolResponse(soap, data),0) || soap_put_PointerTo_ns1__UploadSymbolResponse(soap, data, "ns1:UploadSymbolResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__UploadSymbolResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__UploadSymbolResponse(struct soap*, _ns1__UploadSymbolResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__UploadSymbolResponse
#define soap_read_PointerTo_ns1__UploadSymbolResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__UploadSymbolResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__UploadSymbol
#define SOAP_TYPE_PointerTo_ns1__UploadSymbol (127)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__UploadSymbol(struct soap*, _ns1__UploadSymbol *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__UploadSymbol(struct soap*, const char *, int, _ns1__UploadSymbol *const*, const char *);
SOAP_FMAC3 _ns1__UploadSymbol ** SOAP_FMAC4 soap_in_PointerTo_ns1__UploadSymbol(struct soap*, const char*, _ns1__UploadSymbol **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__UploadSymbol(struct soap*, _ns1__UploadSymbol *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__UploadSymbol
#define soap_write_PointerTo_ns1__UploadSymbol(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__UploadSymbol(soap, data),0) || soap_put_PointerTo_ns1__UploadSymbol(soap, data, "ns1:UploadSymbol", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__UploadSymbol ** SOAP_FMAC4 soap_get_PointerTo_ns1__UploadSymbol(struct soap*, _ns1__UploadSymbol **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__UploadSymbol
#define soap_read_PointerTo_ns1__UploadSymbol(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__UploadSymbol(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__RejectedToSendAdditionalInfoResponse
#define SOAP_TYPE_PointerTo_ns1__RejectedToSendAdditionalInfoResponse (124)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__RejectedToSendAdditionalInfoResponse(struct soap*, _ns1__RejectedToSendAdditionalInfoResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__RejectedToSendAdditionalInfoResponse(struct soap*, const char *, int, _ns1__RejectedToSendAdditionalInfoResponse *const*, const char *);
SOAP_FMAC3 _ns1__RejectedToSendAdditionalInfoResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__RejectedToSendAdditionalInfoResponse(struct soap*, const char*, _ns1__RejectedToSendAdditionalInfoResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__RejectedToSendAdditionalInfoResponse(struct soap*, _ns1__RejectedToSendAdditionalInfoResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__RejectedToSendAdditionalInfoResponse
#define soap_write_PointerTo_ns1__RejectedToSendAdditionalInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__RejectedToSendAdditionalInfoResponse(soap, data),0) || soap_put_PointerTo_ns1__RejectedToSendAdditionalInfoResponse(soap, data, "ns1:RejectedToSendAdditionalInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__RejectedToSendAdditionalInfoResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__RejectedToSendAdditionalInfoResponse(struct soap*, _ns1__RejectedToSendAdditionalInfoResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__RejectedToSendAdditionalInfoResponse
#define soap_read_PointerTo_ns1__RejectedToSendAdditionalInfoResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__RejectedToSendAdditionalInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__RejectedToSendAdditionalInfo
#define SOAP_TYPE_PointerTo_ns1__RejectedToSendAdditionalInfo (123)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__RejectedToSendAdditionalInfo(struct soap*, _ns1__RejectedToSendAdditionalInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__RejectedToSendAdditionalInfo(struct soap*, const char *, int, _ns1__RejectedToSendAdditionalInfo *const*, const char *);
SOAP_FMAC3 _ns1__RejectedToSendAdditionalInfo ** SOAP_FMAC4 soap_in_PointerTo_ns1__RejectedToSendAdditionalInfo(struct soap*, const char*, _ns1__RejectedToSendAdditionalInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__RejectedToSendAdditionalInfo(struct soap*, _ns1__RejectedToSendAdditionalInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__RejectedToSendAdditionalInfo
#define soap_write_PointerTo_ns1__RejectedToSendAdditionalInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__RejectedToSendAdditionalInfo(soap, data),0) || soap_put_PointerTo_ns1__RejectedToSendAdditionalInfo(soap, data, "ns1:RejectedToSendAdditionalInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__RejectedToSendAdditionalInfo ** SOAP_FMAC4 soap_get_PointerTo_ns1__RejectedToSendAdditionalInfo(struct soap*, _ns1__RejectedToSendAdditionalInfo **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__RejectedToSendAdditionalInfo
#define soap_read_PointerTo_ns1__RejectedToSendAdditionalInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__RejectedToSendAdditionalInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__UploadAdditionalInfoResponse
#define SOAP_TYPE_PointerTo_ns1__UploadAdditionalInfoResponse (120)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__UploadAdditionalInfoResponse(struct soap*, _ns1__UploadAdditionalInfoResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__UploadAdditionalInfoResponse(struct soap*, const char *, int, _ns1__UploadAdditionalInfoResponse *const*, const char *);
SOAP_FMAC3 _ns1__UploadAdditionalInfoResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__UploadAdditionalInfoResponse(struct soap*, const char*, _ns1__UploadAdditionalInfoResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__UploadAdditionalInfoResponse(struct soap*, _ns1__UploadAdditionalInfoResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__UploadAdditionalInfoResponse
#define soap_write_PointerTo_ns1__UploadAdditionalInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__UploadAdditionalInfoResponse(soap, data),0) || soap_put_PointerTo_ns1__UploadAdditionalInfoResponse(soap, data, "ns1:UploadAdditionalInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__UploadAdditionalInfoResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__UploadAdditionalInfoResponse(struct soap*, _ns1__UploadAdditionalInfoResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__UploadAdditionalInfoResponse
#define soap_read_PointerTo_ns1__UploadAdditionalInfoResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__UploadAdditionalInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__UploadAdditionalInfo
#define SOAP_TYPE_PointerTo_ns1__UploadAdditionalInfo (119)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__UploadAdditionalInfo(struct soap*, _ns1__UploadAdditionalInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__UploadAdditionalInfo(struct soap*, const char *, int, _ns1__UploadAdditionalInfo *const*, const char *);
SOAP_FMAC3 _ns1__UploadAdditionalInfo ** SOAP_FMAC4 soap_in_PointerTo_ns1__UploadAdditionalInfo(struct soap*, const char*, _ns1__UploadAdditionalInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__UploadAdditionalInfo(struct soap*, _ns1__UploadAdditionalInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__UploadAdditionalInfo
#define soap_write_PointerTo_ns1__UploadAdditionalInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__UploadAdditionalInfo(soap, data),0) || soap_put_PointerTo_ns1__UploadAdditionalInfo(soap, data, "ns1:UploadAdditionalInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__UploadAdditionalInfo ** SOAP_FMAC4 soap_get_PointerTo_ns1__UploadAdditionalInfo(struct soap*, _ns1__UploadAdditionalInfo **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__UploadAdditionalInfo
#define soap_read_PointerTo_ns1__UploadAdditionalInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__UploadAdditionalInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__UploadFullDumpResponse
#define SOAP_TYPE_PointerTo_ns1__UploadFullDumpResponse (116)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__UploadFullDumpResponse(struct soap*, _ns1__UploadFullDumpResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__UploadFullDumpResponse(struct soap*, const char *, int, _ns1__UploadFullDumpResponse *const*, const char *);
SOAP_FMAC3 _ns1__UploadFullDumpResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__UploadFullDumpResponse(struct soap*, const char*, _ns1__UploadFullDumpResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__UploadFullDumpResponse(struct soap*, _ns1__UploadFullDumpResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__UploadFullDumpResponse
#define soap_write_PointerTo_ns1__UploadFullDumpResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__UploadFullDumpResponse(soap, data),0) || soap_put_PointerTo_ns1__UploadFullDumpResponse(soap, data, "ns1:UploadFullDumpResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__UploadFullDumpResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__UploadFullDumpResponse(struct soap*, _ns1__UploadFullDumpResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__UploadFullDumpResponse
#define soap_read_PointerTo_ns1__UploadFullDumpResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__UploadFullDumpResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__UploadFullDump
#define SOAP_TYPE_PointerTo_ns1__UploadFullDump (115)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__UploadFullDump(struct soap*, _ns1__UploadFullDump *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__UploadFullDump(struct soap*, const char *, int, _ns1__UploadFullDump *const*, const char *);
SOAP_FMAC3 _ns1__UploadFullDump ** SOAP_FMAC4 soap_in_PointerTo_ns1__UploadFullDump(struct soap*, const char*, _ns1__UploadFullDump **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__UploadFullDump(struct soap*, _ns1__UploadFullDump *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__UploadFullDump
#define soap_write_PointerTo_ns1__UploadFullDump(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__UploadFullDump(soap, data),0) || soap_put_PointerTo_ns1__UploadFullDump(soap, data, "ns1:UploadFullDump", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__UploadFullDump ** SOAP_FMAC4 soap_get_PointerTo_ns1__UploadFullDump(struct soap*, _ns1__UploadFullDump **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__UploadFullDump
#define soap_read_PointerTo_ns1__UploadFullDump(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__UploadFullDump(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__UploadMiniDumpResponse
#define SOAP_TYPE_PointerTo_ns1__UploadMiniDumpResponse (112)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__UploadMiniDumpResponse(struct soap*, _ns1__UploadMiniDumpResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__UploadMiniDumpResponse(struct soap*, const char *, int, _ns1__UploadMiniDumpResponse *const*, const char *);
SOAP_FMAC3 _ns1__UploadMiniDumpResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__UploadMiniDumpResponse(struct soap*, const char*, _ns1__UploadMiniDumpResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__UploadMiniDumpResponse(struct soap*, _ns1__UploadMiniDumpResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__UploadMiniDumpResponse
#define soap_write_PointerTo_ns1__UploadMiniDumpResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__UploadMiniDumpResponse(soap, data),0) || soap_put_PointerTo_ns1__UploadMiniDumpResponse(soap, data, "ns1:UploadMiniDumpResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__UploadMiniDumpResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__UploadMiniDumpResponse(struct soap*, _ns1__UploadMiniDumpResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__UploadMiniDumpResponse
#define soap_read_PointerTo_ns1__UploadMiniDumpResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__UploadMiniDumpResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__UploadMiniDump
#define SOAP_TYPE_PointerTo_ns1__UploadMiniDump (111)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__UploadMiniDump(struct soap*, _ns1__UploadMiniDump *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__UploadMiniDump(struct soap*, const char *, int, _ns1__UploadMiniDump *const*, const char *);
SOAP_FMAC3 _ns1__UploadMiniDump ** SOAP_FMAC4 soap_in_PointerTo_ns1__UploadMiniDump(struct soap*, const char*, _ns1__UploadMiniDump **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__UploadMiniDump(struct soap*, _ns1__UploadMiniDump *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__UploadMiniDump
#define soap_write_PointerTo_ns1__UploadMiniDump(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__UploadMiniDump(soap, data),0) || soap_put_PointerTo_ns1__UploadMiniDump(soap, data, "ns1:UploadMiniDump", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__UploadMiniDump ** SOAP_FMAC4 soap_get_PointerTo_ns1__UploadMiniDump(struct soap*, _ns1__UploadMiniDump **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__UploadMiniDump
#define soap_read_PointerTo_ns1__UploadMiniDump(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__UploadMiniDump(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__HelloResponse
#define SOAP_TYPE_PointerTo_ns1__HelloResponse (108)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__HelloResponse(struct soap*, _ns1__HelloResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__HelloResponse(struct soap*, const char *, int, _ns1__HelloResponse *const*, const char *);
SOAP_FMAC3 _ns1__HelloResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__HelloResponse(struct soap*, const char*, _ns1__HelloResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__HelloResponse(struct soap*, _ns1__HelloResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__HelloResponse
#define soap_write_PointerTo_ns1__HelloResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__HelloResponse(soap, data),0) || soap_put_PointerTo_ns1__HelloResponse(soap, data, "ns1:HelloResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__HelloResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__HelloResponse(struct soap*, _ns1__HelloResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__HelloResponse
#define soap_read_PointerTo_ns1__HelloResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__HelloResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__Hello
#define SOAP_TYPE_PointerTo_ns1__Hello (107)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Hello(struct soap*, _ns1__Hello *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Hello(struct soap*, const char *, int, _ns1__Hello *const*, const char *);
SOAP_FMAC3 _ns1__Hello ** SOAP_FMAC4 soap_in_PointerTo_ns1__Hello(struct soap*, const char*, _ns1__Hello **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Hello(struct soap*, _ns1__Hello *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__Hello
#define soap_write_PointerTo_ns1__Hello(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__Hello(soap, data),0) || soap_put_PointerTo_ns1__Hello(soap, data, "ns1:Hello", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__Hello ** SOAP_FMAC4 soap_get_PointerTo_ns1__Hello(struct soap*, _ns1__Hello **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__Hello
#define soap_read_PointerTo_ns1__Hello(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__Hello(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons5__ArrayOfstring
#define SOAP_TYPE_PointerTons5__ArrayOfstring (106)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__ArrayOfstring(struct soap*, ns5__ArrayOfstring *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__ArrayOfstring(struct soap*, const char *, int, ns5__ArrayOfstring *const*, const char *);
SOAP_FMAC3 ns5__ArrayOfstring ** SOAP_FMAC4 soap_in_PointerTons5__ArrayOfstring(struct soap*, const char*, ns5__ArrayOfstring **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__ArrayOfstring(struct soap*, ns5__ArrayOfstring *const*, const char*, const char*);

#ifndef soap_write_PointerTons5__ArrayOfstring
#define soap_write_PointerTons5__ArrayOfstring(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons5__ArrayOfstring(soap, data),0) || soap_put_PointerTons5__ArrayOfstring(soap, data, "ns5:ArrayOfstring", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__ArrayOfstring ** SOAP_FMAC4 soap_get_PointerTons5__ArrayOfstring(struct soap*, ns5__ArrayOfstring **, const char*, const char*);

#ifndef soap_read_PointerTons5__ArrayOfstring
#define soap_read_PointerTons5__ArrayOfstring(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons5__ArrayOfstring(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTobool
#define SOAP_TYPE_PointerTobool (104)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap*, bool *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap*, const char *, int, bool *const*, const char *);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap*, const char*, bool **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap*, bool *const*, const char*, const char*);

#ifndef soap_write_PointerTobool
#define soap_write_PointerTobool(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTobool(soap, data),0) || soap_put_PointerTobool(soap, data, "boolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap*, bool **, const char*, const char*);

#ifndef soap_read_PointerTobool
#define soap_read_PointerTobool(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTobool(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__Response
#define SOAP_TYPE_PointerTons1__Response (103)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Response(struct soap*, ns1__Response *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Response(struct soap*, const char *, int, ns1__Response *const*, const char *);
SOAP_FMAC3 ns1__Response ** SOAP_FMAC4 soap_in_PointerTons1__Response(struct soap*, const char*, ns1__Response **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Response(struct soap*, ns1__Response *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__Response
#define soap_write_PointerTons1__Response(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__Response(soap, data),0) || soap_put_PointerTons1__Response(soap, data, "ns1:Response", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__Response ** SOAP_FMAC4 soap_get_PointerTons1__Response(struct soap*, ns1__Response **, const char*, const char*);

#ifndef soap_read_PointerTons1__Response
#define soap_read_PointerTons1__Response(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__Response(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__ArrayOfModuleSymbolInfo
#define SOAP_TYPE_PointerTons1__ArrayOfModuleSymbolInfo (102)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfModuleSymbolInfo(struct soap*, ns1__ArrayOfModuleSymbolInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfModuleSymbolInfo(struct soap*, const char *, int, ns1__ArrayOfModuleSymbolInfo *const*, const char *);
SOAP_FMAC3 ns1__ArrayOfModuleSymbolInfo ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfModuleSymbolInfo(struct soap*, const char*, ns1__ArrayOfModuleSymbolInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfModuleSymbolInfo(struct soap*, ns1__ArrayOfModuleSymbolInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__ArrayOfModuleSymbolInfo
#define soap_write_PointerTons1__ArrayOfModuleSymbolInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__ArrayOfModuleSymbolInfo(soap, data),0) || soap_put_PointerTons1__ArrayOfModuleSymbolInfo(soap, data, "ns1:ArrayOfModuleSymbolInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ArrayOfModuleSymbolInfo ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfModuleSymbolInfo(struct soap*, ns1__ArrayOfModuleSymbolInfo **, const char*, const char*);

#ifndef soap_read_PointerTons1__ArrayOfModuleSymbolInfo
#define soap_read_PointerTons1__ArrayOfModuleSymbolInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__ArrayOfModuleSymbolInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__DumpAdditionalInfo
#define SOAP_TYPE_PointerTons1__DumpAdditionalInfo (101)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DumpAdditionalInfo(struct soap*, ns1__DumpAdditionalInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DumpAdditionalInfo(struct soap*, const char *, int, ns1__DumpAdditionalInfo *const*, const char *);
SOAP_FMAC3 ns1__DumpAdditionalInfo ** SOAP_FMAC4 soap_in_PointerTons1__DumpAdditionalInfo(struct soap*, const char*, ns1__DumpAdditionalInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DumpAdditionalInfo(struct soap*, ns1__DumpAdditionalInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__DumpAdditionalInfo
#define soap_write_PointerTons1__DumpAdditionalInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__DumpAdditionalInfo(soap, data),0) || soap_put_PointerTons1__DumpAdditionalInfo(soap, data, "ns1:DumpAdditionalInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__DumpAdditionalInfo ** SOAP_FMAC4 soap_get_PointerTons1__DumpAdditionalInfo(struct soap*, ns1__DumpAdditionalInfo **, const char*, const char*);

#ifndef soap_read_PointerTons1__DumpAdditionalInfo
#define soap_read_PointerTons1__DumpAdditionalInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__DumpAdditionalInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__AppAdditionalInfo
#define SOAP_TYPE_PointerTons1__AppAdditionalInfo (100)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AppAdditionalInfo(struct soap*, ns1__AppAdditionalInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AppAdditionalInfo(struct soap*, const char *, int, ns1__AppAdditionalInfo *const*, const char *);
SOAP_FMAC3 ns1__AppAdditionalInfo ** SOAP_FMAC4 soap_in_PointerTons1__AppAdditionalInfo(struct soap*, const char*, ns1__AppAdditionalInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AppAdditionalInfo(struct soap*, ns1__AppAdditionalInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__AppAdditionalInfo
#define soap_write_PointerTons1__AppAdditionalInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__AppAdditionalInfo(soap, data),0) || soap_put_PointerTons1__AppAdditionalInfo(soap, data, "ns1:AppAdditionalInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__AppAdditionalInfo ** SOAP_FMAC4 soap_get_PointerTons1__AppAdditionalInfo(struct soap*, ns1__AppAdditionalInfo **, const char*, const char*);

#ifndef soap_read_PointerTons1__AppAdditionalInfo
#define soap_read_PointerTons1__AppAdditionalInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__AppAdditionalInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__Application
#define SOAP_TYPE_PointerTons1__Application (99)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Application(struct soap*, ns1__Application *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Application(struct soap*, const char *, int, ns1__Application *const*, const char *);
SOAP_FMAC3 ns1__Application ** SOAP_FMAC4 soap_in_PointerTons1__Application(struct soap*, const char*, ns1__Application **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Application(struct soap*, ns1__Application *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__Application
#define soap_write_PointerTons1__Application(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__Application(soap, data),0) || soap_put_PointerTons1__Application(soap, data, "ns1:Application", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__Application ** SOAP_FMAC4 soap_get_PointerTons1__Application(struct soap*, ns1__Application **, const char*, const char*);

#ifndef soap_read_PointerTons1__Application
#define soap_read_PointerTons1__Application(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__Application(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__ClientLib
#define SOAP_TYPE_PointerTons1__ClientLib (98)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ClientLib(struct soap*, ns1__ClientLib *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ClientLib(struct soap*, const char *, int, ns1__ClientLib *const*, const char *);
SOAP_FMAC3 ns1__ClientLib ** SOAP_FMAC4 soap_in_PointerTons1__ClientLib(struct soap*, const char*, ns1__ClientLib **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ClientLib(struct soap*, ns1__ClientLib *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__ClientLib
#define soap_write_PointerTons1__ClientLib(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__ClientLib(soap, data),0) || soap_put_PointerTons1__ClientLib(soap, data, "ns1:ClientLib", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ClientLib ** SOAP_FMAC4 soap_get_PointerTons1__ClientLib(struct soap*, ns1__ClientLib **, const char*, const char*);

#ifndef soap_read_PointerTons1__ClientLib
#define soap_read_PointerTons1__ClientLib(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__ClientLib(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToint
#define SOAP_TYPE_PointerToint (97)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap*, int *const*, const char*, const char*);

#ifndef soap_write_PointerToint
#define soap_write_PointerToint(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToint(soap, data),0) || soap_put_PointerToint(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap*, int **, const char*, const char*);

#ifndef soap_read_PointerToint
#define soap_read_PointerToint(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToint(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_xop__Include
#define SOAP_TYPE_PointerTo_xop__Include (96)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_xop__Include(struct soap*, struct _xop__Include *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_xop__Include(struct soap*, const char *, int, struct _xop__Include *const*, const char *);
SOAP_FMAC3 struct _xop__Include ** SOAP_FMAC4 soap_in_PointerTo_xop__Include(struct soap*, const char*, struct _xop__Include **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_xop__Include(struct soap*, struct _xop__Include *const*, const char*, const char*);

#ifndef soap_write_PointerTo_xop__Include
#define soap_write_PointerTo_xop__Include(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_xop__Include(soap, data),0) || soap_put_PointerTo_xop__Include(soap, data, "xop:Include", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _xop__Include ** SOAP_FMAC4 soap_get_PointerTo_xop__Include(struct soap*, struct _xop__Include **, const char*, const char*);

#ifndef soap_read_PointerTo_xop__Include
#define soap_read_PointerTo_xop__Include(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_xop__Include(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__Pdb70File
#define SOAP_TYPE_PointerTons1__Pdb70File (95)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Pdb70File(struct soap*, ns1__Pdb70File *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Pdb70File(struct soap*, const char *, int, ns1__Pdb70File *const*, const char *);
SOAP_FMAC3 ns1__Pdb70File ** SOAP_FMAC4 soap_in_PointerTons1__Pdb70File(struct soap*, const char*, ns1__Pdb70File **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Pdb70File(struct soap*, ns1__Pdb70File *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__Pdb70File
#define soap_write_PointerTons1__Pdb70File(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__Pdb70File(soap, data),0) || soap_put_PointerTons1__Pdb70File(soap, data, "ns1:Pdb70File", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__Pdb70File ** SOAP_FMAC4 soap_get_PointerTons1__Pdb70File(struct soap*, ns1__Pdb70File **, const char*, const char*);

#ifndef soap_read_PointerTons1__Pdb70File
#define soap_read_PointerTons1__Pdb70File(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__Pdb70File(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__ModuleSymbolInfo
#define SOAP_TYPE_PointerTons1__ModuleSymbolInfo (93)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ModuleSymbolInfo(struct soap*, ns1__ModuleSymbolInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ModuleSymbolInfo(struct soap*, const char *, int, ns1__ModuleSymbolInfo *const*, const char *);
SOAP_FMAC3 ns1__ModuleSymbolInfo ** SOAP_FMAC4 soap_in_PointerTons1__ModuleSymbolInfo(struct soap*, const char*, ns1__ModuleSymbolInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ModuleSymbolInfo(struct soap*, ns1__ModuleSymbolInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__ModuleSymbolInfo
#define soap_write_PointerTons1__ModuleSymbolInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__ModuleSymbolInfo(soap, data),0) || soap_put_PointerTons1__ModuleSymbolInfo(soap, data, "ns1:ModuleSymbolInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ModuleSymbolInfo ** SOAP_FMAC4 soap_get_PointerTons1__ModuleSymbolInfo(struct soap*, ns1__ModuleSymbolInfo **, const char*, const char*);

#ifndef soap_read_PointerTons1__ModuleSymbolInfo
#define soap_read_PointerTons1__ModuleSymbolInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__ModuleSymbolInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__wstring
#define SOAP_TYPE_PointerTostd__wstring (92)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__wstring(struct soap*, std::wstring *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__wstring(struct soap*, const char *, int, std::wstring *const*, const char *);
SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_in_PointerTostd__wstring(struct soap*, const char*, std::wstring **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__wstring(struct soap*, std::wstring *const*, const char*, const char*);

#ifndef soap_write_PointerTostd__wstring
#define soap_write_PointerTostd__wstring(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__wstring(soap, data),0) || soap_put_PointerTostd__wstring(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_get_PointerTostd__wstring(struct soap*, std::wstring **, const char*, const char*);

#ifndef soap_read_PointerTostd__wstring
#define soap_read_PointerTostd__wstring(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__wstring(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTounsignedByte
#define SOAP_TYPE_PointerTounsignedByte (15)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap*, unsigned char *const*, const char*, const char*);

#ifndef soap_write_PointerTounsignedByte
#define soap_write_PointerTounsignedByte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTounsignedByte(soap, data),0) || soap_put_PointerTounsignedByte(soap, data, "unsignedByte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap*, unsigned char **, const char*, const char*);

#ifndef soap_read_PointerTounsignedByte
#define soap_read_PointerTounsignedByte(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTounsignedByte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__QName(soap, data),0) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_string(soap, data),0) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_std__vectorTemplateOfstd__wstring
#define SOAP_TYPE_std__vectorTemplateOfstd__wstring (105)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__wstring(struct soap*, std::vector<std::wstring >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__wstring(struct soap*, const std::vector<std::wstring >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__wstring(struct soap*, const char*, int, const std::vector<std::wstring >*, const char*);
SOAP_FMAC3 std::vector<std::wstring >* SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__wstring(struct soap*, const char*, std::vector<std::wstring >*, const char*);
SOAP_FMAC1 std::vector<std::wstring > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__wstring(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::wstring > * soap_new_std__vectorTemplateOfstd__wstring(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfstd__wstring(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfstd__wstring(struct soap *soap, std::vector<std::wstring >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfstd__wstring(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__ModuleSymbolInfo
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__ModuleSymbolInfo (94)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__ModuleSymbolInfo(struct soap*, std::vector<ns1__ModuleSymbolInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__ModuleSymbolInfo(struct soap*, const std::vector<ns1__ModuleSymbolInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__ModuleSymbolInfo(struct soap*, const char*, int, const std::vector<ns1__ModuleSymbolInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns1__ModuleSymbolInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__ModuleSymbolInfo(struct soap*, const char*, std::vector<ns1__ModuleSymbolInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns1__ModuleSymbolInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__ModuleSymbolInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__ModuleSymbolInfo * > * soap_new_std__vectorTemplateOfPointerTons1__ModuleSymbolInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons1__ModuleSymbolInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons1__ModuleSymbolInfo(struct soap *soap, std::vector<ns1__ModuleSymbolInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__ModuleSymbolInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

/* End of soapH.h */
