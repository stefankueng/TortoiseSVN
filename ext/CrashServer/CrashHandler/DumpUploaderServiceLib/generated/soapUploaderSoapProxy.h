/* soapUploaderSoapProxy.h
   Generated by gSOAP 2.8.0 from DumpUploader.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   The generated code is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapUploaderSoapProxy_H
#define soapUploaderSoapProxy_H
#include "soapH.h"

class SOAP_CMAC UploaderSoapProxy : public soap
{ public:
    /// Endpoint URL of service 'UploaderSoapProxy' (change as needed)
    const char *soap_endpoint;
    /// Constructor
    UploaderSoapProxy();
    /// Constructor with copy of another engine state
    UploaderSoapProxy(const struct soap&);
    /// Constructor with engine input+output mode control
    UploaderSoapProxy(soap_mode iomode);
    /// Constructor with engine input and output mode control
    UploaderSoapProxy(soap_mode imode, soap_mode omode);
    /// Destructor frees deserialized data
    virtual ~UploaderSoapProxy();
    /// Initializer used by constructors
    virtual void UploaderSoapProxy_init(soap_mode imode, soap_mode omode);
    /// Delete all deserialized data (uses soap_destroy and soap_end)
    virtual void destroy();
    /// Disables and removes SOAP Header from message
    virtual void soap_noheader();
    /// Get SOAP Fault structure (NULL when absent)
    virtual const SOAP_ENV__Fault *soap_fault();
    /// Get SOAP Fault string (NULL when absent)
    virtual const char *soap_fault_string();
    /// Get SOAP Fault detail as string (NULL when absent)
    virtual const char *soap_fault_detail();
    /// Force close connection (normally automatic, except for send_X ops)
    virtual int soap_close_socket();
    /// Print fault
    virtual void soap_print_fault(FILE*);
#ifndef WITH_LEAN
    /// Print fault to stream
    virtual void soap_stream_fault(std::ostream&);
    /// Put fault into buffer
    virtual char *soap_sprint_fault(char *buf, size_t len);
#endif

    /// Web service operation 'Hello' (returns error code or SOAP_OK)
    virtual int Hello(_ns1__Hello *ns1__Hello, _ns1__HelloResponse *ns1__HelloResponse);

    /// Web service operation 'UploadMiniDump' (returns error code or SOAP_OK)
    virtual int UploadMiniDump(_ns1__UploadMiniDump *ns1__UploadMiniDump, _ns1__UploadMiniDumpResponse *ns1__UploadMiniDumpResponse);

    /// Web service operation 'UploadAdditionalInfo' (returns error code or SOAP_OK)
    virtual int UploadAdditionalInfo(_ns1__UploadAdditionalInfo *ns1__UploadAdditionalInfo, _ns1__UploadAdditionalInfoResponse *ns1__UploadAdditionalInfoResponse);

    /// Web service operation 'UploadSymbol' (returns error code or SOAP_OK)
    virtual int UploadSymbol(_ns1__UploadSymbol *ns1__UploadSymbol, _ns1__UploadSymbolResponse *ns1__UploadSymbolResponse);
};
#endif
