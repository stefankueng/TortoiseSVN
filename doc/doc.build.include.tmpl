<?xml version="1.0"?>
<project name="customize">
	<description>Customization layer for build file</description>

	<!-- ============================================================ -->
	<!-- List of applications and output formats that will be created -->
	<!-- by default                                                   -->
	<property name="applications" value="TortoiseSVN,TortoiseMerge" />

	<property name="docformats" value="pdf,chm,html,htmlsingle" />

	<!-- ============================================================ -->
	<!-- Settings for the translation                                 -->
	
	<!-- Base language. All other documents are created using the     -->
	<!-- documents structure                                          -->
	<property name="lang.base" value="en" />

	<!-- Fileset to exclude from translation and .pot creation        -->
	<!-- Duplicate these files in the "sourcefiles" fileset           -->
	<fileset id="files.exclude">
		<include name="source/${lang.base}/**/tsvn_app_automation.xml"/>
	</fileset>
	
	<fileset id="files.filtered">
		<include name="source/${lang.base}/**/*.xml"/>
		<exclude name="source/${lang.base}/**/tsvn_app_automation.xml"/>
	</fileset>

	<!-- Name of the po template file to create. Can also be a list   -->
	<!-- of applications if you want to create a template for each    -->
	<property name="potemplates" value="doc" />

	<!-- ============================================================ -->
	<!-- Paths to the binaries                                        -->
	<property name="path.bin" value="${path::get-full-path('../Tools')}"/>
	<property name="path.fop" value="${path::get-full-path('../Tools/fop')}"/>
	<property name="path.xsl" value="${string::replace(path::get-full-path('../Tools/xsl'), '\', '/')}"/>
	<property name="path.msgfmt" value="${path::get-full-path('../Tools')}"/>
	<property name="path.subwcrev" value="../bin/release/bin/"/>

	<!-- ============================================================ -->
	<!-- Settings for XSLTPROC                                        -->

	<!-- Paths where the xsl and css files are found                  -->
	<property name="path.user.xsl" value="./xsl"/>
	<property name="path.user.css" value="./source"/>

	<!-- stylesheets and stringparams                                 -->
	<property name="xsl.pdf.params" value="--nonet --xinclude"/>
	<property name="xsl.pdf.file" value="pdfdoc.xsl"/>
	<property name="xsl.chm.params" value="--nonet --xinclude --stringparam html.stylesheet styles_chm.css"/>
	<property name="xsl.chm.file" value="htmlhelp.xsl"/>
	<property name="xsl.html.params" value="--nonet --xinclude --stringparam html.stylesheet styles_html.css"/>
	<property name="xsl.html.file" value="htmlsingle.xsl"/>
	<property name="xsl.htmlsingle.params" value="--nonet --xinclude --stringparam html.stylesheet styles_html.css"/>
	<property name="xsl.htmlsingle.file" value="htmlchunk.xsl"/>

	<!-- ============================================================ -->
	<!-- Paths to the application resources for the chm help creation -->
	<property name="help.resource" value="../src/TortoiseProc/resource.h" />
	<property name="help.context" value="./source/context.h" />

	<!-- ============================================================ -->
	<!-- Custom target to prepare the build -->
	<target name="prepare.custom" description="Prepare XSL files, create help context file">

		<exec program="SubWCRev.exe"
					commandline="source/${lang.base} source/pubdate.tmpl source/${lang.base}/pubdate.xml"
					basedir="${path.subwcrev}"
					failonerror="false"
					resultproperty="result.subwcrev"
					verbose="false" />
		<copy file="source/Pubdate.none" tofile="source/${lang.base}/pubdate.xml" overwrite="true" unless="${result.subwcrev=='0'}"/>

		<!-- Store path to docbook stylesheets in helper stylesheets -->
		<echo message="&lt;xsl:stylesheet xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot; version=&quot;1.0&quot;&gt;" file="${path.user.xsl}/db_pdfdoc.xsl"/>
		<echo message="&lt;xsl:import href=&quot;${path.xsl}/fo/docbook.xsl&quot;/&gt;" file="${path.user.xsl}/db_pdfdoc.xsl" append="true"/>
		<echo message="&lt;/xsl:stylesheet&gt;" file="${path.user.xsl}/db_pdfdoc.xsl" append="true"/>

		<echo message="&lt;xsl:stylesheet xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot; version=&quot;1.0&quot;&gt;" file="${path.user.xsl}/db_htmlhelp.xsl"/>
		<echo message="&lt;xsl:import href=&quot;${path.xsl}/htmlhelp/htmlhelp.xsl&quot;/&gt;" file="${path.user.xsl}/db_htmlhelp.xsl" append="true"/>
		<echo message="&lt;/xsl:stylesheet&gt;" file="${path.user.xsl}/db_htmlhelp.xsl" append="true"/>

		<echo message="&lt;xsl:stylesheet xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot; version=&quot;1.0&quot;&gt;" file="${path.user.xsl}/db_htmlsingle.xsl"/>
		<echo message="&lt;xsl:import href=&quot;${path.xsl}/html/docbook.xsl&quot;/&gt;" file="${path.user.xsl}/db_htmlsingle.xsl" append="true"/>
		<echo message="&lt;/xsl:stylesheet&gt;" file="${path.user.xsl}/db_htmlsingle.xsl" append="true"/>

		<echo message="&lt;xsl:stylesheet xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot; version=&quot;1.0&quot;&gt;" file="${path.user.xsl}/db_htmlchunk.xsl"/>
		<echo message="&lt;xsl:import href=&quot;${path.xsl}/html/chunk.xsl&quot;/&gt;" file="${path.user.xsl}/db_htmlchunk.xsl" append="true"/>
		<echo message="&lt;/xsl:stylesheet&gt;" file="${path.user.xsl}/db_htmlchunk.xsl" append="true"/>

		<call target="help.prepare" unless="${file::up-to-date(help.resource,help.context)}"/>
	</target>

	<!-- ============================================================ -->
	<!-- Prepare help context file -->

	<target name="help.prepare" description="Create CHM help context">

		<echo message="// Generated Help Map file." file="${help.context}" />
		<echo message="" file="${help.context}" append="true"/>
		<echo message="// Commands (ID_* and IDM_*)" file="${help.context}" append="true"/>
		<exec program="makehm"
					commandline="/h ID_,HID_,0x10000 IDM_,HIDM_,0x10000 ${help.resource}"
					output="${help.context}"
					append="true"
					verbose="false" />

		<echo message="" file="${help.context}" append="true"/>
		<echo message="echo // Prompts (IDP_*)" file="${help.context}" append="true"/>
		<exec program="makehm"
					commandline="/h IDP_,HIDP_,0x30000 ${help.resource}"
					output="${help.context}"
					append="true"
					verbose="false" />

		<echo message="" file="${help.context}" append="true"/>
		<echo message="echo // Resources (IDR_*)" file="${help.context}" append="true"/>
		<exec program="makehm"
					commandline="/h IDR_,HIDR_,0x20000 ${help.resource}"
					output="${help.context}"
					append="true"
					verbose="false" />

		<echo message="" file="${help.context}" append="true"/>
		<echo message="echo // Dialogs (IDD_*)" file="${help.context}" append="true"/>
		<exec program="makehm"
					commandline="/h IDD_,HIDD_,0x20000 ${help.resource}"
					output="${help.context}"
					append="true"
					verbose="false" />

		<echo message="" file="${help.context}" append="true"/>
		<echo message="// Frame Controls xyxzy(IDW_*)" file="${help.context}" append="true"/>
		<exec program="makehm"
					commandline="/h /a afxhh.h IDW_,HIDW_,0x50000 ${help.resource}"
					output="${help.context}"
					append="true"
					verbose="false" />

	</target>

	<!-- ============================================================ -->
	<!-- Copy help context to target location -->
	<target name="help.custom" description="Create CHM help context">
		<copy file="${help.context}" todir="${doc.target.work}" overwrite="true"/>
	</target>


</project>
