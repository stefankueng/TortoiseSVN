<chapter id="tmerge-ch-1">

	<title>Introduction</title>
	
	<simplesect>
		<para>
		</para>
	</simplesect>


	<!-- ================================================================= -->
	<!-- ======================== SECTION 1 ============================== -->
	<!-- ================================================================= -->
	<sect1 id="tmerge-ch-1-sect-1">
		
		<title>Overview</title>
		<?dbhh topicname="HIDD_OPENDLG"?>
	
		<para>
		TortoiseMerge is a free/open-source application. It let's you see
		differences in text files, merge those changes and even review and
		apply unified diff files, often called <firstterm>patches</firstterm>.
		</para>
		<para>
		While working on text files, e.g. source files in your favourite
		programming language or html/xml files for your documentation or
		website, you will often have a situation where you need to compare
		different versions of those files. Sometimes you get a different
		version from someone else, sometimes you just want to see the changes
		you've made.
		</para>
		<para>
		If you're working with a version control system (e.g. Subversion) then
		you sometimes get <emphasis>conflicts</emphasis> when you update your
		working copy. This happens if someone else changed the same parts of
		the file you're currently working on as you. Then you have to resolve
		that conflict manually. This is where TortoiseMerge can help you.
		</para>
		<para>
		The following diagram shows you the relationships among the files
		involved in a conflict:
		</para>
		<para>
			<graphic srccredit="file conflict" fileref="mergeprinciple.png"/>
		</para>
		<para>
		A conflict can also occur if you try to apply an outdated patchfile.
		In such cases you would either have to ask the person you got that
		patchfile from for a current version or try to apply that patchfile
		manually.
		</para>
		<para>
		But now with TortoiseMerge this isn't necessary anymore - at least not
		if you're working with a version control system like Subversion.
		TortoiseMerge parses the patchfile for the revision/version the patch
		was created for and automatically tries to fetch that specific version
		from your source-control, applies the patch and lets you review both
		your and their changes to the file. Then you can decide which changes
		you want to keep.
		</para>
	</sect1>

	<!-- ================================================================= -->
	<!-- ======================== SECTION 2 ============================== -->
	<!-- ================================================================= -->
	<sect1 id="tmerge-ch-1-sect-2">
	
	<title>TortoiseSVN's History</title>
		
		<para>
		In 2002, Tim Kemp found that Subversion was a very good version control
		system, but it lacked a good GUI client. The idea for a subversion
		client as a Windows shell integration was inspired by the similar
		client for CVS named TortoiseCVS.
		</para>
		
		<para>
		Tim studied the sourcecode of TortoiseCVS and used it as a base for
		TortoiseSVN. He then started the project, registered the domain
		tortoisesvn.org and put the sourcecode online. During that time,
		Stefan K&uuml;ng was looking for a good and free version control system
		and found Subversion and the source for TortoiseSVN. Since TortoiseSVN
		was still not ready for use then he joined the project and started
		programming. Soon he rewrote most of the existing code and started
		adding commands and features.
		</para>
		
		<para>
		As Subversion became more stable it attracted more and more users who
		also started using TortoiseSVN as their Subversion client. The userbase
		grew quickly (and is still growing every day). That's when L&uuml;bbe
		Onken offered to help out with some nice icons and a logo for
		TortoiseSVN. And he takes care of the website.
		</para>
	
	</sect1>

	<!-- ================================================================= -->
	<!-- ======================== SECTION 3 ============================== -->
	<!-- ================================================================= -->
	<sect1 id="tmerge-ch-1-sect-3">
	
		<title>TortoiseSVN's Features</title>
		
		<para>
		How does Subversion improve upon CVS's design?  Here's a
		short list to whet your appetite.  If you're not familiar with
		CVS, you may not understand all of these features.  Fear not:
		Chapter 2 will provide you with a gentle introduction to version
		control.</para>

		<variablelist>
			<varlistentry>
				<term>Shell integration</term>
				<listitem><para>
				TortoiseSVN integrates seamless into the Windows shell (i.e.
				the explorer). This means you can keep working with the tools
				you're already familiar with.
				</para></listitem>
			</varlistentry>
			<varlistentry>
				<term>Icon overlays</term>
				<listitem><para>
				The status of every versioned file and folder is indicated
				by small overlay icons. That way you can see right away what
				the status of your working copy is.
				</para></listitem>
			</varlistentry>
			<varlistentry>
				<term>Easy access to Subversion commands</term>
				<listitem><para>
				All Subversion commands are available from the explorer
				context menu. TortoiseSVN adds its own submenu there.
				</para></listitem>
			</varlistentry>
		</variablelist>
		
		<para>
		Since TortoiseSVN is a Subversion client, we also like to show you
		some of the features of Subversion itself:
		</para>
		
		<variablelist>	
			<varlistentry>
				<term>Directory versioning</term>
				<listitem>
				<para>CVS only tracks the history of individual files,
				but Subversion implements a
				<quote>virtual</quote> versioned filesystem that tracks
				changes to whole directory trees over time.  Files
				<emphasis>and</emphasis> directories are versioned.  As a
				result, there are real client-side <command>move</command>
				and <command>copy</command> commands that operate on files
				and directories.</para>
				</listitem>
			</varlistentry>
			
			<varlistentry>
				<term>Atomic commits</term>
				<listitem>
				<para>A commit either goes into the repository completely,
				or not at all.  This allows developers to construct and
				commit changes as logical chunks.</para>
				</listitem>
			</varlistentry>
			
			<varlistentry>
				<term>Versioned metadata</term>
				<listitem>
				<para>Each file and directory has an invisible set of
				<quote>properties</quote> attached.  You can invent and
				store any arbitrary key/value pairs you wish.  Properties
				are versioned over time, just like file contents.</para>
				</listitem>
			</varlistentry>
			
			<varlistentry>
				<term>Choice of network layers</term>
				<listitem>
				<para>Subversion has an abstracted notion of repository
				access, making it easy for people to implement new network
				mechanisms.  Subversion's <quote>advanced</quote> network
				server is a module for the Apache web server, which speaks
				a variant of HTTP called WebDAV/DeltaV.  This gives
				Subversion a big advantage in stability and
				interoperability, and provides various key features for
				free: authentication, authorization, wire compression, and
				repository browsing, for example.  A smaller, standalone
				Subversion server process is also available.  This server speaks
				a custom protocol which can be easily tunneled over ssh.
				</para>
				</listitem>
			</varlistentry>
			
			<varlistentry>
				<term>Consistent data handling</term>
				<listitem>
				<para>Subversion expresses file differences using a binary
				differencing algorithm, which works identically on both
				text (human-readable) and binary (human-unreadable) files.
				Both types of files are stored equally compressed in the
				repository, and differences are transmitted in both
				directions across the network.</para>
				</listitem>
			</varlistentry>
			
			<varlistentry>
				<term>Efficient branching and tagging</term>
				<listitem>
				<para>
				The cost of branching and tagging need not be proportional to the
				project size.  Subversion creates branches and tags by
				simply copying the project, using a mechanism similar to a
				hard-link.  Thus these operations take only a very small,
				constant amount of time.
				</para>
				</listitem>
			</varlistentry>
			
			<varlistentry>
				<term>Hackability</term>
				<listitem>
				<para>Subversion has no historical baggage; it is
				implemented as a collection of shared C libraries with
				well-defined APIs.  This makes Subversion extremely
				maintainable and usable by other applications and
				languages.</para>
				</listitem>
			</varlistentry>
		
		</variablelist>
		
		</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
