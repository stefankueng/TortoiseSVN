<?xml version="1.0" encoding="UTF-8"?>
<chapter id="tsvn-basics">
	<title>Grundkonzepte</title>
	<!-- this chapter is copied over from the subversion book and slightly
       modified for the TortoiseSVN client -->
	<simplesect>
		<para>
			<indexterm>
				<primary>Subversion Buch</primary>
			</indexterm>
		Dieses Kapitel ist eine leicht veränderte Version desselben Kapitels
		aus dem Subversion Buch. Sie können das Subversion Buch unter folgendem
		Link lesen:
			<ulink url="http://svnbook.red-bean.com/">
				<citetitle>
					http://svnbook.red-bean.com/
				</citetitle>
			</ulink>.
		</para>
		<para>
		Dieses Kaptiel ist eine kurze, beiläufige Einführung in Subversion.
		Falls Sie noch nie etwas von Versionskontrolle gehört haben, dann ist
		dieses Kapitel definitiv etwas für Sie.
		Wir beginnen mit einer Diskussion über allgemeine Konzepte der
		Versionskontrolle, arbeiten uns dann vor in die spezifischen Ideen
		hinter Subversion und zeigen ein paar einfache Beispiele zur Benutzung
		von Subversion.
		</para>
		<para>
		Obwohl die hier gezeigten Beispiele Personen zeigen, die mit
		Sourcecode arbeiten, beachten Sie bitte, dass Subversion <emphasis>
		jegliche</emphasis> Daten verarbeiten kann - es ist nicht
		auf Sourcecode beschränkt.
		</para>
	</simplesect>
	<sect1 id="tsvn-ch2-sect-1">
		<title>Das Projektarchiv</title>
		<indexterm>
			<primary>Projektarchiv</primary>
		</indexterm>
		<para>
		Subversion ist ein zentralisiertes System für die Verteilung von
		Informationen. In seinem Kern ist eine Datenbank, welche die
		Informationen in Form eines Dateisystem-Baums - einer typischen
		Hierarchie von Dateien und Ordnern - abspeichert. Eine beliebige
		Anzahl von Clients kontaktiert das Projektarchiv und liest und schreibt
		von/in diese Dateien. Durch ein Schreiben von Daten stellt ein Client
		diese Daten auch anderen zur Verfügung, durch Lesen von Daten bekommt
		ein Client die Informationen von anderen.
		</para>
		<figure id="tsvn-ch2-dia1">
			<title>Ein typisches Client/Server System</title>
			<graphic fileref="images/ch02dia1.png"/>
		</figure>
		<para>
		Warum ist dies so interessant? Bis jetzt klingt dies alles wie die
		Definition eines typischen Dateiservers. Und tatsächlich <emphasis>ist
		</emphasis> das Projektarchiv eine Art Dateiserver, aber sie ist kein
		typischer Dateiserver. Was das Subversion Projektarchiv so speziell macht,
		ist, dass diese <emphasis>jede je gemachte Änderung speichert</emphasis>:
		jede Änderung an einer Datei, sogar Änderungen am Dateibaum selbst wie das
		Hinzufügen, Löschen oder Umbenennen/Verschieben von Dateien und Ordnern.
		</para>
		<para>
		Wenn ein Client Daten aus dem Projektarchiv liest, so sieht er normalerweise
		nur die aktuellste Version des Dateisystembaums. Aber ein Clientprogramm
		hat auch die Möglichkeit, <emphasis>frühere</emphasis> Versionen zu
		sehen. Zum Beispiel kann ein Client Fragen stellen wie "Was enthielt
		dieser Ordner letzten Mittwoch?", oder "Wer war die letzte Person,
		welche diese Datei geändert hat und was für Änderungen waren dies?".
		Dies sind die Art von Fragen, die das Herz eines Versionskontrollsystems
		bilden: Systeme, welche gebaut wurden um Änderungen aufzuzeichnen und
		über die Zeit hinweg zu verfolgen.
		</para>
	</sect1>
	<!-- the philosophical section -->
	<sect1 id="tsvn-ch-2-sect-2">
		<title>Versionskontroll-Modelle</title>
		<para>
		Alle Versionskontrollsysteme haben ein gemeinsames, grundlegendes
		Problem zu lösen: Wie kann das System verschiedenen Benutzern erlauben,
		die Informationen zu teilen, aber gleichzeitig verhindern, dass die
		Benutzer sich gegenseitig auf die Füsse treten? Es ist viel zu einfach
		für Benutzer, ungewollt Änderungen von anderen Benutzern zu überschreiben.
        </para>
		<sect2 id="tsvn-ch-2-sect-2.1">
			<title>Das Problem des Filesharing</title>
			<para>
			Stellen Sie sich folgende Szene vor: angenommen, wir haben zwei
			Mitarbeiter, Harry und Sally. Sie beide beschliessen, dieselbe
			Datei gleichzeitig zu ändern. Wenn Harry seine Änderungen zuerst
			im Projektarchiv speichert, dann ist es möglich (ein paar Augenblicke
			später), dass Sally ungewollt diese Änderungen durch ihre eigenen
			überschreibt. Obwohl die Änderungen von Harry nicht verloren sind
			(das Versionskontrollsystem speichert <emphasis>alle</emphasis>
			Änderungen), werden Harry's Änderungen in der aktuellsten Version
			von Sally nicht vorhanden sein, weil Sally diese Änderungen nie
			gesehen hat. Harry's Änderungen sind also trotzdem verloren -
			oder zumindest fehlen diese in der aktuellsten Version.
			Dies ist definitiv eine Situation, die wir verhindern wollen!
			</para>
			<figure id="tsvn-ch2-dia2">
				<title>Das zu verhindernde Problem</title>
				<graphic fileref="images/ch02dia2.png"/>
			</figure>
		</sect2>
		<sect2 id="tsvn-ch-2-sect-2.2">
			<title>Die Sperren-Ändern-Freigeben Lösung</title>
			<para>
			Viele Versionskontrollsysteme nutzen ein sperren-ändern-freigeben
			Modell, was eine sehr einfache Lösung ist. In einem solchen System
			kann jeweils nur eine einzige Person eine Datei ändern. Zuerst muss
			Harry die Datei sperren, bevor er mit dem Ändern beginnen kann.
			Sperren ist so ähnlich wie das Ausleihen eines Buchs aus der
			Bibliothek; wenn Harry die Datei gesperrt hat, dann kann Sally
			keine Änderungen an dieser Datei mehr vornehmen. Wenn sie es
			dennoch versucht, kriegt sie eine Fehlermeldung. Alles, was sie
			tun kann, ist die Datei lesen und zu warten, bis Harry die Datei
			wieder freigegeben hat (das Buch in die Bibliothek zurückgebracht
			hat). Danach kann Sally die Datei sperren und ihre Änderungen
			vornehmen.
			</para>
			<figure id="tsvn-ch2-dia3">
				<title>Die Sperren-Ändern-Freigeben Lösung</title>
				<graphic fileref="images/ch02dia3.png"/>
			</figure>
			<para>
			Das Problem mit der Sperren-Ändern-Freigeben Lösung ist, dass diese
			zu restriktiv ist und oft zu einem Hindernis für die Benutzer
			wird:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						<emphasis>Sperren kann administrative Probleme auslösen.
					</emphasis> Manchmal wird Harry eine Datei sperren und
					dann vergessen, diese wieder freizugeben. In der
					Zwischenzeit wartet Sally bis sie diese Datei ändern kann,
					aber durch die Sperre von Harry sind ihr die Hände gebunden.
					Und dann geht Harry in die Ferien. Nun braucht Sally einen
					Administrator, um die Sperre von Harry aufzuheben. Diese
					Situation führt zu unnötigen Verzögerungen und verschwendet
					Zeit.
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>Sperren kann zu unnötiger serieller
					Arbeitsweise führen</emphasis>
					Was, wenn Harry den Anfang einer Textdatei ändert und
					Sally das Ende dieser Textdatei ändern möchte? Diese
					Änderungen stören sich überhaupt nicht und könnten sehr
					einfach gleichzeitig ausgeführt werden, in der Annahme,
					dass diese Änderungen ohne Probleme zusammengeführt
					werden. Es ist in dieser Situation völlig unnötig zu
					warten, bis der eine mit der Arbeit fertig ist.
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>Sperren kann ein falsches Gefühl von Sicherheit
					erzeugen</emphasis>
					Angenommen, Harry sperrt und ändert eine Datei A, während
					Sally eine Datei B gesperrt hat und ändert. Aber angenommen,
					diese beiden Dateien sind nicht unabhängig voneinander und
					die Änderungen an der einen Datei sind nicht kompatibel
					mit den Änderungen an der anderen Datei. Plötzlich
					funktionieren die Dateien A und B nicht mehr zusammen.
					Das Sperr-System konnte dieses Problem nicht verhindern
					- es spiegelte sogar eine falsche Sicherheit vor.
					Es ist einfach für Harry und Sally anzunehmen, dass durch
					das Sperren von Dateien jeder Änderungen sicher durchführen
					kann.
					</para>
				</listitem>
			</itemizedlist>
		</sect2>
		<sect2 id="tsvn-ch-2-sect-2.3">
			<title>Die Kopie-Ändern-Zusammenführen Lösung</title>
			<para>
			Subversion, CVS und andere Versionskontrollsysteme nutzen ein
			Kopie-Ändern-Zusammenführen Modell als Alternative zur Sperr-Lösung.
			In diesem Modell hat jeder Benutzer eine persönliche <firstterm>
			Arbeitskopie</firstterm> des Projekts. Die Benutzer arbeiten dann
			parallel und ändern jeweils ihre persönliche Arbeitskopie.
			Schliesslich werden diese privaten Arbeitskopien zu einer endgültigen 
      Version zusammengeführt. Das Versionskontrollsystem hilft beim 
      Zusammenführen, überlässt die endgültige Kontrolle aber dem Benutzer 
      selbst.
			</para>
			<para>
			Hier ein Beispiel. Angenommen, Harry und Sally haben jeder eine
			private Arbeitskopie von demselben Projekt. Sie arbeiten parallel
			und ändern dieselbe Datei A in ihren Arbeitskopien. Sally speichert
			ihre Änderungen zuerst im Projektarchiv. Wenn Harry nun dasselbe
			versucht, bekommt er eine Meldung vom Projektarchiv, dass seine
			Datei nicht aktuell ist. In anderen Worten, die Datei A wurde
			irgendwie im Projektarchiv verändert, seit er sie das letzte Mal
			aktualisiert hat. Also <firstterm>aktualisiert</firstterm>
			Harry seine Arbeitskopie mit dem Projektarchiv und 
      <firstterm>führt</firstterm> die Änderungen im Projektarchiv mit seinen 
      eigenen zusammen.
			Die Wahrscheinlichkeit, dass die Änderungen von Sally sich nicht
			mit seinen eigenen beissen, ist gross, und so kann Harry gleich
			danach die Datei im Projektarchiv speichern.
			</para>
			<figure id="tsvn-ch2-dia4">
				<title>Die Kopie-Ändern-Zusammenführen Lösung</title>
				<graphic fileref="images/ch02dia4.png"/>
			</figure>
			<figure id="tsvn-ch2-dia5">
				<title>...Kopie-Ändern-Zusammenführen fortgesetzt</title>
				<graphic fileref="images/ch02dia5.png"/>
			</figure>
			<para>
				<indexterm>
					<primary>Konflikt</primary>
				</indexterm>
			Aber was, wenn die Änderungen von Sally sich mit Harry's Änderungen
			<emphasis>tatsächlich</emphasis> beissen? Was dann? Diese Situation
			wird ein <firstterm>Konflikt</firstterm> genannt und ist
			üblicherweise kein grosses Problem.
			Wenn Harry in diesem Falle seine Arbeitskopie aktualisiert und die
			Änderungen von Sally mit den seinen zusammenführt, wird seine Kopie der
			Datei A als"In Konflikt" markiert; er kann dann beide Versionen der
			Dateiansehen und manuell wählen zwischen den Änderungen von Sally
			oder seinen eigenen.
			Beachten Sie, dass Software solche Konflikte nicht selbst lösen kann;
			nur Menschen sind in der Lage, die Änderungen auch zu verstehen und
			die notwendigen intelligenten Entscheidungen zu treffen (vielleicht
			durch ein Gespräch mit Sally).
			</para>
			<para>
			Das Kopie-Ändern-Zusammenführen Modell mag ein wenig chaotisch aussehen,
			aber in der Praxis bewährt es sich sehr gut. Benutzer können
			parallel arbeiten, müssen niemals aufeinander warten. Wenn sie
			an denselben Dateien arbeiten, stellt sich heraus, dass die meiste
			Zeit keine Konflikte auftreten. Und die Zeit, die benötigt wird,
			um einen der wirklich seltenen Konflikte zu lösen, ist viel kleiner
			als die Zeit, welche auf die Freigabe einer gesperrten Datei gewartet
			wird.
			</para>
			<para>
			Schlussendlich hängt alles von einem einzigen kritischen Faktor
			ab: Kommunikation unter den Benutzern. Wenn die Benutzer nur
			schlecht miteinander kommunizieren, werden vermehrt Konflikte
			auftreten. Kein System kann Benutzer zur Kommunikation zwingen,
			und kein System kann logische Konflikte erkennen.
			</para>
		</sect2>
	</sect1>
	<!-- How svn implements the philosophy -->
	<sect1 id="tsvn-ch-2-sect-3">
		<title>Subversion bei der Arbeit</title>
		<sect2 id="tsvn-ch-2-sect-3.1">
			<title>Arbeitskopie</title>
			<para>
				<indexterm>
					<primary>Arbeitskopie</primary>
				</indexterm>
			Sie haben bereits über Arbeitskopien gelesen; nun werden wir
			zeigen, wie ein Subversionprogramm diese erstellt und benutzt.
			</para>
			<para>
			Eine Subversion-Arbeitskopie ist eine ganz normale Ordnerstruktur
			auf einem lokalen Dateisystem, welches eine Anzahl von Dateien
			enthält. Sie können diese Dateien ändern wie Sie wollen, und falls
			dies Sourcecode-Dateien sind, können Sie diese kompilieren wie sonst
			auch. Ihre Arbeitskopie ist Ihr eigenes privates Arbeitsfeld:
			Subversion wird nie Änderungen von anderen einfügen oder Ihre
			Änderungen anderen zur Verfügung stellen, ohne dass Sie Subversion
			explizit dazu auffordern.
			</para>
			<para>
			Nachdem Sie einige Änderungen an den Dateien in Ihrer Arbeitskopie
			vorgenommen haben und Sie überprüft haben, dass diese immer noch
			korrekt funktionieren (z. B. ohne Fehler kompilierbar sind), stellt
			Ihnen Subversion Befehle zur Verfügung, um Ihre Änderungen zu
			publizieren (durch Speichern im zentralen Projektarchiv), d. h.,
			anderen zur Verfügung zu stellen. Falls andere Benutzer ihre
			Änderungen veröffentlicht haben, stellt Subversion Befehle
			zur Verfügung, mit denen Sie diese Änderungen in Ihre Arbeitskopie
			einfügen können (durch Lesen aus dem zentralen Projektarchiv).
			</para>
			<para>
			Eine Arbeitskopie enthält immer auch zusätzliche Dateien, erstellt
			und verwaltet von Subversion, um diese Befehle ausführen zu können.
			Genauer gesagt enthält jeder Ordner in Ihrer Arbeitskopie einen Unterordner
			mit Namen <filename>.svn</filename>, auch bekannt als der <firstterm>
			Administrative Ordner</firstterm> der Arbeitskopie. Die Dateien in
			jedem administrativen Ordner helfen Subversion dabei zu erkennen,
			welche Dateien Sie verändert haben und welche Dateien sich im
			Projektarchiv durch andere Benutzer geändert haben.
			</para>
			<para>
			Ein typisches Subversion Projektarchiv enthält oft Dateien (oder
			Quellcode) von mehreren Projekten; normalerweise ist jedes Projekt
			ein Unterordner in der Dateisystemstruktur. In einem solchen
			Umfeld enthält eine Arbeitskopie normalerweise nur einen solchen
			Unterordner des Projektarchivs.
			</para>
			<para>
			Als Beispiel nehmen Sie an, dass Sie ein Projektarchiv haben, das zwei
			Softwareprojekte enthält.
			</para>
			<figure id="tsvn-ch2-dia6">
				<title>Das Dateisystem des Projektarchivs</title>
				<graphic fileref="images/ch02dia6.png"/>
			</figure>
			<para>
			In anderen Worten, das Hauptverzeichnis des Projektarchivs hat zwei
			Unterordner: <filename>paint</filename> und <filename>calc</filename>
			</para>
			<para>
			Um eine Arbeitskopie zu erhalten, müssen Sie einen dieser Unterordner
			aus dem Projektarchiv <firstterm>Auschecken</firstterm>.
			</para>
			<sidebar id="tsvn-ch-02-sidebar-1">
				<title>Projektarchiv URLs</title>
				<para>
				Auf Subversion Projektarchive kann mittels vieler verschiedener
				Methoden zugegriffen werden - lokal oder durch verschiedene
				Netzwerk-Protokolle. Auf ein Objekt im Projektarchiv wird  immer über 
        eine URL zugegriffen. Das URL Schema zeigt die Zugriffsmethode:
				</para>
				<table id="tsvn-ch-02-table-1">
					<title>Zugriffs-URLs</title>
					<tgroup cols="2">
						<colspec colnum="1" colwidth="1*"/>
						<colspec colnum="2" colwidth="4*"/>
						<thead>
							<row>
								<entry>Schema</entry>
								<entry>Zugriffsmethode</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<literal>file:///</literal>
								</entry>
								<entry>Direkter Zugriff auf einer lokalen Festplatte.</entry>
							</row>
							<row>
								<entry>
									<literal>http://</literal>
								</entry>
								<entry>
                  Zugriff via WebDAV Protokoll auf einen Apache-Server, auf dem 
                  Subversion installiert ist.
								</entry>
							</row>
							<row>
								<entry>
									<literal>https://</literal>
								</entry>
								<entry>
                  Wie <literal>http://</literal>, aber mit SSL-Verschlüsselung.
								</entry>
							</row>
							<row>
								<entry>
									<literal>svn://</literal>
								</entry>
								<entry>
                  Nicht authentifizierter TCP/IP Zugriff mittels eigenem Protokoll 
                  auf einen <literal>svnserve</literal> Server.
								</entry>
							</row>
							<row>
								<entry>
									<literal>svn+ssh://</literal>
								</entry>
								<entry>
                  Authentifizierter, verschlüsselter TCP/IP Zugriff mittels 
                  eigenem Protokoll auf einen <literal>svnserve</literal> Server.
								</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				<para>
				In den weitaus meisten Fällen nutzen Subversion URLs die Standardsyntax
				und erlauben, dass Servernamen und Portnummern als Teil der URL
				angegeben werden. Beachten Sie jedoch, dass die <literal>file:///
				</literal> Zugriffsmethode nur möglich ist, wenn das Projektarchiv auf
				demselben Rechner liegt wie das Clientprogramm. Mit <literal>file:///
				</literal> darf nicht auf Projektarchive auf freigegebenen Netzlaufwerken
				zugegriffen werden!
				</para>
				<para>
				Zudem müssen Benutzer des <literal>file:///</literal> Schemas auf
				Windowsrechnern eine nicht offizielle <quote>Standard</quote>
				Syntax für die URL verwenden. Jede der folgenden URLs funktioniert,
				wobei <literal>X</literal> das Laufwerk mit dem Projektarchiv ist:
				</para>
				<screen>
file:///X:/path/to/repos
...
file:///X|/path/to/repos
...
</screen>
				<para>
				Beachten Sie, dass die URL normale Schrägstriche verwendet, obwohl
				Windows-Pfade mit Gegenschrägstrichen angegeben werden.
				</para>
			</sidebar>
			<para>
			Angenommen, Sie machen Änderungen an der Datei <filename>button.c
			</filename>. Da der <filename>.svn</filename> Ordner den Originalinhalt
			und das Änderungsdatum gespeichert hat, kann Subversion feststellen,
			dass Sie diese Datei geändert haben. Jedoch wird Subversion diese
			Änderungen erst veröffentlichen, wenn Sie Subversion
			dazu explizit auffordern. Der Vorgang des Veröffentlichens ist
			allgemein unter dem Begriff <firstterm>Übertragen</firstterm> (engl.
			<literal>committing</literal>) bekannt.
			</para>
			<para>
			Um Ihre Änderungen anderen zur Verfügung zu stellen, können Sie den
			Befehl <command>Übertragen</command> verwenden.
			</para>
			<para>
			Danach sind Ihre Änderungen an der Datei <filename>button.c</filename>
			im Projektarchiv abgespeichert; falls jemand anders nun eine neue
			Arbeitskopie von <filename>/calc</filename> auscheckt, wird diese
			Ihre letzten Änderungen an der Datei <filename>button.c</filename>
			mitenthalten.
			</para>
			<para>
			Nehmen Sie an, Sie haben eine Mitarbeiterin, Sally, die eine
			Arbeitskopie von <filename>/calc</filename> zur selben Zeit wie Sie
			ausgecheckt hat. Wenn Sie Ihre Änderungen übertragen, bleibt
			die Arbeitskopie von Sally unverändert. Subversion ändert an einer
			Arbeitskopie nur dann etwas, wenn Sie es ausdrücklich dazu auffordern.
			</para>
			<para>
			Um ihre Arbeitskopie auf den neuesten Stand zu bringen, sagt Sally
			Subversion, dass es ihre Arbeitskopie <firstterm>aktualisieren
			</firstterm> soll mittels des <command>Aktualisieren</command>
			Befehls. Dies wird Ihre Änderungen in die Arbeitskopie von Sally
			einfügen, sowie natürlich alle weiteren Änderungen, welche andere
			vorgenommen haben seit Sally ihre Arbeitskopie das letzte mal
			aktualisiert hat.
			</para>
			<para>
			Beachten Sie, dass Sally nicht angeben muss, welche Dateien genau
			Subversion aktualisieren soll; Subversion nutzt die Informationen
			im <filename>.svn</filename> Ordner und weitere Informationen aus
			dem Projektarchiv, um dies selbst festzustellen.
			</para>
		</sect2>
		<sect2 id="tsvn-ch-2-sect-3.2">
			<title>Revisionen</title>
			<indexterm>
				<primary>Revision</primary>
			</indexterm>
			<para>
			Ein <command>Übertragen</command> Befehl kann Änderungen an beliebig
			vielen Dateien und Ordnern übertragen als eine einzige
			atomare Operation. In Ihrer Arbeitskopie können Sie Dateien ändern,
			erstellen, löschen, umbenennen und verschieben und dann alle diese
			Änderungen in einem einzigen Schritt übertragen.
			</para>
			<para>
			Im Projektarchiv wird jede Übertragung als eine einzige atomare
			Transaktion behandelt: entweder werden alle Änderungen abgespeichert
			oder gar keine. Subversion stellt dies sogar im Falle von Systemabstürzen,
			Netzwerkproblemen, Stromausfällen oder anderen Problemen sicher.
			</para>
			<para>
			Jedesmal wenn ein Projektarchiv eine Übertragung akzeptiert, wird
			dadurch ein neuer Zustand der Dateistruktur erzeugt. Ein solcher
			Zustand wird <firstterm>Revision</firstterm> genannt.
			Jeder Revision wird eine natürliche Zahl zugeordnet, jeweils um
			eins grösser als die vorherige Revision. Der Ursprungszustand
			eines Projektarchivs bei der Erstellung ist also Revision 0.
			Revision 0 enthält nichts ausser einem leeren Hauptverzeichnis.
			</para>
			<para>
			Ein möglicher Weg, um sich das Projektarchiv vorzustellen, ist als eine
			Reihe von Bäumen. Stellen Sie sich eine Reihe von Revisionsnummern
			vor, beginnend mit 0, sich von links nach rechts ausbreitend. Jede
			Revisionsnummer hat einen Dateisystembaum, welcher an dieser Reihe
			hängt, und jeder dieser Bäume ist eine <quote>Momentaufnahme</quote>
			davon, wie das Projektarchiv nach der jeweiligen Übertragung ausgesehen hat.
			</para>
			<figure id="tsvn-ch2-dia7">
				<title>Das Projektarchiv</title>
				<graphic fileref="images/ch02dia7.png"/>
			</figure>
			<sidebar>
				<title>Globale Revisionsnummern</title>
				<para>
				Anders als in vielen bekannten Versionskontrollsystemen stellt eine
				Revisionsnummer den Zustand eines <emphasis>ganzen Dateibaumes
				</emphasis> dar, nicht nur von einzelnen Dateien. Jede Revision
				ist ein ganzer Dateibaum, ein bestimmter Zustand des Projektarchivs
				nach einer Übertragung. Eine andere Möglichkeit, sich eine
				Revision vorzustellen, ist, dass eine Revision N den Zustand
				des Projektarchivs nach der N-ten Übertragung darstellt.
				Wenn ein Subversion-Benutzer von <quote>Revision 5 der Datei <filename>
				foo.c</filename>
					</quote> spricht, meint er in Wirklichkeit den Zustand
				der Datei <filename>foo.c</filename> wie sie in Revision 5
				ausgesehen hat. Beachten Sie, dass zwei verschiedene Revisionen
				einer Datei <emphasis>nicht</emphasis> unterschiedlich sein
				müssen!
				</para>
			</sidebar>
			<para>
			Es ist wichtig zu beachten, dass Arbeitskopien nicht immer mit einer
			einzigen Revision des Projektarchivs übereinstimmen; sie können Dateien
			von verschiedenen Revisionen enthalten. Nehmen Sie zum Beispiel an,
			Sie haben aus einem Projektarchiv eine Arbeitskopie ausgecheckt, bei
			welcher die neueste Revision die 4 ist:
			</para>
			<screen>
calc/Makefile:4
     integer.c:4
     button.c:4
</screen>
			<para>
			In diesem Moment entspricht die Arbeitskopie exakt der Revision 4
			im Projektarchiv. Nun nehmen Sie an, Sie ändern die Datei
			<filename>button.c</filename> und übertragen diese Änderungen.
			Nehmen Sie weiter an, dass keine weitern Änderungen vorgenommen
			wurden und Ihre Übertragung eine neue Revision 5 im Projektarchiv
			erstellt. Ihre Arbeitskopie wird dann so aussehen:
			</para>
			<screen>
calc/Makefile:4
     integer.c:4
     button.c:5
</screen>
			<para>
			Nehmen Sie nun an, dass jetzt Sally Änderungen an der Datei
			<filename>integer.c</filename> überträgt und damit eine Revision 6
			erstellt. Wenn Sie nun Ihre Arbeitskopie aktualisieren, wird dies
			dann so aussehen:
			</para>
			<screen>
calc/Makefile:6
     integer.c:6
     button.c:6
</screen>
			<para>
			Sally's Änderungen an der Datei <filename>integer.c</filename> werden
			in Ihre Arbeitskopie eingefügt, und Ihre Änderungen in der Datei
			<filename>button.c</filename> werden immer noch vorhanden sein.
			In diesem Beispiel ist der Inhalt der Datei <filename>Makefile
			</filename> identisch in den Revisionen 4, 5 und 6, aber Subversion
			markiert Ihre lokale Kopie von <filename>Makefile</filename> mit
			Revision 6 um zu zeigen, dass diese immer noch aktuell ist. Also
			nachdem Sie eine saubere Aktualisierung durchgeführt haben, wird
			Ihre Arbeitskopie exakt einer Revision im Projektarchiv entsprechen.
			</para>
		</sect2>
		<sect2 id="tsvn-ch-2-sect-3.3">
			<title>Wie Arbeitskopien das Projektarchiv verfolgen</title>
			<para>
			Für jede Datei in einer Arbeitskopie zeichnet Subversion zwei
			wesentliche Informationen im <filename>.svn</filename>
			Administrationsordner auf:
			</para>
			<itemizedlist>
				<listitem>
					<para>Auf welcher Revision die Datei basiert (dies wird
					auch <firstterm>Arbeitsrevision</firstterm> genannt)
					</para>
				</listitem>
				<listitem>
					<para>Der Zeitpunkt, an dem die Datei zum letzten Mal mit
					dem Projektarchiv aktualisiert wurde.
					</para>
				</listitem>
			</itemizedlist>
			<para>
			Mittels dieser Informationen ist Subversion in der Lage, durch
			Anfragen an das Projektarchiv herauszufinden, in welchem der folgenden
			vier Zustände eine Datei ist:
			</para>
			<variablelist>
				<varlistentry>
					<term>Unverändert und aktuell</term>
					<listitem>
						<para>
						Die Datei wurde weder lokal noch im Projektarchiv
						verändert. Eine <command>Übertragung</command>
						und auch eine <command>Aktualisierung</command>dieser
						Datei bewirkt nichts.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Lokal verändert und aktuell</term>
					<listitem>
						<para>
						Die Datei wurde lokal verändert, aber nicht im
						Projektarchiv. Eine <command>Übertragung</command> bewirkt
						ein Speichern dieser Änderungen im Projektarchiv. Eine
						<command>Aktualisierung</command> hingegen bewirkt nichts.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Unverändert, aber nicht aktuell</term>
					<listitem>
						<para>
						Die Datei wurde lokal nicht verändert, jedoch gibt es
						Änderungen an der Datei im Projektarchiv. Eine
						<command>Übertragung</command> bewirkt nichts, jedoch
						wird ein <command>Aktualisieren</command> die Änderungen
						aus dem Projektarchiv in die lokale Kopie der Datei einfügen.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Lokal verändert und nicht aktuell</term>
					<listitem>
						<para>
						Die Datei wurde lokal und im Projektarchiv verändert.
						Ein <command>Übertragen</command> wird mit einer Fehlermeldung 
            fehlschlagen. Die Datei muss zuerst <command>
						Aktualisiert</command> werden, um die Änderungen aus
						dem Projektarchiv in die lokale Kopie einzufügen. Falls
						Subversion nicht in der Lage sein sollte, diese
						Änderungen selbst zusammenzuführen, muss der Benutzer den
						Konflikt manuell lösen.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</sect2>
	</sect1>
	<sect1 id="tsvn-ch-2-sect-4">
		<title>Zusammenfassung</title>
		<para>
		Wir haben eine Anzahl von grundlegenden Subversion-Konzepten in diesem
		Kapitel behandelt:
		</para>
		<itemizedlist>
			<listitem>
				<para>
				Wir haben den Begriff des zentralen Projektarchivs, der Arbeitskopie
				und der Revisionen eingeführt.
				</para>
			</listitem>
			<listitem>
				<para>
				Wir haben einige einfache Beispiele gezeigt, wie zwei Mitarbeiter
				Subversion benutzen können, um Änderungen zur Verfügung zu stellen
				und Änderungen von anderen zu übernehmen mittels des
				Kopie-Ändern-Zusammenführen Modells.
				</para>
			</listitem>
			<listitem>
				<para>
				Wir sprachen ein wenig darüber, wie Subversion Informationen
				in der Arbeitskopie verfolgt und verwaltet.
				</para>
			</listitem>
		</itemizedlist>
	</sect1>
</chapter>
<!--
local variables:
sgml-parent-document: ("book.xml" "chapter")
end:
-->
