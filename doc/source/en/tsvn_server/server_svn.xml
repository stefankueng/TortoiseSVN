<?xml version="1.0" encoding="UTF-8"?>
<sect1 id="tsvn-serversetup-svnserve">
	<title>Svnserve Based Server</title>
	<sect2 id="tsvn-serversetup-svnserve-1">
		<title>Introduction</title>
		<indexterm>
			<primary>svnserve</primary>
		</indexterm>
		<para>
			There may be situations where it's not possible to use Apache as
			your server.  Fortunately, Subversion includes Svnserve
			- a lightweight stand-alone server which uses a custom protocol
			over an ordinary TCP/IP connection.
		</para>
		<para>
			In most cases svnserve is easier to setup
			and runs faster than the Apache based server.
		</para>
	</sect2>
	<sect2 id="tsvn-serversetup-svnserve-2">
		<title>Installing svnserve</title>
		<para>
			<orderedlist>
				<listitem>
					<para>
						Get the latest version of Subversion from
						<ulink url="http://subversion.tigris.org/servlets/ProjectDocumentList?folderID=91">
							<citetitle>http://subversion.tigris.org/servlets/ProjectDocumentList?folderID=91</citetitle>
						</ulink>.
					</para>
				</listitem>
				<listitem>
					<para>
						Run the Subversion installer. If you run the installer on
						your server you can skip step 3.
					</para>
				</listitem>
				<listitem>
					<para>
						Open the windows-explorer, go to the
						installation directory of Subversion (usually
						<filename>C:\Program Files\Subversion</filename>) and in the
						<filename>bin</filename> directory, find the files
						<filename>svnserve.exe</filename>,
						<filename>libdb42.dll</filename>,
						<filename>libeay32.dll</filename> and
						<filename>ssleay32.dll</filename>
						- copy these files into a directory on your server e.g.
						<filename>c:\svnserve</filename>
					</para>
				</listitem>
			</orderedlist>
		</para>
	</sect2>
	<sect2 id="tsvn-serversetup-svnserve-3">
		<title>Running svnserve</title>
		<para>
			Now that svnserve is installed, you need it running
			on your server.  The simplest approach is to run the following from a DOS
			shell or create a windows shortcut:
<screen>
svnserve.exe -d
</screen>
			svnserve will now start waiting for incoming requests
			on port 3690. The -d switch tells svnserve to run
			as a daemon process, so it will always exist until it is manually terminated.
		</para>
		<para>
			If you have not yet created a repository, follow the
			instructions given with the Apache server setup
			<xref linkend="tsvn-serversetup-apache-4"/>.
		</para>
		<para>
			To test that svnserve is working, use
			<menuchoice>
				<guimenu>TortoiseSVN</guimenu>
				<guimenuitem>Repo-Browser</guimenuitem>
			</menuchoice>
			to view a repository.
		</para>
		<para>
			Assuming your repository is located in
			<filename>c:\repos\TestRepo</filename>, and your server is called
			<filename>localhost</filename>, enter:
<screen>
svn://localhost/repos/TestRepo
</screen>
			when prompted by the repo browser.
		</para>
		<para>
			You can also increase security and save time entering Url's with
			svnserve by using the -r switch to set the root
			location and restrict access to a specified directory on the server:
<screen>
svnserve.exe -d -r drive:\path\to\repository
</screen>
			Using the previous test as a guide, svnserve would now run as:
<screen>
svnserve.exe -d -r c:\repos
</screen>
			And in TortoiseSVN our repo-browser Url is now shortened to:
<screen>
svn://localhost/TestRepo
</screen>
			Note that the -r switch is also needed if your repository is located on
			a different partition or drive than the location of svnserve
			on your server.
		</para>
		<warning>
			<para>
				Do not create or access a Berkeley DB repository on a network share.
				It <emphasis>cannot</emphasis> exist on a remote filesystem.
				Not even if you have the network drive mapped to a drive letter.
				If you attempt to use Berkeley DB on a network share,
				the results are unpredictable - you may see mysterious errors
				right away, or it may be months before you discover that your
				repository database is subtly corrupted.
			</para>
		</warning>
		<tip>
			<title>Run svnserve as a Service</title>
			<para>
				If you are concerned about always having a user logged in on your server,
				or worried about someone shutting down svnserve or
				forgetting to restart it after a reboot, it is possible to run
				svnserve as a windows service using a wrapper
				like the one available at
				<ulink url="http://dark.clansoft.dk/~mbn/svnservice/">
					<citetitle>svnservice</citetitle>
				</ulink>
				provided by Magnus Norddahl.
				Note that SVNService installs svnserve as a manual service,
				you may want to change this to automatic.
			</para>
			<para>
				More generic tools like
				<ulink url="http://www.firedaemon.com/">
					<citetitle>firedaemon</citetitle>
				</ulink>
				will also work. Note that you will still need to run
				svnserve with the -d switch.
			</para>
		</tip>
	</sect2>
	<sect2 id="tsvn-serversetup-svnserve-4">
		<title>Authentication with svnserve</title>
		<para>
			The default svnserve setup provides anonymous read-only access.
			This means that you can use an <filename>svn://</filename> Url
			to checkout and update, or use the repo-browser in TortoiseSVN
			to view the repository, but you won't be able to commit any changes.
		</para>
		<para>
			To enable write access to a repository, you need to edit the
			<filename>conf/svnserve.conf</filename> file in your repository
			directory.  This file controls the configuration of the
			svnserve daemon, and also contains useful documentation.
		</para>
		<para>
			You can enable anonymous write access by simply setting:
<screen>
[general]
anon-access = write
</screen>
			However, you will not know who has made changes to a repository,
			as the <literal>svn:author</literal> property will be empty.
			You will also be unable to control who makes changes to a
			repository.  This is a somewhat risky setup!
		</para>
		<para>
			One way to overcome this is to create a password database:
<screen>
[general]
anon-access = none
auth-access = write
password-db = userfile
</screen>
			Where <literal>userfile</literal> is a file which exists in
			the same directory as <filename>svnserve.conf</filename>.  This
			file can live elsewhere in your filesytem (useful for when you
			have multiple repositories which require the same access rights)
			and may be referenced using an absolute path, or a path
			relative to the <filename>conf</filename> directory.
			If you include a path, it must be written
			<filename>/the/unix/way</filename>.
			Using \ or drive letters will not work.
			The <filename>userfile</filename> should have a structure of:
<screen>
[users]
username = password
...
</screen>
			This example would deny all access for unauthenticated
			(anonymous) users, and give read-write access to users listed
			in <filename>userfile</filename>.
		</para>
		<tip>
			<para>
				If you maintain multiple repositories using the same password
				database, the use of an authentication realm will make life
				easier for users, as TortoiseSVN can cache your credentials
				so that you only have to enter them once.  More information
				can be found in the Subversion book, specifically in the 
				sections
				<ulink url="http://svnbook.red-bean.com/en/1.1/ch06s03.html#svn-ch-6-sect-3.2.1">
					<citetitle>Create a 'users' file and realm</citetitle>
				</ulink>
				and 
				<ulink url="http://svnbook.red-bean.com/en/1.1/ch06s02.html#svn-ch-6-sect-2.2">
					<citetitle>Client Credentials Caching</citetitle>
				</ulink>
			</para>
		</tip>
	</sect2>
	<sect2 id="tsvn-serversetup-svnserve-5">
		<title>Authentication with svn+ssh</title>
		<para>
			Another way to authenticate users with a svnserve
			based server is to use a secure shell (SSH) to tunnel
			requests through.
		</para>
		<para>
			With this approach, svnserve is not run as a daemon
			process, rather, the secure shell starts svnserve
			for you, running it as the SSH authenticated user. To
			enable this, you need a secure shell daemon on your server.
		</para>
		<para>
			It is beyond the scope of this documentation to detail the
			installation and setup of a secure shell, however you can
			find further information in the
			<ulink url="http://tortoisesvn.sourceforge.net/?q=search/node/ssh">
				<citetitle>TortoiseSVN FAQ</citetitle>
			</ulink>
		</para>
		<para>
			Further information about svnserve can be found in the
			<ulink url="http://svnbook.red-bean.com">
				<citetitle>SVN book</citetitle>
			</ulink>.
		</para>
	</sect2>
</sect1>
