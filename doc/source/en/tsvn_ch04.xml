<chapter id="tsvn-DUG">
	<title>Daily Use Guide</title>
	<simplesect>
		<para>
			This document describes day to day usage of the TortoiseSVN client.
			It is <emphasis>not</emphasis> an introduction to version control
			systems, and <emphasis>not</emphasis> an introduction to Subversion
			(SVN). It is more like a place you may turn to when you know
			approximately what you want to do, but don't quite remember how
			to do it.
		</para>
		<para>
			If you need an introduction to version control with Subversion,
			then we recommend you read the fantastic book:
			<ulink url="http://svnbook.red-bean.com/">
				<citetitle>Subversion: The Definitive Guide</citetitle>
			</ulink>.
		</para>
		<para>
			This document is also a work in progress, just as TortoiseSVN and
			Subversion are. If you find any mistakes, please report them to
			the mailing list so we can update the documentation. Some of
			the screenshots in the Daily Use Guide (DUG) might not reflect the
			current state of the software. Please forgive us. We're working on
			TortoiseSVN in our free time.
		</para>
		<para>
			<itemizedlist>
				<listitem>
					<para>
					You should have already installed TortoiseSVN
					</para>
				</listitem>
				<listitem>
					<para>
					You should be familiar with version control systems
					</para>
				</listitem>
				<listitem>
					<para>
					You should know the basics of Subversion
					</para>
				</listitem>
				<listitem>
					<para>
					You should have already set up a server and have access
					to a repository
					</para>
				</listitem>
			</itemizedlist>
		</para>
	</simplesect>
	<!-- ================================================================= -->
	<!-- ======================== SECTION 0 ============================== -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-DUG-general">
		<title>Handling TortoiseSVN</title>
		<para>
			<figure id="tsvn-DUG-context-dir-control">
				<title>Context menu for a directory under version control</title>
				<graphic fileref="images/ContextMenuDirControl.png"/>
			</figure>
			All TortoiseSVN commands are invoked from the context menu of the windows explorer.
			Most are directly visible, when you <action>right click</action> onto a file or folder.
			The commands that are available depend on whether the file or folder or it's parent
			folder is under version control or not.
		</para>
		<para>
		Other commands are available as drag handlers, when you <action>right drag</action>
		files or folders to a new location inside working copies or when you 
		<action>right drag</action> a non-versioned file or folder into a directory 
		which is under version control.
		</para>
	</sect1>
	<!-- ================================================================= -->
	<!-- ======================== SECTION 0 ============================== -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-DUG-authentication">
		<title>Authentication</title>
		<para>
			If the repository that you are trying to access is password protected, an 
			authentication Dialog will show up.
			<figure id="tsvn-fig-authentication">
				<title>Authentication Dialog</title>
				<graphic fileref="images/Authenticate.png"/>
			</figure>
			Enter you username and password. The checkbox will make TortoiseSVN store
			the credentials in Subversion's default directory: 
			<filename>$APPDATA\Subversion\auth</filename>. One file for each server
			that you access. If you want to make Subversion and TortoiseSVN forget your
			credentials, you have to delete the corresponding file(s).
			<tip>
			<para>
			If you have to authenticate against a Windows NT domain, enter your username
			including the domain name, like: <action>MYDOMAIN/johnd</action>.
			</para>
			</tip>
		</para>
	</sect1>
	<!-- ================================================================= -->
	<!-- ======================== SECTION 1 ============================== -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-DUG-import">
		<title>Importing Data Into A Repository</title>
		<?dbhh topicname="HIDD_IMPORT"?>
		<sect2 id="tsvn-DUG-import-1">
			<title>Repository Layout</title>
			<para>
			Before you import your data into the repository you should
			first think about how you want to organize your data. If you
			use one of the recommended layouts you will later have it much
			easier.
			</para>
			<para>
			There are some standard, recommended ways to organize a
			repository. Most people create a <filename>trunk</filename>
			directory to hold the "main line" of development, a
			<filename>branches</filename> directory to contain branch
			copies, and a <filename>tags</filename> directory to contain
			tag copies. If a repository holds only one project, then
			often people create these top-level directories:
			</para>
			<screen>
/trunk
/branches
/tags
			</screen>
			<para>
			If a repository contains multiple projects, people often
			index their layout by branch:
			</para>
			<screen>
/trunk/paint
/trunk/calc
/branches/paint
/branches/calc
/tags/paint
/tags/calc
			</screen>
			<para>&hellip;or by project:</para>
			<screen>
/paint/trunk
/paint/branches
/paint/tags
/calc/trunk
/calc/branches
/calc/tags
			</screen>
			<para>
			Of course, you're free to ignore these common layouts.  You
			can create any sort of variation, whatever works best for you or
			your team.  Remember that whatever you choose, it's not a
			permanent commitment.  You can reorganize your repository at any
			time.  Because branches and tags are ordinary directories,
			TortoiseSVN can move or rename them however you wish.  Switching
			from one layout to another is just a matter of issuing a series
			of server-side moves; If you don't like the way things are
			organized in the repository, just juggle the directories around.
			</para>
			<para>
			So if you haven't already created a basic folder structure inside
			your repository you should do that now:
			<orderedlist>
					<listitem>
						<para>create a new empty folder on your harddrive
				</para>
					</listitem>
					<listitem>
						<para>create your desired folder structure inside
				that folder &mdash; don't put any files in it yet!
				</para>
					</listitem>
					<listitem>
						<para>import this structure into the repository
				</para>
					</listitem>
				</orderedlist>
			</para>
		</sect2>
		<sect2 id="tsvn-DUG-import-2">
			<title>Import</title>
			<para>
			Before you import your project into a repository you should:
			<orderedlist>
					<listitem>
						<para>Remove all files which are not needed to
				build the project (temporary files, files which are
				generated by a compiler e.g. *.obj, compiled
				binaries, ...)</para>
					</listitem>
					<listitem>
						<para>Organize the files in folders and
				subfolders. Although it is possible to rename/move
				files later it is highly recommended to get your project's
				structure straight before importing!</para>
					</listitem>
				</orderedlist>
			</para>
			<para>
			Now select the <emphasis>parent import</emphasis> folder of your
			directory structure in the windows explorer and <action>right click
			</action> to open the context menu. Select the command
			<menuchoice><guimenuitem>Import...</guimenuitem></menuchoice> which brings up a dialog
			box:
				<figure id="tsvn-DUG-import-dia-1">
					<title>The Import dialog</title>
					<graphic fileref="images/Import.png"/>
				</figure>
			</para>
			<para>
			In this dialog you have to enter the URL of the repository into
			which you want to import your project.
			</para>
			<para>The import message is used as a log message. Since you
			usually just started your project a default "initial import"
			is filled in by TortoiseSVN.
			</para>
			<para>
				<note>Files which match the exclude pattern are <emphasis>not</emphasis>
				imported.
				</note>
			</para>
			<para>
			As soon as you press the OK button TortoiseSVN imports the
			complete directory tree including all files into the repository.
			Please note that this does <emphasis>NOT</emphasis> put your
			copy of the project under version control yet! To get a
			versioned working copy you need to do a Checkout of the
			version you just imported.
			</para>
		</sect2>
	</sect1>
	<!-- ================================================================= -->
	<!-- ======================== SECTION 2 ============================== -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-DUG-checkout">
		<title>Checking Out A Working Copy</title>
		<?dbhh topicname="HIDD_CHECKOUT"?>
		<para>
			<figure id="tsvn-DUG-checkout-dia-1">
				<title>The Checkout dialog</title>
				<graphic fileref="images/Checkout.png"/>
			</figure>
			To obtain a working copy you need to do a <firstterm>checkout</firstterm>
			from a repository.
		</para>
		<para>
		Select a directory in windows explorer where you want to place
		your working copy. <action>Right-click</action> to pop up the
		context menu and select the command <menuchoice><guimenuitem>Checkout...</guimenuitem></menuchoice>
		which brings up the following dialog box:
		If you enter a folder name that does not yet exist, then a
		directory with that name is created.
		</para>
		<para>
		It is recommended that you check out only the "trunk" part of the
		directory tree. If you specify the parent path of the
		directory tree in the URL then you might end up with a full
		harddisk since you will get a copy of the entire repository tree
		including every branch and tag of your project!
		</para>
		<tip>
			<title>Exporting</title>
			<para>
			Sometimes you may want a working copy without any of those
			<filename>.svn</filename> directories, e.g. to create a zipped
			tarball of your source. Instead of making a copy and then delete
			all those directories manually, TortoiseSVN offers the command
			<menuchoice><guimenuitem>Export...</guimenuitem></menuchoice>. If you execute this command
			on your working copy you'll be asked for a place to save the
			"clean" working copy.
			</para>
		</tip>
	</sect1>
	<!-- ================================================================= -->
	<!-- ======================== SECTION 3 ============================== -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-DUG-wcstatus">
		<title>Getting Status Information</title>
		<para>
		While you are working on your working copy you often need to know
		which files you have changed/added/removed or renamed, or even which
		files got changed and committed by others.
		</para>
		<sect2 id="tsvn-DUG-wcstatus-1">
			<title>Icon Overlays</title>
			<para>
				<figure id="tsvn-DUG-wcstatus-dia-1">
					<title>Explorer showing icon overlays</title>
					<graphic fileref="images/Overlays.png"/>
				</figure>
			Now that you have checked out a working copy from a Subversion
			repository you can see your files in the windows explorer with
			changed icons. This is one of the reasons why TortoiseSVN is so
			popular. TortoiseSVN adds a so called overlay icon to each
			file icon which overlaps the original file icon. Depending on
			the Subversion status of the file the overlay icon is different.
			 <graphic fileref="images/InSubVersionIcon.png"/>A fresh checked out working
			 copy has a green checkmark as overlay.
			That means the Subversion status is 	<literal>normal</literal>.
			<graphic fileref="images/ModifiedIcon.png"/>As soon as you start editing a file,
			the status changes to <literal>modified</literal>
			and the icon overlay then changes to a red exclamation
			mark. That way you can easily see which files were changed
			since you last updated your working copy and need to be commited.
			<graphic fileref="images/ConflictIcon.png"/>If during an update a <literal>conflict</literal> occurs then
			the icon changes to a yellow exclamation mark.
			<graphic fileref="images/AddedIcon.png"/> The plus sign tells you that a file or folder has been scheduled to be
			<literal>added</literal> to version control.
			<graphic fileref="images/DeletedIcon.png"/> This Icon shows you that some files or folders inside the current folder
			have been scheduled do be <literal>deleted</literal> from version control
			or a file under version control is missing in a folder.
			</para>
			<para>
			The folder icons also have icon overlays displayed. By default,
			only the status of the folder itself is shown. But you can
			change that behaviour in the settings (context menu, Settings...)
			so that the status of folders is shown recursively. This will
			make the icon overlays for folders slower and is therefore
			not recommended on slower machines. I'm using that setting on
			my machine (PIII, 700MHz, 512MB RAM) without problems. With this
			setting each folder shows the status of all files below it,
			where status <literal>conflict</literal> overrides <literal>modified</literal>
			and <literal>modified</literal> overrides <literal>normal</literal>.
			So you can easily see if there's a file with a conflict or a modified file in a folder.
			<note>
				<title>Slow Overlays</title>
				<para>
				You may notice that if you enable the recursive overlay for folders
				that the explorer slows down remarkably when browsing working
				copies. This depends on how big your working copy is and how much
				RAM Windows can use for file index caching. Usually it's only
				very slow the first time you browse such a directory &mdash; if
				you browse the same directory later again it's much faster.
				</para>
			</note>
			</para>
			<para>
			Unlike <application>TortoiseCVS</application> (the CVS shell
			integration) no overlay icon for unversioned files is shown.
			We do this because the number of icon overlays are limited system wide
			and should be used economically.
			</para>
		</sect2>
		<sect2 id="tsvn-DUG-wcstatus-2">
			<title>Status Of The Repository</title>
			<para>
				<figure id="tsvn-DUG-wcstatus-dia-2">
					<title>Check for Updates</title>
					<graphic fileref="images/RepoStatus.png"/>
				</figure>
			It's often very useful to know which files got changed and
			committed by others. That's where the command <menuchoice><guimenuitem>Check
			For Updates...</guimenuitem></menuchoice> comes in handy.
			This dialog will show you every file that has changed in any
			way either in your working copy and in the repository. That way
			you can check before an update if there's a possible conflict.
			</para>
			<para>
			From the context menu of the dialog you can show a diff of the
			changes or revert your local changes. TortoiseSVN automatically
			downloads the most recent version from the repository to do
			the diff.
			</para>
			<tip>
				<title>Other Possibilities</title>
				<para>
					<menuchoice><guimenuitem>The Check for Updates..</guimenuitem></menuchoice> dialog is propably not the best
				choice if you don't have a network connection available.
				In this case you can also get the local status of all your
				files by clicking <menuchoice><guimenuitem>Commit...</guimenuitem></menuchoice>. The
				commit dialog shows you a similar list of files like the
				<menuchoice><guimenuitem>Check for Updates...</guimenuitem></menuchoice> dialog, but without contacting the
				repository. if you dont' want to commit just press <guibutton>Cancel</guibutton>.
				</para>
			</tip>
		</sect2>
	</sect1>
	<!-- ================================================================= -->
	<!-- ======================== SECTION 4 ============================== -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-DUG-update">
		<title>Update Your Working Copy With Changes From Others</title>
		<para>
			<figure id="tsvn-DUG-update-dia-1">
				<title>Progress dialog showing an update in progress</title>
				<graphic fileref="images/UpdateProgress.png"/>
			</figure>
			<figure id="tsvn-DUG-update-dia-2">
				<title>Progress dialog showing finished update</title>
				<graphic fileref="images/UpdateFinished.png"/>
			</figure>
		Occasionally you may want changes done by others to get
		incorporated in your local working copy. The process of
		getting changes from the server to your local copy is
		known as <literal>updating</literal>. Updating may be done on
		single files, a set of selected files, or recursively on
		entire directory hierarchies. To update, select the files
		and/or directories you want, <action>right click</action> and select
		<menuchoice><guimenuitem>Update</guimenuitem></menuchoice> in the explorer context menu.
		A window will pop up displaying the progress of the
		update as it runs.
		Changes done by others will be merged into your files,
		keeping any changes you may have done to the same files.
		The repository is <emphasis>not</emphasis> affected by an update.
		</para>
		<para>
		If you get any <literal>conflicts</literal> during an update (this
		can happen if others changed the same lines in the same file as
		you did and those changes don't match) then the dialog shows those
		conflicts in red. You can <action>doubleclick</action> on these lines to start
		the external merge tool to resolve the conflicts.
		</para>
		<para>
		TortoiseSVN also allows you to update your working copy to a specific
		revision, not only to the most recent one. This command is called
		<menuchoice><guimenuitem>Update to Revision...</guimenuitem></menuchoice> and first opens
		a dialog where you can enter the required revision.
		</para>
		<para>
		The <menuchoice><guimenuitem>Update to Revision...</guimenuitem></menuchoice> command allows
		you to revert your working to an earlier revision. Say e.g. your
		working copy is at revision 100, but you want your working copy
		to reflect the state which it had in revision 50 &mdash; then simply
		update to revision 50.
		</para>
		<tip>
			<title>Multiple Files/Folders</title>
			<para>
		If you select multiple files and folders in the explorer and then
		select <menuchoice><guimenuitem>Update...</guimenuitem></menuchoice>, all of those files/folders
		are updated one by one. TortoiseSVN makes sure that all files/folders
		which are from the same repository are updated to the exact same
		revision! Even if between those updates another commit occured.
		</para>
		</tip>
	</sect1>
	<!-- ================================================================= -->
	<!-- ======================== SECTION 5 ============================== -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-DUG-conflicts">
		<title>Resolving Conflicts</title>
		<para>
		Once in a while, you will get a <emphasis>conflict</emphasis> when
		you update your files from the repository. A conflict
		occurs when two or more developers have changed the same
		few lines of a file. As Subversion knows nothing of your
		project, it leaves resolving the conflicts to the developers.
		Whenever a conflict is reported, you should open the file in
		question, and search for lines starting with the string
		<literal>&lt;&lt;&lt;&lt;&lt;&lt;&lt;
		</literal>. The conflicting area is marked like this:
<screen>
&lt;&lt;&lt;&lt;&lt;&lt;&lt; filename
    your changes
=======
    code merged from repository
&gt;&gt;&gt;&gt;&gt;&gt;&gt; revision
</screen>
		Also, for every conflicted file Subversion places three
		additional files in your directory:
		<variablelist>
				<varlistentry>
					<term>filename.*.mine</term>
					<listitem>
						<para>This is your file as it existed in your
				working copy before you updated your working copy
				&mdash; that is, without conflict markers. This file has
				your latest changes in it and nothing else.
				</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>filename.*.rOLDREV</term>
					<listitem>
						<para>This is the file that was the BASE
				revision before you updated your working copy. That is,
				it the file that you checked out before you made
				your latest edits.
				</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>filename.*.rNEWREV</term>
					<listitem>
						<para>This is the file that your Subversion
				client just received from the server when you updated
				your working copy. This file corresponds to the HEAD
				revision of the repository.
				</para>
					</listitem>
				</varlistentry>
			</variablelist>
		Here * represents some random digits that Subversion chooses,
		OLDREV is the revision number of the file in your .svn directory,
		and NEWREV is the revision number of the repository HEAD.
		</para>
		<para>
		You can either launch an external merge tool / conflict
		editor with the <menuchoice><guimenuitem>Edit Conflict</guimenuitem></menuchoice>
		context menu or you can use any other editor to manually
		resolve the conflict. You should decide what the code
		should look like and do the necessary changes.
		</para>
		<para>
		Afterwards execute the command <menuchoice><guimenuitem>Resolved</guimenuitem></menuchoice>
		from the context menu and commit your modifications to the
		repository. Please note that the Resolve command does not-really
		resolve the conflict. It just removes the <filename>filename*.mine
		</filename> and <filename>filename*.r*</filename> files, to
		allow you to commit your changes.
		</para>
	</sect1>
	<!-- ================================================================= -->
	<!-- ======================== SECTION 5 ============================== -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-DUG-commit">
		<title>Sending Your Changes To The Repository</title>
		<?dbhh topicname="HIDD_LOGPROMPT"?>
		<para>
			<figure id="tsvn-DUG-commit-dia-1">
				<title>The Commit dialog</title>
				<graphic fileref="images/Commit.png"/>
			</figure>
		Sending the changes you made to your working copy is known as
		<firstterm>committing</firstterm> the changes. But before you
		commit you have to make sure that your working copy is up to
		date. You can either make an update directly. Or you can
		<menuchoice><guimenuitem>check for updates</guimenuitem></menuchoice> first, to see which
		files have changed locally or on the server.
		</para>
		<para>
		If your working copy is up to date and there are no conflicts,
		you are ready to commit your changes. Select any file
		and/or folders you want to commit and select <menuchoice><guimenuitem>Commit
		</guimenuitem></menuchoice> from the context menu.
		</para>
		<para>
		The commit dialog will show you every changed file,
		including added, deleted and unversioned files. If you don't
		want a changed file to be committed, just uncheck that
		file. If you want to include an unversioned file,
		just check that file to add it to the commit.
		<figure id="tsvn-DUG-commit-dia-2">
			<title>The Context Menu Of The Commit Dialog</title>
			<graphic fileref="images/CommitContextMenu.png"/>
		</figure>

		<tip>
				<title>Many unversioned files in the commit dialog</title>
				<para>If you think that the TSVN commit dialog shows you too
			many unversioned (e.g. compiler generated or editor backup)
			files, there are several ways to handle this. You can:
		<itemizedlist>
						<listitem>
							<para>include the file into the list of
				temporary files on the settings page. This will affect
				every working copy you have.</para>
						</listitem>
						<listitem>
							<para>add the file to the svn:ignore list
				using the <menuchoice><guimenuitem>Add to ignore list</guimenuitem></menuchoice>
				context menu. This will only affect the directory on
				which you set the <literal>svn:ignore</literal> property.
				Using the SVN Property Dialog, you can alter the
				<literal>svn:ignore</literal> property for a directory.
				</para>
						</listitem>
					</itemizedlist>
				</para>
			</tip>
		</para>
		<figure id="tsvn-DUG-commit-dia-3">
			<title>The Progress dialog showing a commit in progress</title>
			<graphic fileref="images/CommitProgress.png"/>
		</figure>
		<para>
		Doubleclicking on any modified file in the commit dialog
		will launch the external diff tool to show your changes.
		</para>
		<para>
		After pressing OK, a dialog appears displaying
		the progress of the commit.
		</para>
	</sect1>
	<!-- ================================================================= -->
	<!-- ======================== SECTION 6 ============================== -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-DUG-adding">
		<title>Adding New Files And Directories</title>
		<?dbhh topicname="HIDD_ADD"?>
		<para>
			<figure id="tsvn-DUG-adding-dia-1">
				<title>Explorer context menu for unversioned files</title>
				<graphic fileref="images/ContextMenuFileNoControl.png"/>
			</figure>
		If you created new files and/or directories during
		your development process the you need to add them
		to source control too. Select the file(s) and/or directory
		and select the command <menuchoice><guimenuitem>Add</guimenuitem></menuchoice> from
		the context menu.
		</para>
		<para>
		After you added the files/directories to source control
		the file appears with a "added" icon overlay which means you
		first have to commit your working copy to make those
		files/directories available to other developers.
		Adding a file/directory does <emphasis>not</emphasis> affect
		the repository!
		</para>
		<para>
			<caution>
				<title>Adds are recursive!</title>
				<para>
			If you add a directory then TortoiseSVN automatically
			adds all files in this directory recursively.
			So be careful with that command and make sure you don't
			have any temporary or compiler generated files
			in that directory!
			</para>
			</caution>
		</para>
		<para>
		To add files from outside your working copy you can use
		the drag&ndash;and&ndash;drop handler:
		<orderedlist>
				<listitem>
					<para>select the files you want to add</para>
				</listitem>
				<listitem>
					<para>
						<action>right&ndash;drag</action> them
			to the new location inside the working copy.</para>
				</listitem>
				<listitem>
					<para>release the right mouse button</para>
				</listitem>
				<listitem>
					<para>in the popup menu select
			<menuchoice><guimenuitem>add files to Subversion here</guimenuitem></menuchoice>.
			The files will then be copied to the working copy and
			added to version control.</para>
				</listitem>
			</orderedlist>
		</para>
	</sect1>
	<!-- ================================================================= -->
	<!-- ======================== SECTION 7 ============================== -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-DUG-renaming">
		<title>Deleting, Renaming And Moving</title>
		<?dbhh topicname="HIDD_RENAME"?>
		<para>
			<figure id="tsvn-DUG-renaming-dia-1">
				<title>Explorer context menu for versioned files</title>
				<graphic fileref="images/ContextMenuFileControl.png"/>
			</figure>
		Unlike CVS, Subversion allows renaming and moving of files and
		folders. So there are menu entries for delete and rename
		in the TortoiseSVN submenu.
		</para>
		<para>
		If you delete a file/directory using TSVN, the file is
		removed from your working copy and marked for deletion.
		The file's parent folder shows a "deleted" icon overlay.
		You can always get the file back, if you call <menuchoice><guimenuitem>revert</guimenuitem></menuchoice>
		on the parent folder.
		</para>
		<para>
		If you want to move files inside a working copy,
		use the drag&ndash;and&ndash;drop handler again:

		<orderedlist>
				<listitem>
					<para>select the files or directories you want to move</para>
				</listitem>
				<listitem>
					<para>
						<action>right&ndash;drag</action> them to the
			new location inside the working copy</para>
				</listitem>
				<listitem>
					<para>release the right mouse button</para>
				</listitem>
				<listitem>
					<para>in the popup menu select <menuchoice><guimenuitem>move files in Subversion to here</guimenuitem></menuchoice>
					</para>
				</listitem>
			</orderedlist>
		If a file is deleted via the explorer but not removed from
		version control (i.e. you delete a file as usual), the commit
		dialog shows those files and lets you remove them from
		version control too before the commit. So it doesn't really
		matter, if you forget to delete the file with TortoiseSVN as
		you are supposed to do.
		</para>
	</sect1>
	<!-- ================================================================= -->
	<!-- ======================== SECTION 8 ============================== -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-DUG-revert">
		<title>Undo Changes</title>
		<para>
		If you want to undo all changes you made in a file since
		the last update you need to select the file, <action>right&ndash;click
		</action> to pop up the context menu and then select
		the command <menuchoice><guimenuitem>revert</guimenuitem></menuchoice> in the TortoiseSVN
		submenu. But be sure that you really want to do that because
		all your changes to the selected file or the entire directory tree since
		your last commit will be lost!
		</para>
		<para>
		If you are not sure about your changes, copy your working
		directory to a safe location, <action>revert</action> and use a
		tool that's capable of diffing directories like <application>WinDiff
		</application>, <application>BeyondCompare</application> or
		<application>ExamDiff</application>, to see what has happened.
		</para>
		<para>
		If you accidentally deleted a file and want to get it
		back without reverting everything, you can commit all
		changed files inside the directory to the repository and
		do a revert on the working directory. This will retrieve
		all files you deleted since your last commit.
		</para>
	</sect1>
	<!-- ================================================================= -->
	<!-- ======================== SECTION 9 ============================== -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-DUG-propertypage">
		<title>Get/Set Information About Files/Directories</title>
		<para>
			<figure id="tsvn-DUG-propertypage-dia-1">
				<title>Subversion property page</title>
				<graphic fileref="images/Properties.png"/>
			</figure>
		Sometimes you want to have a more detailed information
		about a file/directory than just the icon overlay.
		You can get all the information Subversion provides in the
		explorer properties dialog. Just select the file or
		directory and select <menuchoice><guimenuitem>properties</guimenuitem></menuchoice> in the
		context menu (note: this is the normal properties menu entry
		the explorer provides, not in the TortoiseSVN submenu!).
		In the properties dialog box TortoiseSVN has added a new
		property page for files/folders under Subversion control.
		</para>
		<para>
		On the Subversion page you can see all relevant
		information about the selected file/directory. In
		addition you can read and set the subversion properties.
		</para>
	</sect1>
	<!-- ================================================================= -->
	<!-- ======================== SECTION 10 ============================= -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-DUG-showlog">
		<title>Revision Log Dialog</title>
		<?dbhh topicname="HIDD_LOGMESSAGE"?>
		<para>
		For every change you make and commit, you also have to provide
		a log message for that change. That way you can later find out
		what/why you made a change and you have a detailed log for your
		development process.
		</para>
		<para>
		The Log Dialog retrieves all those log messages and shows them
		to you, including a detailed list of all files you changed for
		each commit. But it does not only that &mdash; it provides a lot
		of commands you can use to get even more information of the
		project history.
		</para>
		<sect2 id="tsvn-DUG-showlog-1">
			<title>Invoking The Log Dialog</title>
			<para>
				<figure id="tsvn-DUG-showlog-1-dia-1">
					<title>The Log Dialog</title>
					<graphic fileref="images/LogMessages.png"/>
				</figure>

			There are several places from where you can show the Log Dialog:
			<itemizedlist>
					<listitem>
						<para>From the TortoiseSVN context submenu
				</para>
					</listitem>
					<listitem>
						<para>From the property page</para>
					</listitem>
					<listitem>
						<para>From the Progress Dialog after an update
				has finished. Then the Log Dialog only shows those revisions
				which were changed since your last update</para>
					</listitem>
				</itemizedlist>
			</para>
		</sect2>
		<sect2 id="tsvn-DUG-showlog-2">
			<title>Getting Additional Information</title>
			<para>
				<figure id="tsvn-DUG-showlog-2-dia-1">
					<title>The Log Dialog With Context Menu</title>
					<graphic fileref="images/LogContextMenu.png"/>
				</figure>
				<figure id="tsvn-DUG-showlog-2-dia-2">
					<title>The Log Dialog With Context Menu</title>
					<graphic fileref="images/LogContextMenu2.png"/>
				</figure>

			The Log Dialog has a context menu that allows you to

			<itemizedlist>
					<listitem>
						<para>Invoke an external Diff-Tool to show you
				all changes you made from the revision you selected to your
				working copy</para>
					</listitem>
					<listitem>
						<para>Save the selected revision to a file so you
				have an older version of that file. If the Log Dialog is shown
				for a folder this command is available from the filelist in
				the window where the log message is shown!</para>
					</listitem>
					<listitem>
						<para>Create a branch/tag from a selected revision.
				This is usefull e.g. if you forgot to create a tag and already
				committed some changes which weren't supposed to get into
				that release. </para>
					</listitem>
					<listitem>
						<para>Revert changes which were made in the selected
				revision. The changes are reverted in your working copy so
				this operation does <emphasis>not</emphasis> affect the
				repository at all!</para>
					</listitem>
					<listitem>
						<para>Invoke an externa Unified-Diff viewer. This
				operation is faster than invoking the "normal" external
				diff viewer because TortoiseSVN doesn't have to fetch the
				whole file but only the difference.</para>
					</listitem>
					<listitem>
						<para>Show a Unified-Diff of two selected revisions.
				This helps you find out what exactly changes between those
				two revisions. </para>
					</listitem>
					<listitem>
						<para>Update your working copy to a selected
				revision. Usefull if you want to have your working copy reflect
				a time in the past.</para>
					</listitem>
				</itemizedlist>
			</para>
		</sect2>
	</sect1>
	<!-- ================================================================= -->
	<!-- ======================== SECTION 11 ============================= -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-DUG-branchtag">
		<title>Branching / Tagging</title>
		<?dbhh topicname="HIDD_COPY"?>
		<?dbhh topicname="HIDD_SWITCH"?>
		<?dbhh topicname="HIDD_MERGE"?>
		<para>
		One of the features of version control systems is the ability
		to isolate changes onto a separate line of development.
		This line is known as a <firstterm>branch</firstterm>.
		Branches are usually used to try out new features without
		disturbing the main branch of development with compiler
		errors and bugs. As soon as the new feature of the branch
		is stable enough then the branch is <firstterm>merged</firstterm>
		back into the main branch (the trunk).
		</para>
		<para>
		Another feature of version control systems is the ability
		to mark particular revisions (e.g. a release version),
		so you can at any time recreate a certain build or
		environment. This proces is known as <firstterm>tagging</firstterm>.
		</para>
		<para>
		Subversion does not know a special command for branching
		or tagging. Subversion uses so called <literal>cheap copies</literal>
		instead. Cheap copies are something similar to links,
		which means that no actual copy is made but just a link
		to a specific file/revision is created.
		</para>
		<para>
		If you have imported your project with the recommended
		directory structure creating a branch or tag version is very simple:

		<figure id="tsvn-DUG-branchtag-dia-1">
			<title>The Branch/Tag Dialog</title>
			<graphic fileref="images/Copy.png"/>
		</figure>

		Select the parent folder of your working copy and select
		the command <menuchoice><guimenuitem>Branch/Tag...</guimenuitem></menuchoice> from the
		context menu. Enter the URL to the repository path for
		branches or tags into the dialog. So instead of <filename>/trunk/
		</filename> you would now use <filename>/tags/tagname</filename> where
		<filename>tagname</filename> would be e.g. "ProjectName_v1.10".

<screen>
    C:/SVNRepository/trunk/ProjectName/...
    C:/SVNRepository/trunk/AnotherProject/...
    C:/SVNRepository/branches/ProjectName_SpecialDebugBuildBasedOn_v1.09/
    C:/SVNRepository/tags/ProjectName_v1.10
</screen>

		If you press OK now, Subversion just creates a cheap copy
		of your selected Directory <emphasis>inside the repository</emphasis>.
		Creating a Branch / Tag.does <emphasis>not</emphasis> affect your working
		copy.
		</para>

		<sect2 id="tsvn-DUG-switch-1">
			<title>To Checkout or to Switch...</title>
			<para>
			...that is not really the question. While a checkout checks
			out everything from the desired branch into your working
			directory, a switch only transfers the changed data to your
			working copy. Good for the network load, good for your patience. :-)
			</para>
			<para>
			To be able to work with your freshly generated copy you
			have several ways to handle it. You can:
			<itemizedlist>
					<listitem>
						<para>do a <menuchoice><guimenuitem>Checkout</guimenuitem></menuchoice> of
				it again. You can check it out to any location on your
				local disk and you can create as many working copies
				from your repository as you like.</para>
					</listitem>
					<listitem>
						<para>Switch your current working copy to the
				newly created copy in the repository. Again select the
				parent folder of your project and select the command
				<menuchoice><guimenuitem>Switch...</guimenuitem></menuchoice> from the context menu.
				</para>
					</listitem>
				</itemizedlist>
				<figure id="tsvn-DUG-switch-dia-1">
					<title>The Switch Dialog</title>
					<graphic fileref="images/Switch.png"/>
				</figure>
			Here you enter the URL of the branch / tag you just created.
			Leave the checkbox <guibutton>newest revision</guibutton> active. Press ok and
			your working copy is switched to the new branch / tag.
			</para>
			<para>
			Only if you modify data, these modifications will be
			committed to the repository. The rest remains a cheap
			copy of the original.
			</para>
			<para>
			From now on working with branches or tags differs a bit:
			<itemizedlist>
					<listitem>
						<para>If you modify a Tag revision,
				TortoiseSVN will warn you if you try to commit to
				a <filename>/tags</filename> path in the repository.
				Be aware, that your local files are not write
				protected. So working on a tag revision is <emphasis>not a good	idea</emphasis>.
				That's the reason why we recommended
				the <filename>/trunk /branches /tags</filename> repository
				structure in the first place. </para>
					</listitem>
					<listitem>
						<para>If you modify a working copy created from
				a branch and commit, then all changes go to the new
				branch and not the main branch. Only the modifications
				are stored. The rest remains a cheap copy.</para>
					</listitem>
				</itemizedlist>
			</para>
		</sect2>
		<sect2 id="tsvn-DUG-merge-2">
			<title>Merging A Branch Back Into The Main Branch</title>
			<para>
				<figure id="tsvn-DUG-merge-dia-1">
					<title>The Merge Dialog</title>
					<graphic fileref="images/Merge.png"/>
				</figure>
				To merge revisions you need to go to a working copy of the
				branch in which you want to receive the changes, (normally the trunk).
				Select <menuchoice><guimenuitem>Merge...</guimenuitem></menuchoice> from the context menu.
				<orderedlist>
					<listitem>
						<para>In the <guilabel>Merge current branch with</guilabel> field enter the full
						folder url of the branch containing your changes. You may also
						click <guibutton>...</guibutton> to browse the repository and
						find the desired branch.</para>
					</listitem>
					<listitem>
						<para>In the <guilabel>From Revision</guilabel> field enter the initial revision number.
						This is the revision <emphasis>before</emphasis> the changes you want to merge.
						Revision numbers are auto-incremented after each commit. You want
						to start merging the changes before the revision number is auto-incremented. For example,
						if your log messages look something like this:
						<screen>
Rev Comments
39. Working on MyBranch
38. Working on trunk
37. Working on MyBranch
36. Create branch MyBranch
35. Working on trunk
34. Working on trunk
         ...
						</screen>If you now want to merge the changes from MyBranch into the trunk you have 
						to choose 36 as the <guilabel>From Revision</guilabel>. Not 37 as you might think.
						</para>
						<para>
						Click <guibutton>Find</guibutton> if you need to browse the logs to find this revision
						number. This will probably never be from
						revision 0.
						</para>
					</listitem>
					<listitem>
						<para>In the <guilabel>To Revision</guilabel> field enter the revision you want to merge
						the changes into (probably the main branch). You can specify single
						revisions to merge. This doesn't need to be HEAD.
						</para>
					</listitem>
					<listitem>
						<para>
						Click <guibutton>OK</guibutton> to complete the merge and enter a log message. Your
						log message should <emphasis>always</emphasis> include the revision numbers of this merge.
						If you want to apply another merge at a later time you will need to know what you
						have already merged. You can't apply a change more than once.
						Unfortunately merge information is not stored by Subversion. See the
						Subversion book for more information about this, (search for "repeated merge problem").
					  </para>
					</listitem>
				</orderedlist>
				The merge is now complete. It's a good idea to have a look at the merge and see if it's
				as expected. Merging is usually quite complicated. Conflicts often arise if
				the branch has drifted far from the trunk.
			</para>
			<para>
				If you want to keep this branch up to date with the trunk, you should immediately merge
				changes from truck back to the this branch. Use this method and local changes won't get
				in your way. Of course, you should still avoid re-merging trunk changes, as explained above.
			</para>
			<important>
			<para>
				Subversion can't merge a file with a folder and vice versa - only
				folders to folders and files to files. If you click on a file and open up
				the merge dialog, then you have to give a path to a file in that dialog. If you
				select a folder and bring up the dialog, then you must specify a folder url
				for the merge.
			</para>
			</important>
		</sect2>
	</sect1>
	<!-- ================================================================= -->
	<!-- ======================== SECTION 12 ============================= -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-DUG-relocate">
		<title>Relocating a working copy</title>
		<?dbhh topicname="HIDD_RELOCATE"?>
		<para>
			<figure id="tsvn-DUG-relocate-dia-1">
				<title>The Relocate Dialog</title>
				<graphic fileref="images/Relocate.png"/>
			</figure>
		If your repository has for some reason changed it's
		location (IP/URL). Maybe you're even stuck and can't
		commit and you don't want to checkout your working
		copy again from the new location and to move all your
		changed data back into the new working copy, <menuchoice><guimenuitem>relocate</guimenuitem></menuchoice>
		is the command you are looking for. It basically
		does not much: it scans all "entries" files in the
		.svn folder and changes the URL of the entries to the new value.
		</para>
	</sect1>
	<!-- ================================================================= -->
	<!-- ======================== SECTION 13 ============================= -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-DUG-settings">
		<title>TortoiseSVN's Settings</title>
		<?dbhh topicname="HIDD_SETTINGSMAIN"?>
		<?dbhh topicname="HIDD_SETTINGSMENU"?>
		<?dbhh topicname="HIDD_SETTINGSOVERLAY"?>
		<?dbhh topicname="HIDD_SETTINGSPROXY"?>
		<?dbhh topicname="HIDD_SETTINGSPROGS"?>
		<sect2 id="tsvn-DUG-settings-main">
			<title>The Settings Dialog, Main Tab</title>
			<para>
				<figure id="tsvn-DUG-settings-dia-1">
					<title>The Settings Dialog, Main Tab</title>
					<graphic fileref="images/SettingsMain.png"/>
				</figure>

		Apart from setting your preferred language, this dialog allows you to
		specify (almost) every setting TortoiseSVN has.
		</para>
			<para>
		To find out what the different settings are for, just leave your
		mouse pointer a second on the editbox/checkbox... and a helpful
		tooltip will popup.
		</para>
		</sect2>
		<sect2 id="tsvn-DUG-settings-overlay">
			<title>The Settings Dialog, Overlay Tab</title>
			<para>
				<figure id="tsvn-DUG-settings-dia-2">
					<title>The Settings Dialog, Overlay Tab</title>
					<graphic fileref="images/SettingsOverlay.png"/>
				</figure>
		This tab allows you to choose, for which items TortoiseSVN shall display icon overlays. If you feel that your icon overlays are very slow (explore is not responsive), uncheck the "show changed directories" box.
		</para>
		</sect2>
		<sect2 id="tsvn-DUG-settings-menu">
			<title>The Settings Dialog, Context Menu Tab</title>
			<para>
				<figure id="tsvn-DUG-settings-dia-3">
					<title>The Settings Dialog, Context Menu Tab</title>
					<graphic fileref="images/SettingsMenu.png"/>
				</figure>
		In this tab you can specifiy which of the TortoiseSVN contex menu entries shall be show up in the main context menu.
		</para>
		</sect2>
		<sect2 id="tsvn-DUG-settings-network">
			<title>The Settings Dialog, Network Tab</title>
			<para>
				<figure id="tsvn-DUG-settings-dia-4">
					<title>The Settings Dialog, Network Tab</title>
					<graphic fileref="images/SettingsProxy.png"/>
				</figure>
		Here you can configure your proxy server, if you need one to get through youor company's firewall.
		</para>
			<para>
		You can also specify, which program TortoiseSVN shall use to establish a secure connection to a svn+ssh repository.
		</para>
		</sect2>
		<sect2 id="tsvn-DUG-settings-progs">
			<title>The Settings Dialog, Diff/Merge Tab</title>
			<para>
				<figure id="tsvn-DUG-settings-dia-5">
					<title>The Settings Dialog, Diff/Merge Tab</title>
					<graphic fileref="images/SettingsProgs.png"/>
				</figure>
		Set here your own diff/merge programs TortoiseSVN should use. If you leave
		those fields empty, TortoiseSVN will use the TortoiseMerge program.
		</para>
		<para>
			<figure id="tsvn-DUG-settings-dia-6">
				<title>The Settings Dialog, Diff/Merge Advanced Dialog</title>
				<graphic fileref="images/SettingsProgsAdv.png"/>
			</figure>
		You can set a different merge program for every file extension.
		</para>
		</sect2>
	</sect1>
	<!-- ================================================================= -->
	<!-- ======================== SECTION 14 ============================= -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-DUG-blame">
		<title>Who Changed Which Line?</title>
		<?dbhh topicname="HIDD_BLAME"?>
		<para>
			<figure id="tsvn-DUG-blame-dia-1">
				<title>The Annotate / Blame Dialog</title>
				<graphic fileref="images/BlameDialog.png"/>
			</figure>
		Sometimes you need to know not only what lines have changed, but also
		who exactly changed specific lines in a file. That's when the
		<menuchoice><guimenuitem>Blame...</guimenuitem></menuchoice>,
    sometimes also reffered to as <firstterm>annotate</firstterm> command comes in handy.
		</para>
		<para>
		This command lists for every line in a file the author and the revision
		the line was changed.
		</para>
		<para>
		If you're only interested in changes from earlier revisions you can
		set the revision from which the blame should start. Set this to 1 if
		you want the blame for <emphasis>every</emphasis> line.
		</para>
		<para>
		Once you press <guibutton>Ok</guibutton> TortoiseSVN starts retreiving
		the data to create the blame file. Please note: This can take several
		minutes to finish, depending on how much the file has changed and
		of course your network connection to the repository. Once the blame
		process has finished the result is written into a temporary file and
		TortoiseSVN opens your default text editor to show you the result.
		</para>
		<para>
		The example shows the first thirty lines of the file
		<filename>/Subversion/include/svn_io.h</filename> as of Revision 7566 from
		the Subversion source. For each line it shows the
		<literal>line number</literal>,
		<literal>revision</literal>,
		<literal>date of last commit</literal>, the
		<literal>author</literal> and of course the actual
		<literal>line</literal> in the file.
<screen>
line  rev    date              author     content

  0  4127 03:03:39, 15.12.2002 rooneg     /**
  1  4127 03:03:39, 15.12.2002 rooneg      * @copyright
  2  1224 21:24:10, 08.02.2002 kfogel      * ====================================================================
  3  4233 02:28:10, 03.01.2003 blair       * Copyright (c) 2000-2003 CollabNet.  All rights reserved.
  4     1 06:24:14, 31.08.2001 svn         *
  5     1 06:24:14, 31.08.2001 svn         * This software is licensed as described in the file COPYING, which
  6     1 06:24:14, 31.08.2001 svn         * you should have received as part of this distribution.  The terms
  7     1 06:24:14, 31.08.2001 svn         * are also available at http://subversion.tigris.org/license-1.html.
  8     1 06:24:14, 31.08.2001 svn         * If newer versions of this license are posted there, you may use a
  9     1 06:24:14, 31.08.2001 svn         * newer version instead, at your option.
 10     1 06:24:14, 31.08.2001 svn         *
 11     1 06:24:14, 31.08.2001 svn         * This software consists of voluntary contributions made by many
 12     1 06:24:14, 31.08.2001 svn         * individuals.  For exact contribution history, see the revision
 13     1 06:24:14, 31.08.2001 svn         * history and logs, available at http://subversion.tigris.org/.
 14     1 06:24:14, 31.08.2001 svn         * ====================================================================
 15  4127 03:03:39, 15.12.2002 rooneg      * @endcopyright
 16  4127 03:03:39, 15.12.2002 rooneg      *
 17  4127 03:03:39, 15.12.2002 rooneg      * @file svn_io.h
 18  4127 03:03:39, 15.12.2002 rooneg      * @brief general Subversion I/O definitions
 19     1 06:24:14, 31.08.2001 svn         */
 20     1 06:24:14, 31.08.2001 svn
 21     1 06:24:14, 31.08.2001 svn        /* ==================================================================== */
 22     1 06:24:14, 31.08.2001 svn
 23     1 06:24:14, 31.08.2001 svn
 24     1 06:24:14, 31.08.2001 svn        #ifndef SVN_IO_H
 25     1 06:24:14, 31.08.2001 svn        #define SVN_IO_H
 26     1 06:24:14, 31.08.2001 svn
 27     1 06:24:14, 31.08.2001 svn        #include &lt;apr.h&gt;
 28     1 06:24:14, 31.08.2001 svn        #include &lt;apr_pools.h&gt;
 29     1 06:24:14, 31.08.2001 svn        #include &lt;apr_file_io.h&gt;
 30   303 03:26:32, 25.10.2001 cmpilato   #include &lt;apr_thread_proc.h&gt;
</screen>
		</para>
	</sect1>
	<!-- ================================================================= -->
	<!-- ======================== SECTION 15 ============================= -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-DUG-donate">
		<title>Final Step</title>
		<para>
		If you like TortoiseSVN and use it often,
		please support the developers!
		</para>
		<para>
		You can help us by either sending in patches and
		play an active role in development or you can
		cheer up the hard working developers.
		</para>
		<para>
		While working on TortoiseSVN we love to listen to music.
		And since we work many hours on the project we need a
		<emphasis>lot</emphasis> of music. Therefore we have set
		up some wish-lists with our favourite music CD's and DVD's:

		<itemizedlist>
				<listitem>
					<para>The media wish list of Stefan is
			<ulink url="http://www.amazon.com/o/registry/17DKTOSXX1KJK">here</ulink>
			(English) or 
			<ulink url="http://www.amazon.de/exec/obidos/wishlist/26JA3LXZXY4TB/">here</ulink>
			(Deutsch).</para>
				</listitem>
				<listitem>
					<para>Lübbe has got a <ulink url="http://www.amazon.de/exec/obidos/wishlist/3IKWLV2U0TVUA/"> wishlist</ulink> too.
					</para>
				</listitem>
			</itemizedlist>

		Please have a look at the list of contributors.

		</para>
	</sect1>
</chapter>
