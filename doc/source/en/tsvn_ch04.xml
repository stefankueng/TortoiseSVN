<chapter id="tsvn-DUG">
	<title>Daily Use Guide</title>
	<simplesect>
		<para>
			This document describes day to day usage of the TortoiseSVN client.
			It is <emphasis>not</emphasis> an introduction to version control
			systems, and <emphasis>not</emphasis> an introduction to Subversion
			(SVN). It is more like a place you may turn to when you know
			approximately what you want to do, but don't quite remember how
			to do it.
		</para>
		<para>
			If you need an introduction to version control with Subversion,
			then we recommend you read the fantastic book:
			<ulink url="http://svnbook.red-bean.com/">
				<citetitle>Subversion: The Definitive Guide</citetitle>
			</ulink>.
		</para>
		<para>
			This document is also a work in progress, just as TortoiseSVN and
			Subversion are. If you find any mistakes, please report them to
			the mailing list so we can update the documentation. Some of
			the screenshots in the Daily Use Guide (DUG) might not reflect the
			current state of the software. Please forgive us. We're working on
			TortoiseSVN in our free time.
		</para>
		<para>
			<itemizedlist>
				<listitem>
					<para>
					You should have installed TortoiseSVN already
					</para>
				</listitem>
				<listitem>
					<para>
					You should be familiar with version control systems
					</para>
				</listitem>
				<listitem>
					<para>
					You should know the basics of Subversion
					</para>
				</listitem>
				<listitem>
					<para>
					You should have set up a server and/or have access
					to a Subversion repository
					</para>
				</listitem>
			</itemizedlist>
		</para>
	</simplesect>
	<!-- ================================================================= -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-DUG-general">
		<title>Handling TortoiseSVN</title>
		<indexterm>
			<primary>context menu</primary>
		</indexterm>
		<para>
			<figure id="tsvn-DUG-context-dir-control">
				<title>Context menu for a directory under version control</title>
				<graphic fileref="images/ContextMenuDirControl.png"/>
			</figure>
			All TortoiseSVN commands are invoked from the context menu of the windows explorer.
			Most are directly visible, when you <action>right click</action> onto a file or folder.
			The commands that are available depend on whether the file or folder or it's parent
			folder is under version control or not.
		</para>
		<para>
			<indexterm>
				<primary>drag handler</primary>
			</indexterm>
			<indexterm>
				<primary>drag-n-drop</primary>
			</indexterm>
		Other commands are available as drag handlers, when you <action>right drag</action>
		files or folders to a new location inside working copies or when you 
		<action>right drag</action> a non-versioned file or folder into a directory 
		which is under version control.
		</para>
	</sect1>
	<!-- ================================================================= -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-DUG-authentication">
		<title>Authentication</title>
		<indexterm>
			<primary>authentication</primary>
		</indexterm>
		<para>
			If the repository that you are trying to access is password protected, an 
			authentication Dialog will show up.
			<figure id="tsvn-fig-authentication">
				<title>Authentication Dialog</title>
				<graphic fileref="images/Authenticate.png"/>
			</figure>
			Enter you username and password. The checkbox will make TortoiseSVN store
			the credentials in Subversion's default directory: 
			<filename>$APPDATA\Subversion\auth</filename>. One file for each server
			that you access. If you want to make Subversion and TortoiseSVN forget your
			credentials, you have to delete the corresponding file(s).
			<note>
				<para>
				Under Windows 2000 and above the credentials are stored encrypted in the registry. 
				To delete the credentials go to the settings dialog and press <guibutton>Clear Auth Cache</guibutton>.
				</para>
			</note>
			<tip>
				<para>
				If you have to authenticate against a Windows NT domain, enter your username
				including the domain name, like: <filename>MYDOMAIN/johnd</filename>.
				</para>
			</tip>
		</para>
	</sect1>
	<!-- ================================================================= -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-DUG-import">
		<title>Importing Data Into A Repository</title>
		<indexterm>
			<primary>import</primary>
		</indexterm>
		<indexterm>
			<primary>Repository</primary>
		</indexterm>
		<?dbhh topicname="HIDD_IMPORT"?>
		<sect2 id="tsvn-DUG-import-1">
			<title>Repository Layout</title>
			<para>
				Before you import your data into the repository you should
				first think about how you want to organize your data. If you
				use one of the recommended layouts you will later have it much
				easier.
			</para>
			<para>
				There are some standard, recommended ways to organize a
				repository. Most people create a <filename>trunk</filename>
				directory to hold the "main line" of development, a
				<filename>branches</filename> directory to contain branch
				copies, and a <filename>tags</filename> directory to contain
				tag copies. If a repository holds only one project, then
				often people create these top-level directories:
			</para>
<screen>
/trunk
/branches
/tags
</screen>
			<para>
			If a repository contains multiple projects, people often
			index their layout by branch:
			</para>
<screen>
/trunk/paint
/trunk/calc
/branches/paint
/branches/calc
/tags/paint
/tags/calc
</screen>
			<para>&hellip;or by project:</para>
<screen>
/paint/trunk
/paint/branches
/paint/tags
/calc/trunk
/calc/branches
/calc/tags
</screen>
			<para>
				Indexing by project makes sense if the projects are not closely related
				and each one is checked out individually. For related projects where
				you may want to check out all projects in one go, or where the projects
				are all tied together in a single distribution package, it is often better
				to index by branch. This way you have only one trunk to checkout, and
				the relationships between the sub-projects is more easily visible.
			</para>
			<para>
				If you adopt a top level <filename>/trunk /tags /branches</filename>
				approach, there is nothing to say that you have to copy the entire trunk
				for every branch and tag, and in some ways this structure offers the
				most flexibility.
			</para>
			<para>
				For unrelated projects you may prefer to use separate repositories.
				When you commit changes, it is the revision number of the whole
				repository which changes, not the revision number of the project.
				Having 2 unrelated projects share a repository can mean large gaps
				in the revision numbers. The Subversion and TortoiseSVN projects
				appear at the same host address, but are completely separate
				repositories allowing independent development, and no confusion
				over build numbers.
			</para>
			<para>
				Of course, you're free to ignore these common layouts.  You
				can create any sort of variation, whatever works best for you or
				your team.  Remember that whatever you choose, it's not a
				permanent commitment.  You can reorganize your repository at any
				time.  Because branches and tags are ordinary directories,
				TortoiseSVN can move or rename them however you wish. 
			</para>
			<para>
				Switching from one layout to another is just a matter of 
				issuing a series of server-side moves; If you don't like the 
				way things are organized in the repository, just juggle the 
				directories around.
			</para>
			<para>
				So if you haven't already created a basic folder structure inside
				your repository you should do that now:
				<orderedlist>
					<listitem>
						<para>
							create a new empty folder on your harddrive
						</para>
					</listitem>
					<listitem>
						<para>
							create your desired folder structure inside
							that folder &mdash; don't put any files in it yet!
						</para>
					</listitem>
					<listitem>
						<para>
							import this structure into the repository via a 
							<action>right-click</action> on the folder and
							selecting <guimenuitem>Import...</guimenuitem> 
							from the context menu.
						</para>
					</listitem>
				</orderedlist>
			</para>
		</sect2>
		<sect2 id="tsvn-DUG-import-2">
			<title>Import</title>
			<indexterm>
				<primary>temporary files</primary>
			</indexterm>
			<para>
				Before you import your project into a repository you should:
				<orderedlist>
					<listitem>
						<para>
							Remove all files which are not needed to
							build the project (temporary files, files which are
							generated by a compiler e.g. *.obj, compiled
							binaries, ...)
						</para>
					</listitem>
					<listitem>
						<para>
							Organize the files in folders and
							subfolders. Although it is possible to rename/move
							files later it is highly recommended to get your project's
							structure straight before importing!
						</para>
					</listitem>
				</orderedlist>
			</para>
			<para>
				Now select the <emphasis>parent import</emphasis> folder of your
				directory structure in the windows explorer and
				<action>right click</action>
				to open the context menu. Select the command
				<menuchoice>
					<guimenuitem>Import...</guimenuitem>
				</menuchoice>
				which brings up a dialog box:
				<figure id="tsvn-DUG-import-dia-1">
					<title>The Import dialog</title>
					<graphic fileref="images/Import.png"/>
				</figure>
			</para>
			<para>
				In this dialog you have to enter the URL of the repository into
				which you want to import your project.
			</para>
			<para>
				The import message is used as a log message. Since you
				usually just started your project a default <literal>initial import</literal>
				is filled in by TortoiseSVN.
			</para>
			<indexterm>
				<primary>exclude pattern</primary>
			</indexterm>
			<note>
				<para>
				Files or directories which match the 
				<guilabel>exclude pattern</guilabel>
				are <emphasis>not</emphasis> imported.
				</para>
			</note>
			<para>
				As soon as you press <guibutton>OK</guibutton> TortoiseSVN imports the
				complete directory tree including all files into the repository.
				Please note that this does <emphasis>NOT</emphasis> put your
				copy of the project under version control yet! To get a
				versioned working copy you need to do a Checkout of the
				version you just imported.
			</para>
		</sect2>
		<sect2 id="tsvn-DUG-import-3">
			<title>Special Files</title>
			<indexterm>
				<primary>special files</primary>
			</indexterm>
			<para>
			Sometimes you need to have a file under version control which contains
			user specific data. That means you have a file which every developer/user
			needs to modify to suit his/her local setup. But versioning such a file
			is difficult because every user would commit his/her changes every
			time to the repository.
			</para>
			<para>
			In such cases we suggest to use <literal>template</literal> files.
			You create a file which contains all the data your developers
			will need, add that file to version control and let the developers
			check this file out. Then, each developer has to <emphasis>make a copy</emphasis>
			of that file and rename that copy. After that, modifying the copy
			is not a problem anymore.
			</para>
			<para>
			As an example, you can have a look at TortoiseSVN's build script. It
			calls a file named <filename>TortoiseVars.bat</filename> which
			doesn't exist in the repository. Only the file <filename>TortoiseVars.tmpl</filename>.
			<filename>TortoiseVars.tmpl</filename> is the template file which
			every developer has to create a copy from and rename that file
			to <filename>TortoiseVars.bat</filename>. Inside that file, we added
			comments so that the users will see which lines they have to edit
			and change according to their local setup to get it working.
			</para>
			<para>
			To not disturb the users, we also added the file <filename>TortoiseVars.bat</filename>
			to the ignore list, i.e. we've set the Subversion property <literal>svn:ignored</literal>
			for that file. That way it won't show up as unversioned on every commit.
			</para>
		</sect2>
		<sect2 id="tsvn-DUG-import-4">
			<title>Referenced Projects</title>
			<indexterm>
				<primary>external repositories</primary>
			</indexterm>
			<indexterm>
				<primary>externals</primary>
			</indexterm>
			<para>
				Sometimes it is useful to construct a working copy that is made out of a number of 
				different checkouts. For example, you may want different subdirectories to come from 
				different locations in a repository, or perhaps from different repositories altogether. 
				If you want that every user has the same layout, you could define the <literal>svn:externals</literal> properties.
			</para>
			<para>
				Let's say you check out a working copy of /project1 to <filename>D:\dev\project1</filename>.
				Select the folder <filename>D:\dev\project1</filename>, <action>right-click</action> and choose 
				<menuchoice>
					<guimenuitem>properties</guimenuitem>
				</menuchoice>
				from the context menu. 
				The Properties Dialog comes up. Then go to the Subversion tab.
				There, you can set properties. Select the <literal>svn:externals</literal> property from the combobox and write 
				in the edit box the repository url in the format <literal>name url</literal>.
				For example <literal>subversion http://svn.collab.net/repos/svn/trunk</literal>.
				Now click <guibutton>Set</guibutton> and commit your changes. 
				If an user updates their working copy the external project is checked out, too.
			</para>
			<para>
				If you need more information how <application>TortoiseSVN</application> handles 
				Properties read <xref linkend="tsvn-DUG-propertypage"/>.
			</para>
		</sect2>
	</sect1>
	<!-- ================================================================= -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-DUG-checkout">
		<title>Checking Out A Working Copy</title>
		<indexterm>
			<primary>checkout</primary>
		</indexterm>
		<?dbhh topicname="HIDD_CHECKOUT"?>
		<para>
			To obtain a working copy you need to do a <firstterm>checkout</firstterm>
			from a repository.
		</para>
		<para>
			Select a directory in windows explorer where you want to place
			your working copy. <action>Right-click</action> to pop up the
			context menu and select the command
			<menuchoice>
				<guimenuitem>Checkout...</guimenuitem>
			</menuchoice>,
			which brings up the following dialog box:
			<figure id="tsvn-DUG-checkout-dia-1">
				<title>The Checkout dialog</title>
				<graphic fileref="images/Checkout.png"/>
			</figure>
			If you enter a folder name that does not yet exist, then a
			directory with that name is created.
		</para>
		<note>
			<para>
				You can only check out into an empty directory. If you want to check out
				a previously imported sourcetree, Subversion will throw an error messge.
				You will have to check out into a different directory or delete the 
				existing sourcetree first.
			</para>
		</note>
		<para>
			It is recommended that you check out only the <literal>trunk</literal> part of the
			directory tree. If you specify the parent path of the
			directory tree in the URL then you might end up with a full
			harddisk since you will get a copy of the entire repository tree
			including every branch and tag of your project!
		</para>
		<tip>
			<title>Exporting</title>
			<indexterm>
				<primary>export</primary>
			</indexterm>
			<para>
				Sometimes you may want a working copy without any of those
				<filename>.svn</filename> directories, e.g. to create a zipped
				tarball of your source. Instead of making a copy and then delete
				all those <filename>.svn</filename> directories manually,
				TortoiseSVN offers the command
				<menuchoice>
					<guimenuitem>Export...</guimenuitem>
				</menuchoice>.
				If you execute this command
				on your working copy you'll be asked for a place to save the
				<literal>clean</literal> working copy without the
				<filename>.svn</filename>
				folders. Also, you can specify if you want to export 
				<emphasis>all</emphasis> files or just the versioned files.
			</para>
			<para>
			Another way to do an export is by right-dragging a working copy
			folder to another location and choose
			<menuchoice>
				<guimenuitem>Subversion export here</guimenuitem>
			</menuchoice>
			or 
			<menuchoice>
				<guimenuitem>Subversion export all here</guimenuitem>
			</menuchoice>
			</para>
		</tip>
	</sect1>
	<!-- ================================================================= -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-DUG-wcstatus">
		<title>Getting Status Information</title>
		<indexterm>
			<primary>status</primary>
		</indexterm>
		<para>
		While you are working on your working copy you often need to know
		which files you have changed/added/removed or renamed, or even which
		files got changed and committed by others.
		</para>
		<sect2 id="tsvn-DUG-wcstatus-1">
			<title>Icon Overlays</title>
			<indexterm>
				<primary>overlays</primary>
			</indexterm>
			<para>
				<figure id="tsvn-DUG-wcstatus-dia-1">
					<title>Explorer showing icon overlays</title>
					<graphic fileref="images/Overlays.png"/>
				</figure>
				Now that you have checked out a working copy from a Subversion
				repository you can see your files in the windows explorer with
				changed icons. This is one of the reasons why TortoiseSVN is so
				popular. TortoiseSVN adds a so called overlay icon to each
				file icon which overlaps the original file icon. Depending on
				the Subversion status of the file the overlay icon is different.
			 	<graphic fileref="images/InSubVersionIcon.png"/>
				A fresh checked out working copy has a green checkmark as overlay.
				That means the Subversion status is <literal>normal</literal>.
				<graphic fileref="images/ModifiedIcon.png"/>
				As soon as you start editing a file,
				the status changes to <literal>modified</literal>
				and the icon overlay then changes to a red exclamation
				mark. That way you can easily see which files were changed
				since you last updated your working copy and need to be committed.
				<graphic fileref="images/ConflictIcon.png"/>
				If during an update a <literal>conflict</literal> occurs then
				the icon changes to a yellow exclamation mark.
				<graphic fileref="images/AddedIcon.png"/> 
				The plus sign tells you that a file or folder has been scheduled to be
				<literal>added</literal> to version control.
				<graphic fileref="images/DeletedIcon.png"/> 
				This Icon shows you that some files or folders inside the current folder
				have been scheduled do be <literal>deleted</literal> from version control
				or a file under version control is missing in a folder.
			</para>
			<para>
				The folder icons also have icon overlays displayed. By default,
				only the status of the folder itself is shown. But you can
				change that behaviour in the 
				<menuchoice>
					<guimenuitem>Settings</guimenuitem>
				</menuchoice>
				(<xref linkend="tsvn-DUG-settings"/>),
				so that the status of folders is shown recursively. This will
				make the icon overlays for folders slower and is therefore
				not recommended on slower machines or large working copies.
			</para>
			<para>
				With this setting each folder shows the status of all files below it,
				where status <literal>conflict</literal> overrides <literal>modified</literal>
				and <literal>modified</literal> overrides <literal>normal</literal>.
				So you can easily see if there's a file with a conflict or a modified file in a folder.
				<tip>
				<title>Slow Overlays</title>
				<para>
					You may notice that if you enable the recursive overlay for folders
					that the explorer slows down remarkably when browsing working
					copies. This depends on how big your working copy is and how much
					RAM Windows can use for file index caching. Usually it's only
					very slow the first time you browse such a directory &mdash; if
					you browse the same directory later again it's much faster.
				</para>
				<para>
					If you want to disable the recursive overlays for some
					folders but not for all then you can do that by creating a
					file called <filename>_tsvnexcluderecursive</filename> inside
					that folder. This will disable the recursive overlays for
					that folder, but <emphasis>not</emphasis> for the files or
					folders inside it.
				</para>
				<para>
					You can also disable the overlays completely for a folder
					by creating a file called <filename>_tsvnexcludethis</filename>
					inside that folder. Again, this disables the overlays only
					for that folder, not the folders inside it.
					You can define specific paths to be excluded from showing overlays
					on the settings page
					(<xref linkend="tsvn-DUG-settings-overlay"/>).
				</para>
				</tip>
			</para>
			<para>
				Unlike <application>TortoiseCVS</application> (the CVS shell
				integration) no overlay icon for unversioned files is shown.
				We do this because the number of icon overlays are limited system wide
				and should be used economically.
			</para>
		</sect2>
		<sect2 id="tsvn-DUG-wcstatus-2">
			<title>Status Of The Repository</title>
			<indexterm>
				<primary>status</primary>
			</indexterm>
			<para>
				<figure id="tsvn-DUG-wcstatus-dia-2">
					<title>Check for Updates</title>
					<graphic fileref="images/RepoStatus.png"/>
				</figure>
				It's often very useful to know which files got changed and
				committed by others. That's where the command
				<menuchoice>
					<guimenuitem>Check For Updates...</guimenuitem>
				</menuchoice>
				comes in handy.
				This dialog will show you every file that has changed in any
				way either in your working copy and in the repository. That way
				you can check before an update if there's a possible conflict.
			</para>
			<para>
				From the context menu of the dialog you can show a diff of the
				changes or revert your local changes. TortoiseSVN automatically
				downloads the most recent version from the repository to do
				the diff.
			</para>
			<tip>
				<title>Other Possibilities</title>
				<para>
					The
					<menuchoice>
						<guimenuitem>Check for Updates..</guimenuitem>
					</menuchoice>
					dialog is propably not the best choice if you don't have 
					a network connection available.
					In this case you can also get the local status of all your
					files by clicking
					<menuchoice>
						<guimenuitem>Commit...</guimenuitem>
					</menuchoice>.
					The commit dialog shows you a similar list of files like the
					<menuchoice>
						<guimenuitem>Check for Updates...</guimenuitem>
					</menuchoice> dialog, 
					but without contacting the repository. if you dont' want 
					to commit just press
					<guibutton>Cancel</guibutton>
					instead of
					<guibutton>Ok</guibutton>.
				</para>
			</tip>
		</sect2>
	</sect1>
	<!-- ================================================================= -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-DUG-update">
		<title>Update Your Working Copy With Changes From Others</title>
		<indexterm>
			<primary>update</primary>
		</indexterm>
		<para>
			<figure id="tsvn-DUG-update-dia-1">
				<title>Progress dialog showing finished update</title>
				<graphic fileref="images/UpdateFinished.png"/>
			</figure>
			Occasionally you may want changes done by others to get
			incorporated in your local working copy. The process of
			getting changes from the server to your local copy is
			known as <literal>updating</literal>. Updating may be done on
			single files, a set of selected files, or recursively on
			entire directory hierarchies. To update, select the files
			and/or directories you want, <action>right click</action> and select
			<menuchoice>
				<guimenuitem>Update</guimenuitem>
			</menuchoice>
			in the explorer context menu. A window will pop up displaying the 
			progress of the update as it runs.
			Changes done by others will be merged into your files,
			keeping any changes you may have done to the same files.
			The repository is <emphasis>not</emphasis> affected by an update.
		</para>
		<para>
			If you get any <literal>conflicts</literal> during an update (this
			can happen if others changed the same lines in the same file as
			you did and those changes don't match) then the dialog shows those
			conflicts in red. You can <action>doubleclick</action> on these lines to start
			the external merge tool to resolve the conflicts.
		</para>
		<para>
			TortoiseSVN also allows you to update your working copy to a specific
			revision, not only to the most recent one. This command is called
			<menuchoice>
				<guimenuitem>Update to Revision...</guimenuitem>
			</menuchoice>
			and first opens a dialog where you can enter the required revision.
		</para>
		<caution>
			<para>
			If you update a file or folder to a specific revision, you will get 
			<literal>out of date</literal> error messages when you try to commit them!
			If you want to undo changes to a file and start afresh from an earlier
			revision, you must either use the
			<menuchoice>
				<guimenuitem>Revert changes from this revision</guimenuitem>
			</menuchoice>
			command from the log dialog or the
			<menuchoice>
				<guimenuitem>Merge...</guimenuitem>
			</menuchoice>
			menu command.
			</para>
		</caution>
		<para>
			The
			<menuchoice>
				<guimenuitem>Update to Revision...</guimenuitem>
			</menuchoice>
			command allows you to revert your working to an earlier revision.
			Say e.g. your working copy is at revision 100, but you want your
			working copy To reflect the state which it had in revision 50 &mdash;
			then simply update to revision 50.
		</para>
		<para>
			In general, updating individual files to an earlier revision is
			not a good idea as it leaves your working copy in an inconsistent
			state. If the file you are updating has changed name, you may even
			find that the file just disappears from your working copy because
			no file of that name existed in the earlier revision. If you simply
			want a local copy of an old version of a file it is better to use the
			<menuchoice>
				<guimenuitem>Save revision to...</guimenuitem>
			</menuchoice>
			command from the log dialog for that file.
		</para>
		<warning>
			<para>
			If you updated your working copy to an earlier revision, you must not
			make changes to the files! You will get <literal>out of date</literal>
			errors if you try to commit those changes.
			If you want to revert some changes in your working copy, then use the 
			repository browser and save the file in question over the file in your 
			working copy. Or you can use the log dialog and use the command 
			<menuchoice>
				<guimenuitem>Revert changes in this revision</guimenuitem>
			</menuchoice>.
			This will undo only those changes made in the selected revision.
			Changes made after that revision will be retained.
			For reverting multiple revisions, you should use the merge command,
			where you can specify the range of revisions you want to undo.
			</para>
		</warning>
		<tip>
			<title>Multiple Files/Folders</title>
			<para>
				If you select multiple files and folders in the explorer and then 				select
				<menuchoice>
					<guimenuitem>Update...</guimenuitem>
				</menuchoice>,
				all of those files/folders
				are updated one by one. TortoiseSVN makes sure that all files/folders
				which are from the same repository are updated to the exact same
				revision! Even if between those updates another commit occurred.
			</para>
		</tip>
	</sect1>
	<!-- ================================================================= -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-DUG-conflicts">
		<title>Resolving Conflicts</title>
		<indexterm>
			<primary>conflict</primary>
		</indexterm>
		<para>
			Once in a while, you will get a <emphasis>conflict</emphasis> when
			you update your files from the repository. A conflict
			occurs when two or more developers have changed the same
			few lines of a file. As Subversion knows nothing of your
			project, it leaves resolving the conflicts to the developers.
			Whenever a conflict is reported, you should open the file in
			question, and search for lines starting with the string
			<literal>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</literal>.
			The conflicting area is marked like this:
<screen>
&lt;&lt;&lt;&lt;&lt;&lt;&lt; filename
    your changes
=======
    code merged from repository
&gt;&gt;&gt;&gt;&gt;&gt;&gt; revision
</screen>
			Also, for every conflicted file Subversion places three
			additional files in your directory:
			<variablelist>
				<varlistentry>
				<term>filename.ext.working</term>
					<listitem>
						<para>
							This is your file as it existed in your
							working copy before you updated your working copy
							&mdash; that is, without conflict markers. This file has
							your latest changes in it and nothing else.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>filename.ext.merge-left.rOLDREV</term>
					<listitem>
						<para>
							This is the file that was the BASE
							revision before you updated your working copy. That is,
							it the file that you checked out before you made
							your latest edits.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>filename.ext.merge-right.rNEWREV</term>
					<listitem>
						<para>
							This is the file that your Subversion
							client just received from the server when you updated
							your working copy. This file corresponds to the HEAD
							revision of the repository.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			Here <literal>*</literal> represents some random digits that Subversion chooses,
			OLDREV is the revision number of the file in your .svn directory,
			and NEWREV is the revision number of the repository HEAD.
		</para>
		<para>
			You can either launch an external merge tool / conflict
			editor with the
			<menuchoice>
				<guimenuitem>Edit Conflict</guimenuitem>
			</menuchoice>
			context menu or you can use any other editor to manually
			resolve the conflict. You should decide what the code
			should look like and do the necessary changes.
		</para>
		<para>
			Afterwards execute the command
			<menuchoice>
				<guimenuitem>Resolved</guimenuitem>
			</menuchoice>
			from the context menu and commit your modifications to the
			repository. Please note that the Resolve command does not-really
			resolve the conflict. It just removes the <filename>filename.ext.working
			</filename> and <filename>filename.ext.merge-*.r*</filename> files, to
			allow you to commit your changes.
		</para>
	</sect1>
	<!-- ================================================================= -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-DUG-commit">
		<title>Sending Your Changes To The Repository</title>
		<indexterm>
			<primary>commit</primary>
		</indexterm>
		<?dbhh topicname="HIDD_LOGPROMPT"?>
		<para>
			Sending the changes you made to your working copy is known as
			<firstterm>committing</firstterm> the changes. But before you
			commit you have to make sure that your working copy is up to
			date. You can either make an
			<menuchoice>
				<guimenuitem>Updates</guimenuitem>
			</menuchoice>
			directly. Or you can
			<menuchoice>
				<guimenuitem>Check For Updates</guimenuitem>
			</menuchoice>
			first, to see which files have changed locally or on the server.
		</para>
		<para>
			If your working copy is up to date and there are no conflicts,
			you are ready to commit your changes. Select any file
			and/or folders you want to commit and select
			<menuchoice>
				<guimenuitem>Commit...</guimenuitem>
			</menuchoice>
			from the context menu.
			<figure id="tsvn-DUG-commit-dia-1">
				<title>The Commit dialog</title>
				<graphic fileref="images/CommitContextMenu.png"/>
			</figure>
		</para>
		<para>
			The commit dialog will show you every changed file,
			including added, deleted and unversioned files. If you don't
			want a changed file to be committed, just uncheck that
			file. If you want to include an unversioned file,
			just check that file to add it to the commit.
			<tip>
				<title>Commit files or folders?</title>
				<para>
					When you commit files, the commit dialog shows only
					the files you have selected. When you commit a folder
					the commit dialog will select the changed files automatically.
					If you forget about a new file you created, committing the
					folder will find it anyway. Committing a folder does <emphasis>not</emphasis>
					mean that every file gets marked as changed; It just makes
					your life easier by doing more work for you.
				</para>
			</tip>
			<tip>
				<title>Many unversioned files in the commit dialog</title>
				<para>
					If you think that the TSVN commit dialog shows you too
					many unversioned (e.g. compiler generated or editor backup)
					files, there are several ways to handle this. You can:
					<itemizedlist>
						<listitem>
							<para>
								add the file (or a wildcard extension)
								to the list of files to exclude on the settings page.
								This will affect every working copy you have.</para>
						</listitem>
						<listitem>
							<para>
								add the file to the <literal>svn:ignore</literal> list
								using the
								<menuchoice>
									<guimenuitem>Add to ignore list</guimenuitem>
								</menuchoice>
								context menu. This will only affect the directory on
								which you set the <literal>svn:ignore</literal> property.
								Using the SVN Property Dialog, you can alter the
								<literal>svn:ignore</literal> property for a directory.
							</para>
						</listitem>
					</itemizedlist>
				</para>
			</tip>
		</para>
		<para>
			<action>Doubleclicking</action> on any modified file in the commit dialog
			will launch the external diff tool to show your changes.
		</para>
		<para>
			After pressing <guibutton>OK</guibutton>, a dialog appears displaying
			the progress of the commit.
			<figure id="tsvn-DUG-commit-dia-3">
				<title>The Progress dialog showing a commit in progress</title>
				<graphic fileref="images/CommitProgress.png"/>
			</figure>
		</para>
		<tip>
			<title>Integration with Bugtracking Tools</title>
			<para>
				If you have activated the bugtracking system, you could set one or more 
				Issues in the <guilabel>Bug-ID / Issue-Nr:</guilabel> Textfield. Several Issues 
				should be comma separated. Learn more <xref linkend="tsvn-DUG-bugtracker"/>.
			</para>
		</tip>
	</sect1>
	<!-- ================================================================= -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-DUG-bugtracker">
		<title>Integration with Bugtracking Systems</title>
		<indexterm>
			<primary>bugtracking</primary>
		</indexterm>
		<indexterm>
			<primary>bugtracker</primary>
		</indexterm>
		<para>
			You could integrate a Bugtracking Tool of your choice in <application>TortoiseSVN</application>. 
			Therefore you have to define some Properties, which start with <literal>bugtraq:</literal>. They must be set on 
			Directories: (<xref linkend="tsvn-DUG-propertypage"/>)
			<variablelist>
				<varlistentry>
					<term>bugtraq:message</term>
					<listitem>
						<para>
							<emphasis>This property activates the Bugtracking System. </emphasis>
							If this property is set, then <application>TortoiseSVN</application> will
							prompt you to enter an issue number when you commit your changes. 
							It's used to add a line at the end of the logmessage. It must contain
							<literal>%BUGID%</literal>, which is replaced with the issuenumber on commit. 
							This ensures that your commit log contains a reference to the issuenumber
							which is always in a consistent format and can be parsed by your
							Bugtracking tool to associate the issuenumber with a particular commit. 
							e.g the TortoiseSVN project is using <literal>Issue : %BUGID%</literal>, 
							but this depends on your Tool.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>bugtraq:url</term>
					<listitem>
						<para>
							Set this property to the url of your bugtracking tool. It must be 
							properly URI encoded and it has to contain <literal>%BUGID%</literal>.
							<literal>%BUGID%</literal> is replaced with the Issuenumber you entered.
							This allows <application>TortoiseSVN</application> to display a link
							in the log dialog, so when you are looking at the revision log you can
							jump directly to your bugtracking tool.
							You do not have to provide this property, but then
							<application>TortoiseSVN</application> shows only the issuenumber
							and not the link to it. e.g the TortoiseSVN project is using
							<literal>http://tortoisesvn.tigris.org/issues/show_bug.cgi?id=%BUGID%</literal>
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>bugtraq:label</term>
					<listitem>
						<para>
							This text is shown by <application>TortoiseSVN</application> on
							the commit dialog to label the edit box where you enter the issuenumber. 
							If it's not set, <literal>Bug-ID / Issue-Nr:</literal> will be displayed.
							Keep in mind though that the window will not be resized to fit this label,
							so keep the size of the label below 20-25 characters. 
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>bugtraq:number</term>
					<listitem>
						<para>
							If it's set to <literal>true</literal> only numbers are allowed in the issuenumber textfield.
							An exception is the comma, so you could comma separate several numbers.
							Valid values are <literal>true/false</literal>. 
							<emphasis>If not defined, <literal>true</literal> is assumed.</emphasis>
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>bugtraq:warnifnoissue</term>
					<listitem>
						<para>
							Set this to <literal>true</literal>, if you want
							<application>TortoiseSVN</application>
							to warn you because of an empty issuenumber textfield. Valid values 
							are <literal>true/false</literal>.
							<emphasis>If not defined, <literal>true</literal> is assumed.</emphasis>
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<important>
				<title>Set the Properties on Directories</title>
				<para>
					These properties must be set on directories for the system to work. 
					If you can be sure that each user checks out only from e.g <filename>trunk/</filename>
					and not some subfolder, then it's enough if you set the properties on <filename>trunk/</filename>.
					<application>TortoiseSVN</application> will then search for those properties 
					the path up to the working copy root for those properties.
					If you can't be sure, you have to set the properties recursively on each subfolder.
					A property setting deeper in the project hierarchy overrides settings on
					higher levels (closer to <filename>trunk/</filename>).
				</para>
			</important>
		</para>
	</sect1>
	<!-- ================================================================= -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-DUG-adding">
		<title>Adding New Files And Directories</title>
		<indexterm>
			<primary>add</primary>
		</indexterm>
		<?dbhh topicname="HIDD_ADD"?>
		<para>
			<figure id="tsvn-DUG-adding-dia-1">
				<title>Explorer context menu for unversioned files</title>
				<graphic fileref="images/ContextMenuFileNoControl.png"/>
			</figure>
			If you created new files and/or directories during
			your development process the you need to add them
			to source control too. Select the file(s) and/or directory
			and select the command
			<menuchoice>
				<guimenuitem>Add</guimenuitem>
			</menuchoice>
			from the context menu.
		</para>
		<para>
			After you added the files/directories to source control
			the file appears with a <literal>added</literal> icon overlay which means you
			first have to commit your working copy to make those
			files/directories available to other developers.
			Adding a file/directory does <emphasis>not</emphasis> affect
			the repository!
		</para>
		<para>
			<tip>
				<title>Many Adds</title>
				<para>
					You can also use the Add command on already versioned
					folders. In that case, the add dialog will show you all
					unversioned files inside that versioned folder.
					This helps if you have many new files and need them to
					add at once.
				</para>
			</tip>
		</para>
		<para>
			To add files from outside your working copy you can use
			the drag&ndash;and&ndash;drop handler:
			<orderedlist>
				<listitem>
					<para>
						select the files you want to add
					</para>
				</listitem>
				<listitem>
					<para>
						<action>right&ndash;drag</action> them
						to the new location inside the working copy
					</para>
				</listitem>
				<listitem>
					<para>
						release the right mouse button
					</para>
				</listitem>
				<listitem>
					<para>
						in the popup menu select
						<menuchoice>
							<guimenuitem>add files to Subversion here</guimenuitem>
						</menuchoice>.
						The files will then be copied to the working copy and
						added to version control.
					</para>
				</listitem>
			</orderedlist>
		</para>
	</sect1>
	<!-- ================================================================= -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-DUG-renaming">
		<title>Deleting, Renaming And Moving</title>
		<indexterm>
			<primary>delete</primary>
		</indexterm>
		<indexterm>
			<primary>remove</primary>
		</indexterm>
		<indexterm>
			<primary>rename</primary>
		</indexterm>
		<indexterm>
			<primary>move</primary>
		</indexterm>
		<?dbhh topicname="HIDD_RENAME"?>
		<para>
			Unlike CVS, Subversion allows renaming and moving of files and
			folders. So there are menu entries for delete and rename
			in the TortoiseSVN submenu.
			<figure id="tsvn-DUG-renaming-dia-1">
				<title>Explorer context menu for versioned files</title>
				<graphic fileref="images/ContextMenuFileControl.png"/>
			</figure>
		</para>
		<para>
			If you delete a file/directory using TSVN, the file is
			removed from your working copy and marked for deletion.
			The file's parent folder shows a "deleted" icon overlay.
			You can always get the file back, if you call
			<menuchoice>
				<guimenuitem>revert</guimenuitem>
			</menuchoice>
			on the parent folder.
		</para>
		<para>
			If you want to move files inside a working copy,
			use the drag&ndash;and&ndash;drop handler again:

			<orderedlist>
				<listitem>
					<para>
						select the files or directories you want to move
					</para>
				</listitem>
				<listitem>
					<para>
						<action>right&ndash;drag</action> them to the
						new location inside the working copy
					</para>
				</listitem>
				<listitem>
					<para>
						release the right mouse button
					</para>
				</listitem>
				<listitem>
					<para>
						in the popup menu select
						<menuchoice>
							<guimenuitem>move files in Subversion to here</guimenuitem>
						</menuchoice>
					</para>
				</listitem>
			</orderedlist>
			If a file is deleted via the explorer but not removed from
			version control (i.e. you delete a file as usual), the commit
			dialog shows those files and lets you remove them from
			version control too before the commit. So it doesn't really
			matter, if you forget to delete the file with TortoiseSVN as
			you are supposed to do.
		</para>
		<para>
			<caution>
				<title>Commit the parent folder</title>
				<para>
					Since renames and moves are done as a delete followed by an
					add you must commit the parent folder of the renamed/moved
					file. Only that way the deleted part of the rename/move will
					show up in the commit dialog. If you don't commit the removed
					part of the rename/move, it will stay behind in the repository
					and an update of your coworkers won't remove the old file.
				</para>
			</caution>
		</para>
		<para>
			<tip>
				<title>Getting a deleted file or folder back</title>
				<para>
				If you have deleted a file or a folder and already committed
				that delete operation to the repository, then a normal 
				<menuchoice>
					<guimenuitem>Revert</guimenuitem>
				</menuchoice>
				can't bring it back anymore. But the file or folder is not
				lost at all. If you know the revision the file or folder got
				deleted (if you don't, use the log dialog to find out) open
				the repository browser and switch to that revision. Then select
				the file or folder you deleted, right-click and select
				<menuchoice>
					<guimenuitem>Copy to...</guimenuitem>
				</menuchoice>
				as the target for that copy operation select the path to your
				working copy.
				</para>
			</tip>
		</para>
	</sect1>
	<!-- ================================================================= -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-DUG-revert">
		<title>Undo Changes</title>
		<indexterm>
			<primary>revert</primary>
		</indexterm>
		<indexterm>
			<primary>undo</primary>
		</indexterm>
		<para>
			If you want to undo all changes you made in a file since
			the last update you need to select the file, <action>right&ndash;click
			</action> to pop up the context menu and then select
			the command
			<menuchoice>
				<guimenuitem>revert</guimenuitem>
			</menuchoice>
			in the TortoiseSVN submenu. A dialog will pop up showing you the 
			files you've changed and you can revert. Select those you want to 
			revert and press
			<guibutton>ok</guibutton>.
			<figure id="tsvn-DUG-revert-dia-1">
				<title>Revert dialog</title>
				<graphic fileref="images/Revert.png"/>
			</figure>
		</para>
	</sect1>
	<!-- ================================================================= -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-DUG-propertypage">
		<title>Get/Set Information About Files/Directories</title>
		<indexterm>
			<primary>properties</primary>
		</indexterm>
		<para>
			<figure id="tsvn-DUG-propertypage-dia-1">
				<title>Subversion property page</title>
				<graphic fileref="images/Properties.png"/>
			</figure>
			Sometimes you want to have a more detailed information
			about a file/directory than just the icon overlay.
			You can get all the information Subversion provides in the
			explorer properties dialog. Just select the file or
			directory and select
			<menuchoice>
				<guimenuitem>properties</guimenuitem>
			</menuchoice>
			in the context menu (note: this is the normal properties menu entry
			the explorer provides, not in the TortoiseSVN submenu!).
			In the properties dialog box TortoiseSVN has added a new
			property page for files/folders under Subversion control.
		</para>
		<para>
			On the Subversion page you can see all relevant
			information about the selected file/directory. In
			addition you can read and set the subversion properties.
			You can add your own properties or some properties with a 
			special meaning in subversion, they begin with <literal>svn:</literal>. 
			The <literal>svn:externals</literal> is such a property see how to handle externals in 
			<xref linkend="tsvn-DUG-import-4"/>.
			For more information about properties in subversion see the  
			<ulink url="http://svnbook.red-bean.com/svnbook/ch07s02.html#svn-ch-7-sect-2.3">
				subversion manual
			</ulink>.
		</para>
		<note>
			<title>commit properties</title>
			<para>
				Subversion properties are versioned. After you changed or added a 
				property you have to commit your changes.
			</para>
		</note>
		<tip>
			<title>Conflicts on properties</title>
			<para>
				If there's a conflict on committing the changes, because another 
				user has changed the same property Subversion generates a 
				<filename>.prej</filename> file. Delete this file after you 
				resolved the conflict. 
			</para>
		</tip>
		<para>
			<application>TortoiseSVN</application> could integrate with some bugtracking 
			tools. This happens with properties, which start with <literal>bugtraq:</literal>. Please read 
			on <xref linkend="tsvn-DUG-bugtracker"/> for further information. 
		</para>
	</sect1>
	<!-- ================================================================= -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-DUG-showlog">
		<title>Revision Log Dialog</title>
		<indexterm>
			<primary>log</primary>
		</indexterm>
		<?dbhh topicname="HIDD_LOGMESSAGE"?>
		<para>
			For every change you make and commit, you also have to provide
			a log message for that change. That way you can later find out
			what/why you made a change and you have a detailed log for your
			development process.
		</para>
		<para>
			The Log Dialog retrieves all those log messages and shows them
			to you.
			The display is divided into 3 panes.
			<itemizedlist>
				<listitem>
					<para>
						The top pane shows a list of revisions where changes to the
						file/folder have been committed. This summary includes the
						date and time, the person who committed the revision and the
						start of the log message.
					</para>
				</listitem>
				<listitem>
					<para>
						The middle pane shows the full log message for the selected
						revision.
					</para>
				</listitem>
				<listitem>
					<para>
						The bottom pane shows a list of all files and folders that
						were changed as part of the selected revision.
					</para>
				</listitem>
			</itemizedlist>
			But it does much more than that &mdash; it provides context menu
			commands which you can use to get even more information about the
			project history.
		</para>
		<sect2 id="tsvn-DUG-showlog-1">
			<title>Invoking The Log Dialog</title>
			<para>
				<figure id="tsvn-DUG-showlog-1-dia-1">
					<title>The Log Dialog</title>
					<graphic fileref="images/LogMessages.png"/>
				</figure>

				There are several places from where you can show the Log Dialog:
				<itemizedlist>
					<listitem>
						<para>
							From the TortoiseSVN context submenu
						</para>
					</listitem>
					<listitem>
						<para>
							From the property page
						</para>
					</listitem>
					<listitem>
						<para>
							From the Progress Dialog after an update
							has finished. Then the Log Dialog only shows those revisions
							which were changed since your last update
						</para>
					</listitem>
				</itemizedlist>
			</para>
		</sect2>
		<sect2 id="tsvn-DUG-showlog-2">
			<title>Getting Additional Information</title>
			<para>
				<figure id="tsvn-DUG-showlog-2-dia-1">
					<title>The Log Dialog Top Pane with Context Menu</title>
					<graphic fileref="images/LogContextMenu.png"/>
				</figure>
				The top pane of the Log Dialog has a context menu that allows you to
				<itemizedlist>
					<listitem>
						<para>
							Compare the selected revision with your working copy.
							The default Diff-Tool is TortoiseMerge which
							is supplied with TortoiseSVN. This will show you a list
							of changed files, and allow you to review the changes made
							to each file individually.
						</para>
					</listitem>
					<listitem>
						<para>
							View the changes made in the selected revision as a
							Unified-Diff file. If you select 2 revisions, then the
							differences between these 2 selected revisions are shown.
							This helps you find out exactly what changed between revisions.
							The Unified-Diff operation is faster than invoking the "normal" external
							diff viewer because TortoiseSVN doesn't have to fetch the
							whole file but only the difference.
						</para>
					</listitem>
					<listitem>
						<para>
							Save the selected revision to a file so you
							have an older version of that file. If the Log Dialog is shown
							for a folder this command is available from the filelist in
							the window where the log message is shown!
							This option is only available when you access the log for a file.
						</para>
					</listitem>
					<listitem>
						<para>
							Open the repository browser to examine the selected folder.
							This option is only available when you access the log for
							a directory.
						</para>
					</listitem>
					<listitem>
						<para>
							Create a branch/tag from a selected revision.
							This is useful e.g. if you forgot to create a tag and already
							committed some changes which weren't supposed to get into
							that release.
						</para>
					</listitem>
					<listitem>
						<para>
							Update your working copy to the selected
							revision. Useful if you want to have your working copy reflect
							a time in the past. It is best to update a whole directory
							in your working copy, not just one file, otherwise your
							working copy will be inconsistent and you will be unable to
							commit any changes.
						</para>
					</listitem>
					<listitem>
						<para>
							Revert changes from which were made in the selected
							revision. The changes are reverted in your working copy so
							this operation does <emphasis>not</emphasis> affect the
							repository at all! Note that this will undo the changes
							made in that revision only. It does not replace your
							working copy with the entire file at the earlier revision.
							This is very useful for undoing an earlier change when
							other unrelated changes have been made since.
						</para>
					</listitem>
					<listitem>
						<para>
							Search log messages for the text you enter. This searches
							the log messages that you entered and also the action summaries
							created by Subversion (shown in the bottom pane). The search
							is not case sensitive.
						</para>
					</listitem>
				</itemizedlist>
			</para>
			<para>
				<figure id="tsvn-DUG-showlog-2-dia-2">
					<title>The Log Dialog Bottom Pane with Context Menu</title>
					<graphic fileref="images/LogContextMenu2.png"/>
				</figure>

				The bottom pane of the Log Dialog has a context menu that allows you to
				show differences made in the selected revision for the selected file.
				This context menu is only available for files shown as <literal>Modified</literal>.
			</para>
		</sect2>
		<sect2 id="tsvn-DUG-showlog-3">
			<title>Getting all log messages</title>
			<para>
				The Log Dialog does not always show all changes ever made for a
				number of reasons:
				<itemizedlist>
					<listitem>
						<para>
							For a large repository there may be hundreds or even
							thousands of changes and fetching them all could take
							a long time. Normally you are only interested in the
							more recent changes. By default, the number of log
							messages fetched is limited to 100, but you can change
							this value in 
							<menuchoice>
								<guimenuitem>Settings</guimenuitem>
							</menuchoice>
							(<xref linkend="tsvn-DUG-settings"/>),
						</para>
					</listitem>
					<listitem>
						<para>
							When you check the log messages for a branch (or tag),
							Show Log only displays log messages back to the root
							of that particular branch - the point where the copy
							was made. This gives a quick indication of the changes
							that were made in that branch only.
						</para>
						<para>
							Note that this only applies in your working copy.
							If you are using the repo-browser, log messages
							continue through branch points.
						</para>
					</listitem>
				</itemizedlist>
				If you want to see <emphasis>all</emphasis> log messages right back
				to revision 1, press <guibutton>Get All</guibutton>.
			</para>
		</sect2>
		<sect2 id="tsvn-DUG-showlog-4">
			<title>Changing the log message and author</title>
			<para>
				Sometimes you might want to change a log message you once entered,
				maybe because there's a spelling error in it or you want to
				improve the message or change it for other reasons. Or you want to
				change the author of the commit because you forgot to set up
				authentication or...
			</para>
			<para>
				Subversion lets you change both the log message and the author
				of revisions any time you want. But since such changes can't be
				undone (those changes are not versioned) this feature is disabled
				by default. To make this work, you must set up a pre-revprop-change
				and a post-revprop-change hook. Please refer to the Subversion Book
				for details about how to do that.
			</para>
			<para>
				Once you've set up your server with the required hooks, you can
				change both author and log message of any revision. To do that with
				TortoiseSVN you must <action>doubleclick</action> on either the
				author or logmessage column in the log dialog while holding down
				the SHIFT-key. If you don't press the SHIFT-key or don't click on
				one of these columns the default doubleclick action is executed
				(showing a diff of that revision).
			</para>
			<warning>
				<para>
					Because Subversion's revision properties are not versioned, making 
					modifications to such a property (for example, the <literal>svn:log</literal> commit 
					message property) will overwrite the previous value of that 
					property <emphasis>forever</emphasis>.
				</para>
			</warning>
		</sect2>
	</sect1>
	<!-- ================================================================= -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-DUG-branchtag">
		<title>Branching / Tagging</title>
		<indexterm>
			<primary>branch</primary>
		</indexterm>
		<indexterm>
			<primary>tag</primary>
		</indexterm>
		<indexterm>
			<primary>copy</primary>
		</indexterm>
		<?dbhh topicname="HIDD_COPY"?>
		<para>
			One of the features of version control systems is the ability
			to isolate changes onto a separate line of development.
			This line is known as a <firstterm>branch</firstterm>.
			Branches are usually used to try out new features without
			disturbing the main branch of development with compiler
			errors and bugs. As soon as the new feature of the branch
			is stable enough then the branch is <firstterm>merged</firstterm>
			back into the main branch (the trunk).
		</para>
		<para>
			Another feature of version control systems is the ability
			to mark particular revisions (e.g. a release version),
			so you can at any time recreate a certain build or
			environment. This process is known as <firstterm>tagging</firstterm>.
		</para>
		<para>
			Subversion does not know a special command for branching
			or tagging. Subversion uses so called <literal>cheap copies</literal>
			instead. Cheap copies are something similar to links,
			which means that no actual copy is made but just a link
			to a specific file/revision is created.
		</para>
		<para>
			Before you create a branch or tag from your working copy, you
			must make sure it is updated to the same level as the repository.
			Even if you know that no-one else has made any changes (maybe you
			are the sole developer) it is still a good idea to update your
			working copy. If you have previously committed changes in a sub-folder
			the parent folder may not have been updated to the latest revision,
			which can prevent a branch/tag operation from working. 
		</para>
		<para>
			If you have imported your project with the recommended
			directory structure creating a branch or tag version is very simple:

			<figure id="tsvn-DUG-branchtag-dia-1">
				<title>The Branch/Tag Dialog</title>
				<graphic fileref="images/Copy.png"/>
			</figure>

			Select the parent folder of your working copy and select
			the command
			<menuchoice>
				<guimenuitem>Branch/Tag...</guimenuitem>
			</menuchoice>
			from the context menu. Enter the URL to the repository path for
			branches or tags into the dialog. So instead of
			<filename>trunk</filename>
			you would now use
			<filename>tags/tagname</filename>
			where
			<filename>tagname</filename>
			would be e.g.
			<filename>ProjectName_v1.10</filename>.
<screen>
    C:/SVNRepository/trunk/ProjectName/...
    C:/SVNRepository/trunk/AnotherProject/...
    C:/SVNRepository/branches/ProjectName_SpecialDebugBuildBasedOn_v1.09/
    C:/SVNRepository/tags/ProjectName_v1.10
</screen>
			If you press
			<guibutton>OK</guibutton>
			now, Subversion just creates a cheap copy
			of your selected Directory <emphasis>inside the repository</emphasis>.
			Creating a Branch / Tag does <emphasis>not</emphasis> affect your working
			copy.
		</para>
		<para>
			If you have uncommitted changes inside the working copy, TortoiseSVN will
			commit these together with creating the Tag
		</para>
		<sect2 id="tsvn-DUG-switch-1">
			<title>To Checkout or to Switch...</title>
			<?dbhh topicname="HIDD_SWITCH"?>
			<para>
				...that is (not really) the question. While a checkout checks
				out everything from the desired branch into your working
				directory, a 
				<menuchoice>
					<guimenuitem>Switch...</guimenuitem>
				</menuchoice>
				only transfers the changed data to your
				working copy. Good for the network load, good for your patience. :-)
			</para>
			<para>
				To be able to work with your freshly generated copy you
				have several ways to handle it. You can:
				<itemizedlist>
					<listitem>
						<para>
							do a
							<menuchoice>
								<guimenuitem>Checkout</guimenuitem>
							</menuchoice>
							of it again. You can check it out to any location on your
							local disk and you can create as many working copies
							from your repository as you like.
						</para>
					</listitem>
					<listitem>
						<para>
							Switch your current working copy to the
							newly created copy in the repository. Again select the
							parent folder of your project and select the command
							<menuchoice>
								<guimenuitem>Switch...</guimenuitem>
							</menuchoice>
							from the context menu.
						</para>
						<para>
							In the next dialog yout enter the URL of the branch you just created.
							Leave the Checkbox 
							<guilabel>latest revision</guilabel>
							active and click on
							<guibutton>OK</guibutton>.
							Your working copy is switched to the new branch / tag.
						</para>
						<para>
							Switch works just like Update in that it never discards your
							local changes. Any changes you have made to your working copy
							which have not yet been committed will be merged when you
							do the Switch. If you do not want this to happen then you
							must either commit the changes before switching, or revert
							your working copy to an already-committed revision (typically HEAD).
						</para>
					</listitem>
				</itemizedlist>
				<figure id="tsvn-DUG-switch-dia-1">
					<title>The Switch Dialog</title>
					<graphic fileref="images/Switch.png"/>
				</figure>
			</para>
			<para>
				From now on working with branches or tags differs a bit:
				<itemizedlist>
					<listitem>
						<para>
							Tags are typically used to create a static snapshot of the
							project at a particular stage. As such they not normally
							used for development - that's what branches are for, which
							is the reason we recommended the
							<filename>/trunk /branches /tags</filename>
							repository structure in the first place. Working on a tag
							revision is <emphasis>not a good idea</emphasis>, but
							because your local files are not write protected there is
							nothing to stop you doing this by mistake.
							However, if you try to commit to a path in the repository
							which contains <filename>/tags</filename>, TortoiseSVN will
							warn you.
						</para>
						<para>
							It may be that you need to make further changes to a
							release which you have already tagged. The correct way
							to handle this is to create a new branch from the tag
							first and commit the branch. Do your Changes on this
							branch and then create a new tag from this new branch, e.g. 
							<filename>Version_1.0.1</filename>.
						</para>
					</listitem>
					<listitem>
						<para>
							If you modify a working copy created from
							a branch and commit, then all changes go to the new
							branch and <emphasis>not</emphasis> the main branch. Only the modifications
							are stored. The rest remains a cheap copy.
						</para>
					</listitem>
				</itemizedlist>
			</para>
		</sect2>
		<sect2 id="tsvn-DUG-merge-2">
			<title>Merging A Branch Back Into The Main Branch</title>
			<indexterm>
				<primary>merge</primary>
			</indexterm>
			<?dbhh topicname="HIDD_MERGE"?>
			<para>
				<figure id="tsvn-DUG-merge-dia-1">
					<title>The Merge Dialog</title>
					<graphic fileref="images/Merge.png"/>
				</figure>
				To merge revisions you need to go to a working copy of the
				branch in which you want to receive the changes, (normally the trunk).
				Select
				<menuchoice>
					<guimenuitem>Merge...</guimenuitem>
				</menuchoice>
				from the context menu.
				<orderedlist>
					<listitem>
						<para>
							In the <guilabel>From:</guilabel> field enter the full
							folder url of the start branch or tag containing your changes. You may also
							click
							<guibutton>...</guibutton>
							to browse the repository and find the desired branch.
						</para>
					</listitem>
					<listitem>
						<para>
							In the <guilabel>To:</guilabel> field enter the full
							folder url of the end branch or tag containing your changes. You may also
							click
							<guibutton>...</guibutton>
							to browse the repository and find the desired branch.
						</para>
					</listitem>
					<listitem>
						<para>
							In the <guilabel>From Revision</guilabel> field enter the initial revision number.
							This is the revision <emphasis>before</emphasis> the changes you want to merge.
							Revision numbers are auto-incremented after each commit. You want
							to start merging the changes before the revision number is auto-incremented. For example,
							if your log messages look something like this:
<screen>
Rev Comments
39. Working on MyBranch
38. Working on trunk
37. Working on MyBranch
36. Create branch MyBranch
35. Working on trunk
34. Working on trunk
         ...
</screen>
							If you now want to merge the changes from MyBranch into the trunk you have 
							to choose 36 as the <guilabel>From Revision</guilabel>. Not 37 as you might think.
						</para>
						<para>
							Click on <guibutton>Show Log</guibutton>, if you need to browse the
							logs to find this revision number. This will probably never be from
							revision 0.
						</para>
					</listitem>
					<listitem>
						<para>
							In the <guilabel>To Revision</guilabel> field enter the revision you want to merge
							the changes into (probably the main branch). You can specify single
							revisions to merge. This doesn't need to be HEAD.
						</para>
					</listitem>
					<listitem>
						<para>
							Click <guibutton>OK</guibutton> to complete the merge and enter a log message. Your
							log message should <emphasis>always</emphasis> include the revision numbers of this merge.
							If you want to apply another merge at a later time you will need to know what you
							have already merged. You can't apply a change more than once.
							Unfortunately merge information is not stored by Subversion. See the
							Subversion book for more information about this, (search for "repeated merge problem").
						</para>
					</listitem>
				</orderedlist>
				The merge is now complete. It's a good idea to have a look at the merge and see if it's
				as expected. Merging is usually quite complicated. Conflicts often arise if
				the branch has drifted far from the trunk.
			</para>
			<para>
				If you want to keep this branch up to date with the trunk, you should immediately merge
				changes from trunk back to the this branch. Use this method and local changes won't get
				in your way. Of course, you should still avoid re-merging trunk changes, as explained above.
			</para>
			<para>
				If you want to see what changes will be made by a merge and see where
				possible conflicts may occur you can check the option
				<guibutton>
					Dry Run
				</guibutton>.
				This will force the merge command to do a merge, but <emphasis>not</emphasis>
				modify the working copy at all.
			</para>
			<important>
				<para>
				Subversion can't merge a file with a folder and vice versa - only
				folders to folders and files to files. If you click on a file and open up
				the merge dialog, then you have to give a path to a file in that dialog. If you
				select a folder and bring up the dialog, then you must specify a folder url
				for the merge.
				</para>
			</important>
		</sect2>
	</sect1>
	<!-- ================================================================= -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-DUG-patch">
		<title>Creating and Applying Patches</title>
		<indexterm>
			<primary>patch</primary>
		</indexterm>
		<?dbhh topicname="HIDD_PATCH"?>
		<para>
			For open source projects (like this one) everyone has read
			access to the repository, and anyone can make a contribution
			to the project. So how are those contributions controlled?
			If just anyone could commit changes, the project would be permanently
			unstable and probably permanently broken. In this situation the
			change is managed by submitting a <firstterm>patch</firstterm> file
			to the development team, who do have write access.
			They can review the patch first, and then either submit it to the
			repository or reject it back to the author.
		</para>
		<para>
			Patch files are simply Unified-Diff files showing the differences
			between your working copy and the base revision.
		</para>
		<sect2 id="tsvn-DUG-patch-1">
			<title>Creating a Patch File</title>
			<para>
				First you need to make <emphasis>and test</emphasis> your changes.
				Then instead of using
				<menuchoice>
					<guimenuitem>Commit...</guimenuitem>
				</menuchoice>
				on the parent folder, you select
				<menuchoice>
					<guimenuitem>Create Patch...</guimenuitem>
				</menuchoice>
				This will produce a single file containing a summary of all the changes
				you have made since the last update from the repository. If you create a
				patch file, make some more changes and then create another patch, the
				second patch file will include <emphasis>both</emphasis> sets of changes.
			</para>
			<para>
				Just save the file using a filename of your choice.
				Patch files can have any extension you like, but by convention they
				should use the <filename>.patch</filename> extension.
				You are now ready to submit your patch file.
			</para>
		</sect2>
		<sect2 id="tsvn-DUG-patch-2">
			<title>Applying a Patch File</title>
			<para>
				Patch files are applied to your working copy. This should be done
				from the same folder level as was used to create the patch.
				If you are not sure what this is, just look at the first line of
				the patch file. For example, if the first file being worked on was
				<filename>doc/source/english/chapter1.xml</filename>
				and the first line in the patchfile is
				<filename>Index: english/chapter1.xml</filename>
				then you need to apply the patch to the
				<filename>english</filename> folder.
			</para>
			<para>
				In order to apply a patch file to your working copy, you need
				to have at least read access to the repository.
				The reason for this is that the merge program must
				reference the changes back to the revision against
				which they were made by the remote developer.
			</para>
			<para>
				From the context menu for that folder, click on
				<menuchoice>
					<guimenuitem>Apply Patch...</guimenuitem>
				</menuchoice>
				This will bring up a file open dialog allowing you to select the
				patch file to apply. By default only <filename>.patch</filename>
				files are shown, but you can opt for "All files". Open the file
				and TortoiseMerge runs to merge the changes from the patch file
				with your working copy. A small window lists the files which have
				been changed. Double click on each one in turn, review the changes
				and save the merged files.
			</para>
			<para>
				The remote developer's patch has now been applied to your working copy,
				so you need to commit to allow everyone else to access the changes
				from the repository.
			</para>
		</sect2>
	</sect1>
	<!-- ================================================================= -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-DUG-relocate">
		<title>Relocating a working copy</title>
		<indexterm>
			<primary>relocate</primary>
		</indexterm>
		<?dbhh topicname="HIDD_RELOCATE"?>
		<para>
			<figure id="tsvn-DUG-relocate-dia-1">
				<title>The Relocate Dialog</title>
				<graphic fileref="images/Relocate.png"/>
			</figure>
			If your repository has for some reason changed it's
			location (IP/URL). Maybe you're even stuck and can't
			commit and you don't want to checkout your working
			copy again from the new location and to move all your
			changed data back into the new working copy,
			<menuchoice>
				<guimenuitem>relocate</guimenuitem>
			</menuchoice>
			is the command you are looking for. It basically
			does not much: it scans all "entries" files in the
			.svn folder and changes the URL of the entries to the new value.
		</para>
		<caution>
			<para>
			Don't use the relocate command to switch your working copy to a different
			branch! If you do that, then you will get many unexplainable error messages
			while updating, committing, ...
			</para>
			<para>
			The relocate command must <emphasis>only</emphasis> be used if the
			URL of the server changed!
			</para>
		</caution>
	</sect1>
	<!-- ================================================================= -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-DUG-repobrowser">
		<title>The Repository Browser</title>
		<indexterm>
			<primary>repobrowser</primary>
		</indexterm>
		<?dbhh topicname="HIDD_REPOSITORY_BROWSER"?>
		<para>
		Sometimes you need to work directly on the repository, without having
		a working copy. That's what the <firstterm>Repository Browser</firstterm>
		is for. What the explorer and the icon overlays are for your working
		copy is the Repository Browser for the repository.
			<figure id="tsvn-DUG-repobrowser-dia-1">
				<title>The Repository Browser</title>
				<graphic fileref="images/Repobrowser.png"/>
			</figure>
		With the Repository Browser you can execute commands like copy, move,
		rename, ... directly on the repository.
		</para>
		<para>
		On the top of the Repository Browser Window you can enter the URL of
		the repository and the revision you want to browse. Browsing an older
		revision is useful if you want to e.g. recover a previously deleted
		file. Use the 
		<menuchoice>
			<guimenuitem>Copy To...</guimenuitem>
		</menuchoice>
		command to do that and enter the full working copy path to where
		you want to recover your deleted file.
		</para>
	</sect1>	
	<!-- ================================================================= -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-DUG-settings">
		<title>TortoiseSVN's Settings</title>
		<indexterm>
			<primary>settings</primary>
		</indexterm>
		<para>
			To find out what the different settings are for, just leave your
			mouse pointer a second on the editbox/checkbox... and a helpful
			tooltip will popup.
		</para>
		<sect2 id="tsvn-DUG-settings-main">
			<?dbhh topicname="HIDD_SETTINGSMAIN"?>
			<title>The Settings Dialog, Main Tab</title>
			<para>
				<figure id="tsvn-DUG-settings-dia-1">
					<title>The Settings Dialog, Main Tab</title>
					<graphic fileref="images/SettingsMain.png"/>
				</figure>
				Apart from setting your preferred language, this dialog allows you to
				specify (almost) every setting TortoiseSVN has. 
				<variablelist>
					<varlistentry>
						<term>Language</term>
						<listitem>
							<para>
								Selects your user interface language.
								What else did you expect?
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Exclude pattern</term>
						<listitem>
							<para>
								<indexterm>
									<primary>exclude pattern</primary>
								</indexterm>
								Exclude patterns are used to prevent unversioned files from
								showing up e.g. in the commit dialog. Files matching the
								patterns are also ignored by an import.
								Exclude files or directories by typing in the names or extensions.
								Patterns are separated by spaces e.g.
								<literal>bin obj *.bak *.~?? *.jar *.[Tt]mp</literal>.
								The first two entries refer to directories, the 
								other four to files.
							</para>
							<para>
								This exclude pattern will affect all your projects. It is not versioned, so it 
								will not affect other users. In contrast you can also use the versioned <literal>svn:ignore</literal> 
								property to exclude files or directories from version control. You can set the <literal>svn:ignore</literal> 
								property using the 
								<menuchoice>
									<guimenuitem>Add to Ignore List</guimenuitem>
								</menuchoice>
								command. After commiting every other user will have the same 
								<literal>svn:ignore</literal> property set for this project / directory as you.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Default number of log messages</term>
						<listitem>
							<para>
								Limits the number of log messages that TortoiseSVN fetches when you first select
								<menuchoice>
									<guimenuitem>Show Log</guimenuitem>
								</menuchoice>
								Useful for slow connections / servers. You can always
								<guibutton>Fetch All</guibutton> messages.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Edit...</term>
						<listitem>
							<para>
								... the subversion configuration file directly.
								Some settings cannot be modified by TortoiseSVN.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Short date / time format in log messages</term>
						<listitem>
							<para>
								If the standard long messages use up too much 
								space on your sceen use the short format.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Set filedates to "last commit time"</term>
						<listitem>
							<para>
								This option tells TortoiseSVN to set the filedates to the last commit time 
								when doing a checkout or an update. Otherwise TortoiseSVN will use 
								the current date.
								If you are developing software it is generally best to use the current date
								because build systems normally look at the datestamps to decide which
								files need compiling. If you use "last commit time" and revert to an
								older file revision, your project may not compile as you expect it to.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Close windows automatically</term>
						<listitem>
							<para>
								TortoiseSVN will automatically close all progress dialogs 
								when the action is finished without error.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Check for newer versions</term>
						<listitem>
							<para>
								If checked, TortoiseSVN will check once a week if an update is available
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Minimum logsize in chars</term>
						<listitem>
							<para>
								The minimum length of a log message for a commit.
								If you enter a shorter message than specified here, the commit is disabled.
								This feature is very useful for reminding you to supply a proper
								descriptive message for every commit.
								A value of zero allows empty log messages.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Don't remove log messages when cancelling a commit</term>
						<listitem>
							<para>
								If for some reason the commit is cancelled (User cancel or commit error), 
								then TortoiseSVN will preserve the last commit message you typed if
								you try to commit again.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Show BugID/Issue-Nr. Box</term>
						<listitem>
							<para>
								Shows a textbox in the commit dialog where you can enter
								a BugID or Issue-Nr. from a bugtracker to associate the
								commit with that ID/number.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Paste Log template in english</term>
						<listitem>
							<para>
								This only applies if you have selected a language other
								than english for TortoiseSVN. In that case, when pasting
								the log template in the commit dialog, the status of each
								file is pasted in the selected language. With this option
								checked, the status is pasted in english.
							</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</para>
		</sect2>
		<sect2 id="tsvn-DUG-settings-overlay">
			<?dbhh topicname="HIDD_SETTINGSOVERLAY"?>
			<title>The Settings Dialog, Look and Feel Tab</title>
			<para>
				<figure id="tsvn-DUG-settings-dia-2">
					<title>The Settings Dialog, Look and Feel Tab</title>
					<graphic fileref="images/SettingsOverlay.png"/>
				</figure>
				This tab allows you to choose the items for which TortoiseSVN will
				display icon overlays. If you feel that your icon overlays are very 
				slow (explorer is not responsive), uncheck the
				"Recurse into folders to fetch the status" box.
				You can even disable all icon overlays, but where's the fun in that?
			</para>
			<para>
				The <guilabel>Exclude Paths</guilabel> are used to tell TortoiseSVN for which
				paths <emphasis>not</emphasis> to show icon overlays and status columns.
				This is useful if you have some very big working copies containing
				only libraries which you won't change at all and therefore don't
				need the overlays. For example:
			</para>
			<para>
				<filename>f:\development\SVN\Subversion</filename> will disable
				the overlays on <emphasis>only</emphasis> that specific folder. You
				still can see the overlays on all files and folder inside that folder.
			</para>
			<para>
				<filename>f:\development\SVN\Subversion*</filename> will disable the
				overlays on <emphasis>all</emphasis> files and folders whose path
				starts with <filename>f:\development\SVN\Subversion</filename>. That
				means you won't see overlays for any files and folders below that
				path.
			</para>
			<para>
			The same applies to the <guilabel>Include Paths</guilabel>. Only that for those
			paths the overlays are shown even if the overlays are disabled for
			that specific drive type.
			</para>
			<para>
				You can also specify here which of the TortoiseSVN context menu
				entries will show up in the main context menu.
			</para>
		</sect2>
		<sect2 id="tsvn-DUG-settings-network">
			<?dbhh topicname="HIDD_SETTINGSPROXY"?>
			<title>The Settings Dialog, Network Tab</title>
			<indexterm>
				<primary>proxy server</primary>
			</indexterm>
			<para>
				<figure id="tsvn-DUG-settings-dia-4">
					<title>The Settings Dialog, Network Tab</title>
					<graphic fileref="images/SettingsProxy.png"/>
				</figure>
				Here you can configure your proxy server, if you need one to get through your company's firewall.
			</para>
			<para>
				You can also specify which program TortoiseSVN should use to establish a secure connection to a svn+ssh repository.
			</para>
		</sect2>
		<sect2 id="tsvn-DUG-settings-progs">
			<?dbhh topicname="HIDD_SETTINGSPROGS"?>
			<title>The Settings Dialog, Diff/Merge Tab</title>
			<para>
				<figure id="tsvn-DUG-settings-dia-5">
					<title>The Settings Dialog, Diff/Merge Tab</title>
					<graphic fileref="images/SettingsProgs.png"/>
				</figure>
				Here you can define your own diff/merge programs that TortoiseSVN should use.
				The basic setting is to use the builtin TortoiseMerge which is installed alongside TortoiseSVN.
				<variablelist>
					<varlistentry>
						<term>Diff Program</term>
						<listitem>
							<para>
							An external diff program used for comparing different revisions of files.
							You can specify the following parameters to the path:
							<variablelist>
								<varlistentry>
									<term>%base</term>
									<listitem>
										<para>
											The original file without your changes
										</para>
									</listitem>
								</varlistentry>
								<varlistentry>
									<term>%mine</term>
									<listitem>
										<para>
											Your own file, with your changes
										</para>
									</listitem>
								</varlistentry>
							</variablelist>
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Merge Program</term>
						<listitem>
							<para>
							An external merge program used to resolve conflicted files. You can specify the 
							following parameters to the path. The order of the parameters depends on the 
							merge program you use.
							<variablelist>
								<varlistentry>
									<term>%base</term>
									<listitem>
										<para>
											the original file without your or the others changes
										</para>
									</listitem>
								</varlistentry>
								<varlistentry>
									<term>%mine</term>
									<listitem>
										<para>
											your own file, with your changes
										</para>
									</listitem>
								</varlistentry>
								<varlistentry>
									<term>%theirs</term>
									<listitem>
										<para>
											the file as it is in the repository
										</para>
									</listitem>
								</varlistentry>
								<varlistentry>
									<term>%merged</term>
									<listitem>
										<para>
											the conflicted file, the result of the merge operation
										</para>
									</listitem>
								</varlistentry>
							</variablelist>
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Diff Viewer</term>
						<listitem>
							<para>
							A viewer program for GNU diff files (patch files).
							If you don't have one the builtin option is to use NotePad.
							No Parameters.
							</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</para>
			<para>
				<figure id="tsvn-DUG-settings-dia-6">
					<title>The Settings Dialog, Diff/Merge Advanced Dialog</title>
					<graphic fileref="images/SettingsProgsAdv.png"/>
				</figure>
				In the advanced settings, you can define a different diff and merge program for every file extension. 
				For instance you could associate Photoshop as the "Diff" Program for .jpg files :-)
			</para>
		</sect2>
	</sect1>
	<!-- ================================================================= -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-DUG-blame">
		<title>Who Changed Which Line?</title>
		<indexterm>
			<primary>blame</primary>
		</indexterm>
		<?dbhh topicname="HIDD_BLAME"?>
		<para>
			<figure id="tsvn-DUG-blame-dia-1">
				<title>The Annotate / Blame Dialog</title>
				<graphic fileref="images/BlameDialog.png"/>
			</figure>
			Sometimes you need to know not only what lines have changed, but also
			who exactly changed specific lines in a file. That's when the
			<menuchoice>
				<guimenuitem>Blame...</guimenuitem>
			</menuchoice>,
			sometimes also referred to as <firstterm>annotate</firstterm> command comes in handy.
		</para>
		<para>
			This command lists for every line in a file the author and the revision
			the line was changed.
		</para>
		<para>
			If you're not interested in changes from earlier revisions you can
			set the revision from which the blame should start. Set this to <literal>1</literal>,
			if you want the blame for <emphasis>every</emphasis> revision.
		</para>
		<para>
			Once you press <guibutton>Ok</guibutton> TortoiseSVN starts retrieving
			the data to create the blame file. Please note: This can take several
			minutes to finish, depending on how much the file has changed and
			of course your network connection to the repository. Once the blame
			process has finished the result is written into a temporary file and
			TortoiseSVN opens your default text editor to show you the result.
		</para>
		<para>
			The example shows the first thirty lines of the file
			<filename>/Subversion/include/svn_io.h</filename> as of Revision 7566 from
			the Subversion source. For each line it shows the
			<literal>line number</literal>,
			<literal>revision</literal>,
			<literal>date of last commit</literal>, the
			<literal>author</literal> and of course the actual
			<literal>line</literal> in the file.
<screen>
line  rev    date              author     content

  0  4127 03:03:39, 15.12.2002 rooneg     /**
  1  4127 03:03:39, 15.12.2002 rooneg      * @copyright
  2  1224 21:24:10, 08.02.2002 kfogel      * ====================================================================
  3  4233 02:28:10, 03.01.2003 blair       * Copyright (c) 2000-2003 CollabNet.  All rights reserved.
  4     1 06:24:14, 31.08.2001 svn         *
  5     1 06:24:14, 31.08.2001 svn         * This software is licensed as described in the file COPYING, which
  6     1 06:24:14, 31.08.2001 svn         * you should have received as part of this distribution.  The terms
  7     1 06:24:14, 31.08.2001 svn         * are also available at http://subversion.tigris.org/license-1.html.
  8     1 06:24:14, 31.08.2001 svn         * If newer versions of this license are posted there, you may use a
  9     1 06:24:14, 31.08.2001 svn         * newer version instead, at your option.
 10     1 06:24:14, 31.08.2001 svn         *
 11     1 06:24:14, 31.08.2001 svn         * This software consists of voluntary contributions made by many
 12     1 06:24:14, 31.08.2001 svn         * individuals.  For exact contribution history, see the revision
 13     1 06:24:14, 31.08.2001 svn         * history and logs, available at http://subversion.tigris.org/.
 14     1 06:24:14, 31.08.2001 svn         * ====================================================================
 15  4127 03:03:39, 15.12.2002 rooneg      * @endcopyright
 16  4127 03:03:39, 15.12.2002 rooneg      *
 17  4127 03:03:39, 15.12.2002 rooneg      * @file svn_io.h
 18  4127 03:03:39, 15.12.2002 rooneg      * @brief general Subversion I/O definitions

 19     1 06:24:14, 31.08.2001 svn         */
 20     1 06:24:14, 31.08.2001 svn
 21     1 06:24:14, 31.08.2001 svn        /* ==================================================================== */
 22     1 06:24:14, 31.08.2001 svn
 23     1 06:24:14, 31.08.2001 svn
 24     1 06:24:14, 31.08.2001 svn        #ifndef SVN_IO_H
 25     1 06:24:14, 31.08.2001 svn        #define SVN_IO_H

 26     1 06:24:14, 31.08.2001 svn
 27     1 06:24:14, 31.08.2001 svn        #include &lt;apr.h&gt;
 28     1 06:24:14, 31.08.2001 svn        #include &lt;apr_pools.h&gt;
 29     1 06:24:14, 31.08.2001 svn        #include &lt;apr_file_io.h&gt;
 30   303 03:26:32, 25.10.2001 cmpilato   #include &lt;apr_thread_proc.h&gt;
</screen>
		</para>
	</sect1>
	<!-- ================================================================= -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-DUG-donate">
		<title>Final Step</title>
		<para>
			If you like TortoiseSVN and use it often,
			please support the developers!
		</para>
		<para>
			You can help us by either sending in patches and
			play an active role in development or you can
			cheer up the hard working developers.
		</para>
		<para>
			While working on TortoiseSVN we love to listen to music.
			And since we work many hours on the project we need a
			<emphasis>lot</emphasis> of music. Therefore we have set
			up some wish-lists with our favourite music CD's and DVD's:
			<itemizedlist>
				<listitem>
					<para>
						The media wish list of Stefan is
						<ulink url="http://www.amazon.com/o/registry/17DKTOSXX1KJK">here</ulink>
						(English) or 
						<ulink url="http://www.amazon.de/exec/obidos/wishlist/26JA3LXZXY4TB/">here</ulink>
						(German).
					</para>
				</listitem>
				<listitem>
					<para>
						Luebbe has got an
						<ulink url="href=http://amazon.com/gp/registry/13DTTC8JF4UD5">English (Amazon.com)</ulink>
						and a
						<ulink url="href=http://www.amazon.de/exec/obidos/wishlist/3IKWLV2U0TVUA/">German (Amazon.de)</ulink>
						wishlist too.
					</para>
				</listitem>
			</itemizedlist>

		Please have a look at the list of People who contributed to the project
		by e.g creating new translations etc.
		</para>
	</sect1>
</chapter>
