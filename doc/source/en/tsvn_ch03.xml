<chapter id="tsvn-serversetup">
	<title>Setting Up A Server</title>
	<simplesect>
		<para>
		To use TortoiseSVN, you need a server where your repository is located.
		This chapter shows you step by step on how you can set up such a
		server on a Windows machine.
		</para>
		<para>
		If you don't have a server and/or if you only work alone then you
		still can use TortoiseSVN and Subversion. The repository is then
		stored locally on your harddrive. See ------- about how to set up
		such a local repository.
		</para>
	</simplesect>
	<!-- ================================================================= -->
	<!-- ======================== SECTION 1 ============================== -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-serversetup-apache">
		<title>Apache Based Server</title>
		<sect2 id="tsvn-serversetup-apache-1">
			<title>Introduction</title>
			<para>
			Probably the best of all possible server setups for Subversion
			is the Apache based one. It's not only the most mature
			and most stable solution but has other benefits as well:
			</para>
			<variablelist>
				<varlistentry>
					<term>WebDAV</term>
					<listitem>
						<para>The Apache based Subversion server
						uses the WebDAV protocoll which is supported by many
						other programs as well. You could e.g. mount such
						a repository as a "Webfolder" in the Windows explorer
						and then access it like any other folder in the 
						filesystem</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Browsing The Repository</term>
					<listitem>
						<para>You can point your browser to the
						URL of your repository and browse the contents of
						it without having a Subversion client installed. This
						gives access to your data to a much wider circle of
						users.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Authentication</term>
					<listitem>
						<para>You can use any authentication 
						mechanism Apache supports, including SSPI and LDAP.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Security</term>
					<listitem>
						<para>Since Apache is very stable and secure,
						you automatically get the same security for your
						repository. This includes SSL encryption.</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</sect2>
		<sect2 id="tsvn-serversetup-apache-2">
			<title>Installing Apache</title>
			<para>
			The first thing you need before installing Apache is a computer
			with either Windows2000 / WinXP+SP1 or Windows2003. Please note
			that Windows XP without the servicepack 1 will lead to bogus
			network data and could therefore corrupt your repository!
			</para>
			<para>
				<orderedlist>
					<listitem>
						<para>Download the latest version of the Apache
					webserver from 
					<ulink url="http://httpd.apache.org/download.cgi">
					http://httpd.apache.org/download.cgi</ulink>. Make sure
					that you download the version 2.0.xx &mdash; the version
					1.3.xx won't work!</para>
					</listitem>
					<listitem>
						<para>Once you have the Apache2 installer you
					can doubleclick on it and it will guide you through
					the installing process. Make sure that you enter the
					the server-URL correctly (if you don't have a dns name 
					for your server just enter the ip-address). I recommend 
					to install apache "for all users, on port 80, as a 
					service". Note: if you already have IIS or any other 
					program running which listens on port 80 the 
					installation might fail. If that happens, go to the 
					programs directory, \Apache Group\Apache2\conf and 
					locate the file httpd.conf. Edit that file so that 
					"Listen 80" is changed to a free port, e.g. "Listen 81". 
					Then restart the installation - this time it should 
					finish without problems.</para>
					</listitem>
					<listitem>
						<para>Now test if the Apache-webserver is 
					running correctly by pointing your webbrowser to 
					<systemitem class="url">http://localhost/</systemitem>
					&mdash; a preconfigured Website should show up.
					</para>
					</listitem>
				</orderedlist>
			</para>
		</sect2>
		<sect2 id="tsvn-serversetup-apache-3">
			<title>Installing Subversion</title>
			<para>
				<orderedlist>
					<listitem>
						<para>Download the latest version of Subversion
					from <ulink url="http://subversion.tigris.org/servlets/ProjectDocumentList?folderID=91">
					http://subversion.tigris.org/servlets/ProjectDocumentList?folderID=91</ulink>.
					</para>
					</listitem>
					<listitem>
						<para>Run the Subversion installer and follow
					the instructions. If the Subversion installer recognized
					that you've installed Apache, then you're almost done.
					If it couldn't find an Apache server then you have to
					do some additional steps.</para>
					</listitem>
					<listitem>
						<para>Open the windows-explorer, go to the 
					installation directory of Subversion (usually 
					<filename>c:\program files\Subversion</filename>) and 
					find the files <filename>/Apache2/modules/mod_dav_svn.so
					</filename> and <filename>mod_authz_svn.so</filename>
					&mdash; copy these files to the Apache modules directory, 
					if they're not already installed there. 
					(usually 
					<filename>c:\program files\apache group\apache2\modules) 
					</filename>
						</para>
					</listitem>
					<listitem>
						<para>Copy the files <filename>libdb42.dll
					</filename>, <filename>libeay32.dll</filename> and 
					<filename>ssleay32.dll</filename> from the Subversion 
					installation directory to the apache modules directory.
					</para>
					</listitem>
				</orderedlist>
			</para>
		</sect2>
		<sect2 id="tsvn-serversetup-apache-4">
			<title>Configuration</title>
			<para>
			Now you have set up Apache and Subversion, but Apache doesn't 
			know how to handle Subversion clients like TortoiseSVN yet.
			To get Apache to know which URL shall be used for Subversion 
			repositories you have to edit the Apache config file (usually 
			located in <filename>c:\program files\apache group\apache2\conf\httpd.conf
			</filename>) with any text editor you like (e.g. Notepad): 
			</para>
			<para>
				<orderedlist>
					<listitem>
						<para>If you don't have created a Subversion 
					repository yet it's time to do that now. I'd recommend 
					to create an empty folder with the name SVN 
					(e.g. <filename>D:\SVN</filename>). Open the command prompt
					(or DOS-Box), change into the just created folder and type
					<command>svnadmin create</command>
						</para>
					</listitem>
					<listitem>
						<para>Open the config file and find the lines
<screen>
#LoadModule dav_module modules/mod_dav.so
</screen>
					and
<screen>
#LoadModule dav_fs_module modules/mod_dav_fs.so
</screen>
					and remove the comment sign '<literal>#
					</literal>'.</para>
					</listitem>
					<listitem>
						<para>At the end of all those LoadModule lines add the
					lines 
<screen>
LoadModule dav_svn_module modules/mod_dav_svn.so
</screen>
					and 
<screen>
LoadModule authz_svn_module modules/mod_authz_svn.so
</screen>
					Alternatively you can 
					specify a complete path to the directory where Subversion 
					is installed. That way you don't have to copy the
					<filename>*.so</filename> files to the apache directory for 
					every update.</para>
					</listitem>
					<listitem>
						<para>Restart the apache service.</para>
					</listitem>
					<listitem>
						<para>At the end of the Config file add the 
					following lines:
<screen>
&lt;Location /svn&gt;
DAV svn
SVNParentPath D:\SVN
AuthType Basic
AuthName "Subversion repositories"
AuthUserFile passwd
#AuthzSVNAccessFile svnaccessfile
Require valid-user
&lt;/Location&gt;					
</screen>
					This configures Apache so that a Subversion repository is 
					available at http://localhost/svn/yoursubversionproject. 
					The access is restricted to known users/passwords. 
					<itemizedlist>
						<listitem>
							<para>A short explanation of what you just entered:
								<table id="tsvn-serversetup-apache-4-table">
									<title>Apache httpd.conf Settings</title>
									<tgroup cols="2">
									<thead>
									<row>
										<entry>Setting</entry>
										<entry>Explanation</entry>
									</row>
									</thead>
												<tbody>
													<row>
														<entry>&lt;Location /svn&gt;</entry>
														<entry>means that the Subversion repositories are 
							available from the URL <systemitem class="url">
							http://server/svn/</systemitem>
														</entry>
													</row>
													<row>
														<entry>DAV svn</entry>
														<entry>tells Apache which module will be 
							responsible to serve that URL &mdash; in this 
							case the Subversion module.</entry>
													</row>
													<row>
														<entry>SVNParentPath D:\SVN</entry>
														<entry>tells Subversion where to find the
							repositories</entry>
													</row>
													<row>
														<entry>AuthType Basic</entry>
														<entry>is to activate basic authentication, i.e. 
							Username/password</entry>
													</row>
													<row>
														<entry>AuthName "Subversion repositories"</entry>
														<entry>is used as an information whenever an 
							authentication dialog pops up to tell the user what 
							the authentication is for</entry>
													</row>
													<row>
														<entry>AuthUserFile passwd</entry>
														<entry>specifies which password file to use for
							authentication</entry>
													</row>
													<row>
														<entry>AuthzSVNAccessFile</entry>
														<entry>Location of the Access file for paths inside
							a subversion repository</entry>
													</row>
													<row>
														<entry>Require valid-user</entry>
														<entry>specifies that only users who entered a
							correct username/password are allowed to access
							the URL</entry>
													</row>
												</tbody>
											</tgroup>
										</table>
						But that's just an example. There are many, many more
						possibilities of what you can do with the Apache
						webserver.</para>
								</listitem>
								<listitem>
									<para>If you want your repository to have read
						access for everyone but write access only for specific 
						users you can change the line
<screen>
Require valid-user
</screen>
						to
<screen>
&lt;LimitExcept GET PROPFIND OPTIONS REPORT&gt;
Require valid-user
&lt;/LimitExcept&gt;
</screen>
									</para>
								</listitem>
								<listitem>
									<para>If you want to give users access only
						for specific folders inside a repository you have to 
						uncomment the line
<screen>
#AuthzSVNAccessFile svnaccessfile
</screen>
						and create a Subversion access file. An example file 
						would look like this:
<screen>
#[groups]
developers = user1,user2,user3,user4
docs = user5,user6,user7
#to allow everyone read access
[/]
* = r
#allow all developers complete access
@developers = rw
#give the doc people write access to the docs folder
[/project/trunk/doc]
@docs = rw
</screen>
									</para>
								</listitem>
							</itemizedlist>
						</para>
					</listitem>
					<listitem>
						<para>Open again the command prompt (DOS-Box), 
					change to the apache2 folder (usually 
					<filename>c:\program files\apache group\apache2</filename>)
					and create a password file by entering
<screen>
bin\htpasswd &ndash;c passwd &lt;username&gt;
</screen>
					This will create a file with the name passwd which is 
					used for authentication. Additional users can be added 
					with
<screen>
bin\htpasswd passwd &lt;username&gt;
</screen>
						</para>
					</listitem>
					<listitem>
						<para>Restart the apache service again.</para>
					</listitem>
					<listitem>
						<para>Point your browser to 
					<systemitem class="url">http://servername/svn/projectname
					</systemitem> (where projectname is the name of your 
					Subversion repository you created before). If all went 
					well you should be prompted for a username and password, 
					then you can see the contents of your 
					repository.</para>
					</listitem>
				</orderedlist>
			</para>
			<tip>
				<para>
				If you used the SVNParentPath directive then you don't have to 
				change the Apache config file everytime you add a new Subversion 
				repository. Simply create the new repository under the same 
				location as the first repository and you're done! In my company 
				I have direct access to that specific folder on the server via 
				SMB (normal windows file access). So I just create a new folder 
				there, run the TortoiseSVN command "create repository here..." 
				and a new project has a home... 
				</para>
			</tip>
		</sect2>
		<sect2 id="tsvn-serversetup-apache-5">
			<title>Authentication With A Windows Domain</title>
			<para>
			As you might have noticed you need to make a username/password 
			entry in the passwd file for each user separately. And if 
			(for security reasons) you want your users to change the 
			password from time to time you have to change that each time 
			manually.
			</para>
			<para>
			But there's a solution for that problem &mdash; at least if you're 
			accessing the repository from inside a LAN with a windows 
			domain controller: mod_auth_sspi!
			</para>
			<para>The original SSPI module was offered by Syneapps including
			sourcecode. But the development for it has been stopped. You can
			still find that module on the internet &mdash; just do a 
			google search for it. We also have a compiled version of it
			on our website, including a patch from Vladimir Berezniker. Get
			the module from <ulink url="http://tortoisesvn.tigris.org/mod_auth_sspi.zip">
			here</ulink>.
			</para>
			<itemizedlist>
				<listitem>
					<para>Download the module, copy the file 
				<filename>mod_auth_sspi.so</filename> in the apache modules 
				folder.</para>
				</listitem>
				<listitem>
					<para>Edit the apache config file: add the line
<screen>
LoadModule sspi_auth_module modules/mod_auth_sspi.so
</screen>
				to the LoadModule's section. Make sure you insert this line 
				<emphasis>before</emphasis> the line
<screen>
LoadModule auth_module modules/mod_auth.so
</screen>
					</para>
				</listitem>
				<listitem>
					<para>To make the Subversion location use this 
				type of authentication you have to change the line
<screen>
AuthType Basic 
</screen>
				to
<screen>
AuthType SSPI
</screen>
				also you need to add 
<screen>
SSPIAuth On
SSPIAuthoritative On
SSPIDomain &lt;domaincontroller&gt;
SSPIOfferBasic On
</screen>
				If you don't have a domain controller, leave the name of the 
                domain control as &lt;domaincontroller&gt;.
				</para>
				</listitem>
			</itemizedlist>
			<tip>
				<title>SSL and InternetExplorer</title>
				<para>
				If you're securing your server with SSL and use authentication
				against a windows domain you will encounter that browsing
				the repository with the Internet Explorer doesn't work
				anymore. Don't worry &mdash; this is only the Internet Explorer
				not able to authenticate. Other browsers don't have that
				problem and TortoiseSVN and any other Subversion client are
				still able to authenticate.
				</para>
				<para>
				If you still want to use IE to browse the repository you can
				either:
				<itemizedlist>
						<listitem>
							<para>define a separate &lt;Location /path&gt;
					directive in the apache config file, and add the 
					<literal>SSPIBasicPreferred On</literal>.
					This will allow IE to authenticate again, but other browsers
					and Subversion won't be able to authenticate against that
					location.</para>
						</listitem>
						<listitem>
							<para>Offer browsing with unencrypted 
					authentication (without SSL) too. Strangely IE doesn't have
					any problems with authenticating if the connection is not
					secured with SSL.</para>
						</listitem>
					</itemizedlist>
				</para>
			</tip>
		</sect2>
		<sect2 id="tsvn-serversetup-apache-6">
			<title>Securing the server with SSL</title>
			<para>
			The apache server doesn't have SSL support installed by default 
			due to US-export restrictions. But you can easily download the 
			required module from somewhere else and install it yourself.
			</para>
			<orderedlist>
				<listitem>
					<para>First you need the required files to enable 
				SSL. You can find those in the package available 
				<ulink url="http://hunter.campbus.com/">here</ulink>. Just 
				unzip the package and then copy <filename>mod_ssl.so</filename>
				to the <filename>modules</filename> folder of Apache and the 
				file <filename>openssl.exe</filename> to the <filename>bin
				</filename> folder. Also copy the file <filename>conf/ssl.conf 
				</filename> to the <filename>conf</filename> folder of Apache.
				</para>
				</listitem>
				<listitem>
					<para>Open the file <filename>ssl.conf</filename> 
				in the Apache conf folder with a text editor.</para>
				</listitem>
				<listitem>
					<para>Place a comment char (#) in front of the 
				following lines:
<screen>
DocumentRoot "c:/apache/htdocs"
ServerName new.host.name:443
ServerAdmin you@your.address
ErrorLog logs/error_log
TransferLog logs/access_log
</screen>
					</para>
				</listitem>
				<listitem>
					<para>change the line
<screen>
SSLCertificateFile c:/apache/conf/ssl.crt/server.crt
</screen>
				to
<screen>
SSLCertificateFile conf/ssl/my&ndash;server.cert
</screen>
				the line
<screen>
SSLCertificateKeyFile c:/apache/conf/ssl.key/server.key
</screen>
				to
<screen>
SSLCertificateKeyFile conf/ssl/my&ndash;server.key 
</screen>
				and the line
<screen>
SSLMutex  file:logs/ssl_mutex
</screen>
				to
<screen>
#SSLMutex  file:logs/ssl_mutex
SSLMutex  default
</screen>
					</para>
				</listitem>
				<listitem>
					<para>Delete the lines
<screen>
&lt;IfDefine SSL&gt;
</screen>
				and
<screen>
&lt;IfDefine&gt;
</screen>
					</para>
				</listitem>
				<listitem>
					<para>Open the Apache config file (<filename>
				httpd.conf</filename>) and uncomment the line
<screen>
#LoadModule ssl_module modules/mod_ssl.so 
</screen>
					</para>
				</listitem>
				<listitem>
					<para>Openssl needs a config file. You can download 
				a working one from 
				<ulink url="http://tud.at/programm/openssl.cnf">here</ulink>. 
				Please note: the file has the type <filename>*.cnf</filename>. 
				Windows treats such files in a special way but it really is 
				just a text file! 
				</para>
				</listitem>
				<listitem>
					<para>Next you need to create an SSL certificate. 
				To do that open a command prompt (DOS-Box) and change to 
				the apache folder (e.g. 
				<filename>C:\program files\apache group\apache2</filename>) 
				and type the following command:
<screen>
bin\openssl req &ndash;config bin\openssl.cnf &ndash;new &ndash;out my&ndash;server.csr
</screen>
				You will ber asked for a passphrase. Please don't use simple 
				words but whole sentences, e.g. a part of a poem. The 
				longer the phrase the better. Also you have to enter the 
				URL of you server. All other questions are optional but I 
				recommend to fill out those too. Next type the commands
<screen>
bin\openssl rsa &ndash;in privkey.pem &ndash;out my&ndash;server.key
</screen>
				and
<screen>
bin\openssl x509 &ndash;in my&ndash;server.csr &ndash;out my&ndash;server.cert &ndash;req &ndash;signkey my&ndash;server.key &ndash;days 4000
</screen>
				This will create a certificate which will expire in 4000 days. 
				And finally enter:
<screen>
bin\openssl x509 &ndash;in my&ndash;server.cert &ndash;out my&ndash;server.der.crt &ndash;outform DER
</screen>
				These commands created some files in the apache folder. 
				Copy the files and to the folder <filename>conf/ssl</filename>
				(e.g. <filename>C:\program files\apache group\apache2\conf\ssl
				</filename>) &mdash; if this folder does not exist you have to 
				create it first. 
				</para>
				</listitem>
				<listitem>
					<para>Restart the apache service. 
				</para>
				</listitem>
				<listitem>
					<para>Point your browser to 
				<systemitem class="url">https://servername/svn/project</systemitem>
				...
				</para>
				</listitem>
			</orderedlist>
		</sect2>
	</sect1>
	<!-- ================================================================= -->
	<!-- ======================== SECTION 2 ============================== -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-serversetup-svnserve">
		<title>Svnserve Based Server</title>
		<sect2 id="tsvn-serversetup-svnserve-1">
			<title>Introduction</title>
			<para>
			There may be situations where it's not possible to use Apache as
			your server.  Fortunately, Subversion includes <filename>svnserve</filename>
			&mdash; a lightweight stand-alone server which uses a custom protocol
			over an ordinary TCP/IP connection.
			</para>
			<para>
			In most cases <filename>svnserve</filename> is easier to setup and runs
			faster than the Apache based server.
			</para>
		</sect2>
		<sect2 id="tsvn-serversetup-svnserve-2">
			<title>Installing svnserve</title>
			<para>
				<orderedlist>
					<listitem>
						<para>
						Download the latest version of Subversion
						from <ulink url="http://subversion.tigris.org/servlets/ProjectDocumentList?folderID=91">
						http://subversion.tigris.org/servlets/ProjectDocumentList?folderID=91</ulink>.
						</para>
					</listitem>
					<listitem>
						<para>
						Run the Subversion installer.  If you run the installer on 
						your server you can skip step 3.</para>
					</listitem>
					<listitem>
						<para>
						Open the windows-explorer, go to the 
						installation directory of Subversion (usually 
						<filename>C:\Program Files\Subversion</filename>) and 
						in the <filename>bin</filename> directory, find the files
						<filename>svnserve.exe</filename>, <filename>libdb42.dll</filename>,
						<filename>libeay32.dll</filename> and <filename>ssleay32.dll</filename>
						&mdash; copy these files into a directory on your server 
						e.g. <filename>c:\svnserve</filename>
						</para>
					</listitem>
				</orderedlist>
			</para>
		</sect2>
		<sect2 id="tsvn-serversetup-svnserve-3">
			<title>Running svnserve</title>
			<para>
			Now that <filename>svnserve</filename> is installed, you need it running
			on your server.  The simplist approach is to run the following from a dos
			shell or create a windows shortcut:
<screen>
svnserve.exe -d
</screen>
			<filename>svnserve</filename> will now start waiting for incoming requests
			on port 3690.	The -d switch tells <filename>svnserve</filename> to run
			as a daemon process, so it will always exist until it is manually terminated.
			</para>
			<para>	
			To test that <filename>svnserve</filename> is working, use TortoiseSVN's
			repo-browser to	view a repository.	The repo-browser is found in the
			TortoiseSVN menu in windows-explorer.
			</para>
			<para>	
			Assuming your repository is located in <filename>c:\repos\TestRepo</filename>,
			and your server is called localhost, when asked by repo-browser, enter Url:	
<screen>
svn://localhost/repos/TestRepo
</screen>
			</para>
			<para>	
			You can also increase security and save time entering Url's with
			<filename>svnserve</filename> by using the -r switch to set the root
			location and restrict access to a specificed directory on the server:
<screen>
svnserve.exe -d -r drive:\path\to\repository
</screen>
			Using the previous test as a guide, <filename>svnserve</filename> would now run as:
<screen>
svnserve.exe -d -r c:\repos
</screen>
			And in TortoiseSVN our repo-browser Url is now shortened to:
<screen>
svn://localhost/TestRepo
</screen>			
			Note that the -r switch is also needed if your repository is located on
			a different partition or drive than the location of <filename>svnserve</filename>
			on your server.
			</para>
			<tip>
				<para>
				If you are concerned about always having a user logged in on your server,
				or worried about someone shutting down <filename>svnserve</filename> or
				forgetting to restart it after a reboot, it is possible to run
				<filename>svnserve</filename> as a windows service using
				<ulink url="http://www.firedaemon.com/">firedaemon</ulink> or similiar.
				Note that you will still need to run <filename>svnserve</filename> with
				the -d switch.
				</para>
			</tip>
		</sect2>
		<sect2 id="tsvn-serversetup-svnserve-4">
			<title>Authentication with svnserve</title>
			<para>
			The default <filename>svnserve</filename> setup provides anonymous read-only
			access, so whilst you can use the repo-browser in TortoiseSVN to view a
			repository using an svn:// Url, you won't be able to perform any
			normal Subversion operations such as checkout, update or commit.
			</para>
			<para>	
			To enable write access to a repository, you need to edit the
			<filename>conf/svnserve.conf</filename> file in your repository
			directory.  This file controls the configuration of the <filename>svnserve</filename>
			daemon, and also contains useful documentation.
			</para>
			<para>
			You can enable anonymous write access by simply setting:
<screen>
[general]
anon-access = write
</screen>
			However, you will not know who has made changes to a repository, as the
			svn:author property will be empty.  You will also be unable to control
			who	makes changes to a repository.  This is a somewhat risky setup!
			</para>
			<para>
			One way to overcome this is to create a password database:
<screen>
[general]
anon-access = none
auth-access = write
password-db = password.conf
</screen>
			Where <filename>password.conf</filename> is a file which exists in
			the same location as <filename>svnserve.conf</filename>, it can also exist
			on a path relative to the <filename>conf</filename> directory and has a
			structure of:
<screen>
[users]
username = password
...
</screen>
			This example would deny all access for unauthenticated (anonymous) users,
			and give read-write access to all users in the <filename>password.conf</filename>
			file.
			</para>
			<para>
			If you have multiple repositories, then setting up an authentication
			realm should make administration easier.  For example, if you have
			two repositories, creatively named TestRepo and TestRepo2, and they
			both live as sub-directories under <filename>c:\repos</filename>,
			to setup an authentication realm between them:
<screen>
<filename>c:\repos\TestRepo\conf\svnserve.conf</filename>

[general]
anon-access = read
auth-access = write
password-db = password.conf

</screen>
<screen>
<filename>c:\repos\TestRepo2\conf\svnserve.conf</filename>

[general]
realm = /TestRepo
</screen>
			TestRepo2 now shares the same password database as TestRepo,
			which gives read-only unauthenticated (anonymous) access and
			read-write access for authenticated users.
			</para>
		</sect2>
		<sect2 id="tsvn-serversetup-svnserve-5">
			<title>Authentication with svn+ssh</title>
			<para>
			Another way to authenticate users with a <filename>svnserve</filename>
			based server is to use a secure shell (SSH) to tunnel requests through.
			</para>
			<para>
			With this approach, <filename>svnserve</filename> is not run as a daemon
			process, rather, the secure shell starts <filename>svnserve</filename>
			for you, running it	as the SSH authenticated user.  To enable this, you
			need a secure shell daemon on your server.
			</para>
			<para>
			It is beyond the scope of this documentation to detail the installation
			and setup of a secure shell, but one option is <ulink url="http://tech.erdelynet.com/cygwin-sshd.html">cygwin-sshd</ulink>,
			which is an implementation of <ulink url="http://www.openssh.com/">OpenSSH</ulink>
			</para>
			<para>
			Once you can connect to a secure shell on your server,
			to set up <filename>svnserve</filename> you need to ensure the following:
			</para>
			<para>
				<orderedlist>
					<listitem>
						<para>
						PATH environment variable contains the location of <filename>svnserve</filename>.
						</para>
					</listitem>
					<listitem>
						<para>
						TortoiseSVN has an SSH client configured.  This is done through the
						Settings -> Network -> SSH Client under the TortoiseSVN menu in
						windows-explorer.
						Fortunately, TortoiseSVN comes with <filename>TortoisePLink</filename>,
						an implementation of <ulink url="http://www.chiark.greenend.org.uk/~sgtatham/putty/">plink</ulink>,
						so normally you only have to set the SSH client as:
<screen>
C:\Program Files\TortoiseSVN\TortoisePlink.exe -l windowsUsername
</screen>
						Or if you trust the security on your computer and it's surroundings:
<screen>
C:\Program Files\TortoiseSVN\TortoisePlink.exe -l windowsUsername -pw password
</screen>
						</para>
					</listitem>
				</orderedlist>
			</para>
			<para>
			To test your secure shell with <filename>svnserve</filename>, use
			TortoiseSVN's repo-browser to view a repository.  Assuming your
			repository is located in <filename>c:\repos\TestRepo</filename>,
			and your server is called localhost, when asked by repo-browser,
			enter Url:	
<screen>
svn+ssh://localhost/repos/TestRepo
</screen>
			</para>
			<para>
			Further information about <filename>svnserve</filename> can be found
			in the <ulink url="http://svnbook.red-bean.com">svnbook</ulink>.
			</para>
		</sect2>
	</sect1>
	<!-- ================================================================= -->
	<!-- ======================== SECTION 3 ============================== -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-serversetup-local">
		<title>Local Repository Access</title>
		<sect2 id="tsvn-serversetup-local-1">
			<title>Introduction</title>
			<para>
			If you're not working in a team but working alone on a project and
			still want your work under version control you can also access
			a repository locally. This kind of repository access is also
			very handy if you just want to try out some Subversion commands
			and you don't want to risk screwing your "official" repository.
			</para>
		</sect2>
		<sect2 id="tsvn-serversetup-local-2">
			<title>Creating The Repository With TortoiseSVN</title>
			<figure id="tsvn-serversetup-local-dia-1">
				<title>The TortoiseSVN menu for unversioned folders</title>
				<graphic fileref="images/ContextMenuDirNoControl.png"/>
			</figure>
			<orderedlist>
				<listitem>
					<para>Open the windows explorer</para>
				</listitem>
				<listitem>
					<para>Create a new folder and name it e.g.
				<filename>SVNRepository</filename>
					</para>
				</listitem>
				<listitem>
					<para>
						<action>Right-click</action> on the just
				created folder and select <guimenuitem>Create Repository here...
				</guimenuitem> from the TortoiseSVN submenu. A repository is
				then created inside the new folder. <emphasis>Don't edit
				those files yourself!!!</emphasis>. If you get any errors
				make sure that the folder is empty and not write protected.
				</para>
				</listitem>
			</orderedlist>
			<para>
			To access your local repository you need the path to that folder. 
			Just remember that Subversion expects all repository paths in the 
			form: <filename>file:///C:/SVNRepository/</filename>.
			</para>
			<caution>
				<para>
			Do not access a repository via the <filename>file:///</filename>
			URL over a shared network drive! Even if you have the network
			drive mounted to a drive letter! If you do, your repository can
			(and most likely will) get corrupted and you could lose all your
			data! 
			</para>
			</caution>
		</sect2>
	</sect1>
</chapter>
<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
