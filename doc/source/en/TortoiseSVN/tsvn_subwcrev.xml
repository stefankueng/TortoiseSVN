<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter SYSTEM "../../dtd/dblite.dtd">
<chapter id="tsvn-subwcrev">
	<title>The SubWCRev Program</title>
	<indexterm>
		<primary>version extraction</primary>
	</indexterm>
	<simplesect>
		<para>
			SubWCRev is Windows console program which can be used to read
			the status of a Subversion working copy and optionally perform
			keyword substitution in a template file.
			This is often used as part of the build process as a means of
			incorporating working copy information into the object you
			are building. Typically it might be used to include the
			revision number in an <quote>About</quote> box.
		</para>
	</simplesect>
	<!-- ================================================================= -->
	<!-- ======================== SECTION 1 ============================== -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-subwcrev-cli">
		<title>The SubWCRev Command Line</title>
		<para>
			SubWCRev reads the Subversion status of all files in a working
			copy, excluding externals by default. It records the highest commit
			revision number found, and the commit timestamp of that revision,
			It also records whether there are local modifications in the working
			copy, or mixed update revisions. The revision number, update
			revision range and modification status are displayed on stdout.
		</para>
		<para>
			SubWCRev.exe is called from the command line or a script, and
			is controlled using the command line parameters.
<screen>
SubWCRev WorkingCopyPath [SrcVersionFile DstVersionFile] [-nmdfe]
</screen>
		</para>
		<para>
			<literal>WorkingCopyPath</literal> is the path to the working
			copy being checked. You can only use SubWCRev on working copies,
			not directly on the repository. The path may be absolute or
			relative to the current working directory.
		</para>
		<para>
			If you want SubWCRev to perform keyword substitution, so that
			fields like repository revision and URL are saved to a text
			file, you need to supply a template file
			<literal>SrcVersionFile</literal>
			and an output file
			<literal>DstVersionFile</literal>
			which contains the substituted version of the template.
		</para>
		<para>
			There are a number of optional switches which affect the way
			SubWCRev works. If you use more than one, they must be specified
			as a single group, eg.
			<literal>-nm</literal>, not
			<literal>-n -m</literal>.
			<table id="tsvn-subwcrev-switch-table">
				<title>List of available command line switches</title>
				<tgroup cols="2">
					<colspec colnum="1" colwidth="1*"/>
					<colspec colnum="2" colwidth="10*"/>
					<thead>
						<row>
							<entry>Switch</entry>
							<entry>Description</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>-n</entry>
							<entry>
								If this switch is given, SubWCRev will exit with
								ERRORLEVEL 7 if the working copy contains
								local modifications. This may be used to prevent
								building with uncommitted changes present.
							</entry>
						</row>
						<row>
							<entry>-m</entry>
							<entry>
								If this switch is given, SubWCRev will exit with
								ERRORLEVEL 8 if the working copy contains
								mixed revisions. This may be used to prevent
								building with a partially updated working copy.
							</entry>
						</row>
						<row>
							<entry>-d</entry>
							<entry>
								If this switch is given, SubWCRev will exit with
								ERRORLEVEL 9 if the destination file already
								exists.
							</entry>
						</row>
						<row>
							<entry>-f</entry>
							<entry>
								If this switch is given, SubWCRev will include
								the last-changed revision of folders. The default
								behaviour is to use only files when getting the
								revision numbers.
							</entry>
						</row>
						<row>
							<entry>-e</entry>
							<entry>
								If this switch is given, SubWCRev will examine
								directories which are included with svn:externals,
								but only if they are from the same repository.
								The default behaviour is to ignore externals.
							</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		</para>
	</sect1>
	<!-- ================================================================= -->
	<!-- ======================== SECTION 2 ============================== -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-subwcrev-keywords">
		<title>Keyword Substitution</title>
		<para>
			If a source and destination files are supplied, SubWCRev copies
			source to destination, performing keyword substitution as follows:
			<table id="tsvn-subwcrev-switch-table2">
				<title>List of available command line switches</title>
				<tgroup cols="2">
					<colspec colnum="1" colwidth="1*"/>
					<colspec colnum="2" colwidth="4*"/>
					<thead>
						<row>
							<entry>Keyword</entry>
							<entry>Description</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>$WCREV$</entry>
							<entry>
								Replaced with the highest commit revision
								in the working copy.
							</entry>
						</row>
						<row>
							<entry>$WCDATE$</entry>
							<entry>
								Replaced with the commit date/time of the
								highest commit revision. To avoid confusion,
								international format is used:
								<literal>yyyy-mm-dd hh:mm:ss</literal>
							</entry>
						</row>
						<row>
							<entry>$WCNOW$</entry>
							<entry>
								Replaced with the current system date/time.
								This can be used to indicate the build time.
								International format is used as described above.
							</entry>
						</row>
						<row>
							<entry>$WCRANGE$</entry>
							<entry>
								Replaced with the update revision range in
								the working copy. If the working copy is in a
								consistent state, this will be a single revision.
								If the working copy contains mixed revisions,
								either due to being out of date, or due to a
								deliberate update-to-revision, then the range
								will be shown in the form 100:200
							</entry>
						</row>
						<row>
							<entry>$WCMIXED?TText:FText$</entry>
							<entry>
								Replaced with TText if there are mixed update
								revisions, or FText if not.
							</entry>
						</row>
						<row>
							<entry>$WCMODS?TText:FText$</entry>
							<entry>
								Replaced with TText if there are local
								modifications, or FText if not.
							</entry>
						</row>
						<row>
							<entry>$WCURL$</entry>
							<entry>
								Replaced with the repository URL of the working
								copy path passed to SubWCRev.
							</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		</para>
	</sect1>
	<!-- ================================================================= -->
	<!-- ======================== SECTION 3 ============================== -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-subwcrev-example">
		<title>Keyword Example</title>
		<para>
			The example below shows how keywords in a template file are
			substituted in the output file.
		</para>
<screen>
// Test file for SubWCRev

char *Revision = "$WCREV$";
char *Modified = "$WCMODS?Modified:Not modified$";
char *Date     = "$WCDATE$";
char *Range    = "$WCRANGE$";
char *Mixed    = "$WCMIXED?Mixed revision WC:Not mixed$";
char *URL      = "$WCURL$";

#if $WCMODS?1:0$
#error Source is modified
#endif

// End of file
</screen>
		<para>
			After running SubWCRev.exe, the output file looks like this:
		</para>
<screen>
// Test file for SubWCRev

char *Revision = "3701";
char *Modified = "Modified";
char *Date     = "2005/06/15 11:15:12";
char *Range    = "3699:3701";
char *Mixed    = "Mixed revision WC";
char *URL      = "http://tortoisesvn.tigris.org/svn/tortoisesvn/trunk/src/SubWCRev";

#if 1
#error Source is modified
#endif

// End of file
</screen>
	</sect1>
	<!-- ================================================================= -->
	<!-- ======================== SECTION 4 ============================== -->
	<!-- ================================================================= -->
	<sect1 id="tsvn-subwcrev-com-interface">
		<title>COM interface</title>
		<para>
			If you need to access Subversion revision information from other
			programs, you can use the COM interface of SubWCRev. The object to
			create is <literal>SubWCRev.object.1</literal>, and the following
			methods are supported:
			<table id="tsvn-subwcrev-COM-table">
				<title>COM/automation methods supported</title>
				<tgroup cols="2">
					<colspec colnum="1" colwidth="1*"/>
					<colspec colnum="2" colwidth="4*"/>
					<thead>
						<row>
							<entry>Method</entry>
							<entry>Description</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>GetWCInfo</entry>
							<entry>
								This method traverses the working copy gathering the
								revision information. Naturally you must call this before
								you can access the information using the remaining methods.
								The first parameter is the path.
								The second parameter should be true if you want to include
								folder revisions. Equivalent to the <literal>-f</literal>
								command line switch.
								The third parameter should be true if you want to include
								svn:externals. Equivalent to the <literal>-e</literal>
								command line switch.
							</entry>
						</row>
						<row>
							<entry>Revision</entry>
							<entry>
								The highest commit revision in the working copy.
								Equivalent to $WCREV$
							</entry>
						</row>
						<row>
							<entry>Date</entry>
							<entry>
								The commit date/time of the highest commit revision.
								Equivalent to $WCDATE$
							</entry>
						</row>
						<row>
							<entry>Author</entry>
							<entry>
								The author of the highest commit revision, that is, the
								last person to commit changes to the working copy.
							</entry>
						</row>
						<row>
							<entry>MinRev</entry>
							<entry>The minimum update revision, as shown in $WCRANGE$</entry>
						</row>
						<row>
							<entry>MaxRev</entry>
							<entry>The maximum update revision, as shown in $WCRANGE$</entry>
						</row>
						<row>
							<entry>HasModifications</entry>
							<entry>True if there are local modifications</entry>
						</row>
						<row>
							<entry>Url</entry>
							<entry>
								Replaced with the repository URL of the working
								copy path used in GetWCInfo. Equivalent to $WCURL$
							</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		</para>
		<para>
			The following example shows how the interface might be used.
<screen>
<![CDATA[
// test script for the SubWCRev COM/Automation-object

filesystem = new ActiveXObject("Scripting.FileSystemObject");

SubWCRev1 = new ActiveXObject("SubWCRev.object.1");
SubWCRev2 = new ActiveXObject("SubWCRev.object.1");
SubWCRev3 = new ActiveXObject("SubWCRev.object.1");

SubWCRev1.GetWCInfo(filesystem.GetAbsolutePathName("."), 0, 0);
SubWCRev2.GetWCInfo(filesystem.GetAbsolutePathName(".."), 1, 1);
SubWCRev3.GetWCInfo(filesystem.GetAbsolutePathName("SubWCRev.cpp"), 0, 0);

sInfo1 = "Revision = " + SubWCRev1.Revision + "\nMin Revision = " + SubWCRev1.MinRev +
         "\nMax Revision = " + SubWCRev1.MaxRev + "\nDate = " + SubWCRev1.Date +
         "\nURL = " + SubWCRev1.Url + "\nAuthor = " + SubWCRev1.Author +
         "\nHasMods = " + SubWCRev1.HasModifications;
sInfo2 = "Revision = " + SubWCRev2.Revision + "\nMin Revision = " + SubWCRev2.MinRev +
         "\nMax Revision = " + SubWCRev2.MaxRev + "\nDate = " + SubWCRev2.Date +
         "\nURL = " + SubWCRev2.Url + "\nAuthor = " + SubWCRev2.Author +
         "\nHasMods = " + SubWCRev2.HasModifications;
sInfo3 = "Revision = " + SubWCRev3.Revision + "\nMin Revision = " + SubWCRev3.MinRev +
         "\nMax Revision = " + SubWCRev3.MaxRev + "\nDate = " + SubWCRev3.Date +
         "\nURL = " + SubWCRev3.Url + "\nAuthor = " + SubWCRev3.Author +
         "\nHasMods = " + SubWCRev3.HasModifications;

WScript.Echo(sInfo1);
WScript.Echo(sInfo2);
WScript.Echo(sInfo3);
]]>
</screen>
		</para>
	</sect1>
</chapter>
<!--
local variables:
sgml-parent-document: ("book.xml" "chapter")
end:
-->
