<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 SYSTEM "../../../dtd/dblite.dtd">
<sect1 id="tsvn-dug-revgraph">
	<?dbhh topicname="HIDD_REVISIONGRAPH"?>
	<title>Revision Graphs</title>
	<indexterm>
		<primary>revision</primary>
	</indexterm>
	<indexterm>
		<primary>graph</primary>
	</indexterm>
	<para>
		<figure id="tsvn-dug-revgraph-dia-1">
			<title>A Revision Graph</title>
			<graphic fileref="../images/RevisionGraph.png"/>
		</figure>
		Sometimes you need to know where branches and tags were taken from
		the trunk, and the ideal way to view this sort of information is
		as a graph or tree structure. That's when you need to use
		<menuchoice>
			<guimenu>TortoiseSVN</guimenu>
			<guimenuitem>Revision Graph...</guimenuitem>
		</menuchoice>
	</para>
	<para>
		This command analyses the revision history and attempts to create
		a tree showing the points at which copies were taken, and when
		branches/tags were deleted.
	</para>
	<important>
		<para>
			In order to generate the graph, TortoiseSVN must fetch all log messages
			from the repository root. Needless to say this can take several minutes
			even with a repository of a few thousand revisions, depending on server
			speed, network bandwidth, etc. If you try this with something like the
			<literal>Apache</literal> project which currently has over 300,000
			revisions you could be waiting for some time.
		</para>
	</important>
	<para>
		The revision graph shows several types of node:
		<variablelist>
			<varlistentry>
				<term>Added file/folder</term>
				<listitem>
					<para>
						Items which have been added, or created by copying
						another file/folder are shown using a rounded rectangle.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Deleted file/folder</term>
				<listitem>
					<para>
						Deleted items eg. a branch which is no longer required,
						are shown using an octagon (rectangle with corners cut off).
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Branch tip revision</term>
				<listitem>
					<para>
						Where a branch (or trunk or tag) has been modified since
						the last branch node, this is shown using an ellipse.
						This means that the latest revision on every branch is
						always shown on the graph.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Normal file/folder</term>
				<listitem>
					<para>
						All other items are shown using a plain rectangle.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
		Note that by default the graph only shows the points at which items were
		added or deleted. Showing every revision of a project will generate a very
		large graph for non-trivial cases. If you really want to see
		<emphasis>all</emphasis> revisions where changes were made, there is an
		option to do this in the <guilabel>View</guilabel> menu and on the toolbar.
	</para>
	<para>
		There is also an option to arrange the graph <emphasis>by path</emphasis>.
		This attempts to sort the branches from the tags. Paths which contain no
		modifications after copying are assumed to be tags and are stacked in
		a single column. Branches (which contain modifications after creation)
		each have their own column, so you can see how the branch develops.
	</para>
	<para>
		The revision date, author and comments are shown in a hint box whenever
		the mouse hovers over a revision box.
	</para>
	<para>
		If you select two revisions (Use <action>Ctrl left click</action>),
		you can use the context menu to show the
		differences between these revisions. You can choose to show differences
		as at the branch creation points, but usually you will want to show the
		differences at the branch end points, i.e. at the HEAD revision.
	</para>
	<para>
		You can view the differences as a Unified-Diff file, which shows all
		differences in a single file with minimal context. If you opt to
		<menuchoice>
			<guimenu>Context Menu</guimenu>
			<guimenuitem>Compare Revisions</guimenuitem>
		</menuchoice>
		you will be presented with a list of changed files.
		<action>Double click</action> on a file name to fetch both revisions
		of the file and compare them using the visual difference tool.
	</para>
	<para>
		If you <action>right click</action> on a revision you can use
		<menuchoice>
			<guimenu>Context Menu</guimenu>
			<guimenuitem>Show Log</guimenuitem>
		</menuchoice>
		to view the history.
	</para>
	<caution>
		<para>
			Because Subversion cannot provide all the information required,
			a certain amount of interpretation is required, which can sometimes
			give strange results. Nevertheless, the output for the trunk will
			generally give useful results.
		</para>
	</caution>
</sect1>
