<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE glossary SYSTEM "../dtd/dblite.dtd">
<!--
 Enter Glossary definitions in alphabetical Order! 
 DocBook doesn't sort them automatically.
-->
<glossary id="tsvn-glossary">
	<title>Glossary</title>
	<glossentry>
		<glossterm>Add</glossterm>
		<glossdef>
			<para>
				A Subversion command that is used to add a
				file or directory to your working copy.
				The new items are added to the repository when you commit.
			</para>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>BASE revision</glossterm>
		<glossdef>
			<para>
				The current base revision of a file or folder in your <emphasis>working copy</emphasis>. 
				This is the revision the file or folder was in, when the last checkout,
				update or commit was run. The BASE revision is normally not equal to the
				HEAD revision.
			</para>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>Blame</glossterm>
		<glossdef>
			<para>
				This command is for text files only, and it annotates every line to
				show the repository revision in which it was last changed, and the
				author who made that change. Our GUI implementation is called
				TortoiseBlame and it also shows the commit date/time and the
				log message when you hover the mouse of the revision number.
			</para>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>BDB</glossterm>
		<glossdef>
			<para>
				Berkeley DB. A well tested database backend for repositories, that
				cannot be used on network shares. Default for pre 1.2 repositories.
			</para>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>Branch</glossterm>
		<glossdef>
			<para>
				A term frequently used in revision control systems to describe
				what happens when development forks at a particular point and
				follows 2 separate paths. You can create a branch off the main
				development line so as to develop a new feature without rendering
				the main line unstable. Or you can branch a stable release to which
				you make only bugfixes, while new developments take place on the
				unstable trunk. In Subversion a branch is implemented as a
				<quote>cheap copy</quote>.
			</para>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>Checkout</glossterm>
		<glossdef>
			<para>
				A Subversion command which creates a local working copy in an empty
				directory by downloading versioned files from the repository.
			</para>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>Cleanup</glossterm>
		<glossdef>
			<para>
				To quote from the Subversion book:
				<quote>
					Recursively clean up the working copy, removing locks and resuming
					unfinished operations. If you ever get a
					<literal>working copy locked</literal> error,
					run this command to remove stale locks and get your working copy
					into a usable state again.
				</quote>
				Note that in this context <quote>lock</quote> refers to local filesystem
				locking, not repository locking.
			</para>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>Commit</glossterm>
		<glossdef>
			<para>
				This Subversion command is used to pass the changes in your local
				working copy back into the repository, creating a new repository
				revision.
			</para>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>Conflict</glossterm>
		<glossdef>
			<para>
				When changes from the repository are merged with local changes, 
				sometimes those changes occur on the same lines. In this case
				Subversion cannot automatically decide which version to use and
				the file is said to be in conflict. You have to edit the file manually
				and resolve the conflict before you can commit any further changes.
			</para>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>Copy</glossterm>
		<glossdef>
			<para>
				In a Subversion repository you can create a copy of a single file
				or an entire tree. These are implemented as <quote>cheap copies</quote>
				which act a bit like a link to the original in that they take up
				almost no space. Making a copy preserves the history of the item
				in the copy, so you can trace changes made before the copy was made.
			</para>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>Delete</glossterm>
		<glossdef>
			<para>
				When you delete a versioned item (and commit the change) the item
				no longer exists in the repository after the commited revision.
				But of course it still exists in earlier repository revisions,
				so you can still access it. If necessary, you can copy a deleted
				item and <quote>resurrect</quote> it complete with history.
			</para>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>Diff</glossterm>
		<glossdef>
			<para>
				Shorthand for <quote>Show Differences</quote>. Very useful when
				you want to see exactly what changes have been made.
			</para>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>Export</glossterm>
		<glossdef>
			<para>
				This command produces a copy of a versioned folder,
				just like a working copy, but without the local
				<literal>.svn</literal> folders.
			</para>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>FSFS</glossterm>
		<glossdef>
			<para>
				FS Filesystem. A proprietary Subversion filesystem backend for repositories.
				Can be used on network shares. Default for 1.2 and newer repositories.
			</para>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>GPO</glossterm>
		<glossdef>
			<para>
				Group policy object
			</para>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>HEAD revision</glossterm>
		<glossdef>
			<para>
				The latest revision of a file or folder in the <emphasis>repository</emphasis>.
			</para>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>Import</glossterm>
		<glossdef>
			<para>
				Subversion command to import an entire folder hierarchy into the repository
				in a single revision.
			</para>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>Lock</glossterm>
		<glossdef>
			<para>
				When you take out a lock on a versioned item, you mark it in
				the repository as uncommittable, except from the working copy
				where the lock was taken out.
			</para>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>Log</glossterm>
		<glossdef>
			<para>
				Show the revision history of a file or folder.
				Also known as <quote>History</quote>.
			</para>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>History</glossterm>
		<glossdef>
			<para>
				Show the revision history of a file or folder.
				Also known as <quote>Log</quote>.
			</para>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>Merge</glossterm>
		<glossdef>
			<para>
				The process by which changes from the repository are added to your
				working copy without disrupting any changes you have already made
				locally. Sometimes these changes cannot be reconciled automatically
				and the working copy is said to be in conflict.
			</para>
			<para>
				Merging happens automatically when you update your working copy.
				You can also merge specific changes from another branch using
				TortoiseSVN's Merge command.
			</para>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>Patch</glossterm>
		<glossdef>
			<para>
				If a working copy has changes to text files only, it is possible
				to use Subversion's Diff command to generate a single file summary
				of those changes in Unified Diff format. A file of this type is often
				referred to as a <quote>Patch</quote>, and it can be emailed to someone
				else (or to a mailing list) and applied to another working copy.
				Someone without commit access can make changes and submit a patch
				file for an authorized committer to apply. Or if you are unsure about
				a change you can submit a patch for others to review.
			</para>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>Property</glossterm>
		<glossdef>
			<para>
			</para>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>Relocate</glossterm>
		<glossdef>
			<para>
			</para>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>Repository</glossterm>
		<glossdef>
			<para>
				A repository is a central place where data is stored and maintained. 
				A repository can be a place where multiple databases or files are located for 
				distribution over a network, or a repository can be a location that is 
				directly accessible to the user without having to travel across a network.
			</para>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>Resolve</glossterm>
		<glossdef>
			<para>
				When files in a working copy are left in a conflicted state following
				a merge, those conflicts must be sorted out by a human using an editor
				(or perhaps TortoiseMerge). This process is referred to as
				<quote>Resolving Conflicts</quote>. When this is complete you can mark
				the conflicted files as being resolved, which allows them to be committed.
			</para>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>Revert</glossterm>
		<glossdef>
			<para>
			</para>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>Revision</glossterm>
		<glossdef>
			<para>
			</para>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>Revision Property (revprop)</glossterm>
		<glossdef>
			<para>
			</para>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>SVN</glossterm>
		<glossdef>
			<para>
			</para>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>Switch</glossterm>
		<glossdef>
			<para>
			</para>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>Update</glossterm>
		<glossdef>
			<para>
			</para>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>Working Copy</glossterm>
		<glossdef>
			<para>
			</para>
		</glossdef>
	</glossentry>
</glossary>
<!--
local variables: 
sgml-parent-document: ("book.xml" "glossary")
end:
-->
