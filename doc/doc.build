<?xml version="1.0"?>
<!--
============================================================ 
 $Date$
 $Author$
 $Rev$
============================================================ 

NAnt build script for the TortoiseSVN documentation

All project specific configuration is stored in doc.build.include.
All user/site specific configuration is stored in doc.build.user.

-->

<project name="Documentation" default="all" basedir=".">
	<description>
		Builds the Documentation in all languages and all output formats
	</description>
	
	<include buildfile="doc.build.include"/>

<!-- ====================================================================== -->
<!-- Loop over all languages                                                -->
<!-- ====================================================================== -->

	<target name="all" 
		description="Loop over all languages, output formats and applications and build documentation"
		depends="prepare" >

		<foreach item="String" in="${languages}" delim="," property="lang.target">
			<call target="doit"/>
		</foreach>
	</target>
	
<!-- ====================================================================== -->
<!-- Loop over all applications and output formats                          -->
<!-- ====================================================================== -->

	<target name="doit">

		<foreach item="String" in="${applications}" delim="," property="app">
			<property name="doc.source.file" value="source/${lang.base}/${app}.xml"/>
			<property name="doc.base.name" value="${app}_${lang.base}"/>
			<property name="doc.base.work" value="output/${doc.base.name}"/>
					
			<property name="doc.target.name" value="${app}_${lang.target}"/>
			<property name="doc.target.work" value="output/${doc.target.name}"/>
			<property name="doc.target.source" value="source/${lang.target}/${app}/${app}.xml"/>

			<echo message="------------------------------------------------------------"/>
			<echo message="Creating '${doc.target.name}' documentation"/>

			<call target="translate" unless="${lang.base==lang.target}"/>
			<call target="copyimages"/>

			<property name="xslt.source" value="${doc.target.source}"/>
			<foreach item="String" in="${docformats}" delim="," property="docformat">
				<call target="${docformat}"/>
			</foreach>
		</foreach>
	</target>
	
<!-- ====================================================================== -->
<!-- ====================================================================== -->

	<target name="clean" description="remove all generated files">
		<delete dir="output" failonerror="false"/>
	</target>
	
<!-- ====================================================================== -->
<!-- ====================================================================== -->

	<target name="prepare" description="Create directories">
		<mkdir dir="output"/>
		<call target="prepare.custom" if="${target::exists('prepare.custom')}"/>
	</target>

<!-- ====================================================================== -->
<!-- ====================================================================== -->

	<target name="copyimages" description="Copy images">
		<delete dir="${doc.target.work}/images" failonerror="false"/>
		<mkdir dir="${doc.target.work}/images"/>
		<copy todir="${doc.target.work}/images">
			<fileset basedir="images/${lang.base}">
				<include name="*"/>
			</fileset>
		</copy>

		<copy todir="${doc.target.work}/images" unless="${lang.base==lang.target}">
			<fileset basedir="images/${lang.target}">
				<include name="*"/>
			</fileset>
		</copy>
	</target>

<!-- ====================================================================== -->
<!-- ====================================================================== -->

	<target name="uptodate" description="Check whether the given target is up to date">
		<echo message="Checking if '${file.target}' is up to date"/>
		<uptodate property="file.target.uptodate">
			<sourcefiles>
				<include name="source/${lang.target}/${app}/**/*.xml"/>
				<include name="source/${lang.target}/pubdate.xml"/>
				<include name="source/${lang.target}/glossary.xml"/>
				<include name="source/${lang.target}/wishlist.xml"/>
				<exclude name="source/${lang.target}/version.xml"/>
			</sourcefiles>
			<targetfiles>
				<include name="${file.target}"/>
			</targetfiles>
		</uptodate>
		<if test="${file.target.uptodate}">
			<echo message="Up to date"/>
		</if>
	</target>

<!-- ====================================================================== -->
<!-- Run xsltproc with the defined parameters                               -->
<!-- ====================================================================== -->

	<target name="xsltproc" description="Run xsltproc with the defined parameters">
		<echo message="Processing XML Source" />

		<!-- Check whether a language specific xsl file exists and use it -->
		<!-- if none is found, load XSL file from default location.       -->
		<property name="xslt.file.lang" value="${path.user.xsl}/${lang.target}/${xslt.file}" />
		<property name="xslt.file" value="${xslt.file.lang}" if="${file::exists(xslt.file.lang)}"/>
		<property name="xslt.file" value="${path.user.xsl}/${xslt.file}" unless="${file::exists(xslt.file.lang)}"/>

		<echo message="Stylesheet: ${xslt.file}" />
		<echo message="Parameters: ${xslt.params}" />
		<exec program="xsltproc"
					commandline="${xslt.params} --output ${xslt.target} ${xslt.file} ${xslt.source}"
					basedir="${path.bin}"
					verbose="false"/>
	</target>
	
<!-- ====================================================================== -->
<!-- Profile source into a single file                                      -->
<!-- ====================================================================== -->

	<target name="profile" description="Profile source into a single file" >

		<property name="xslt.params" value="${xsl.profile.params}"/>
		<property name="xslt.file" value="${xsl.profile.file}"/>
		<property name="xslt.target" value="${file.target}.tmp"/>
	
		<echo message="Profiling into: ${file.target}"/>
		<call target="xsltproc"/>

		<!-- Removes the moreinfo="" attributes added by xsltproc -->
		<move file="${xslt.target}" tofile="${file.target}" overwrite="true">
			<filterchain>
				<replacestring from=" moreinfo=&quot;none&quot;" to="" />
			</filterchain>
		</move>

	</target>

<!-- ====================================================================== -->
<!-- Create po template for each application from sources                   -->
<!-- ====================================================================== -->

	<target name="potfile" description="Create po template from sources">
		<property name="lang.target" value="${lang.base}"/>
		
		<foreach item="String" in="${potemplates}" delim="," property="app">

			<property name="potfile" value="po/${app}.pot" />
			<property name="xslt.source" value="source/${lang.base}/${app}/${app}.xml"/>
			<property name="file.target" value="source/${app}_${lang.base}.xml"/>

			<echo message="------------------------------------------------------------"/>
			<echo message="Checking if ${potfile} is up to date"/>

			<call target="profile" />

			<ifnot test="${file::up-to-date(file.target, potfile)}">
				<echo message="Creating po template from sources"/>
				<exec program="python"
							commandline="xml2po.py -e -o ${potfile} ${file.target}"
							verbose="false"/>
			</ifnot>
			<echo message="" />
		</foreach>
	</target>

<!-- ====================================================================== -->
<!-- Create translated source files                                         -->
<!-- ====================================================================== -->

	<target name="translate" description="Create translated source file">
		<property name="lang.pofile" value="po/${app}_${lang.target}.po"/>

		<echo message="Translating: '${lang.target}' This may take a few minutes"/>
		
		<exec program="msgfmt"
					commandline="${lang.pofile} -o ${lang.target}.mo"
					basedir="${path.gettext}"
					verbose="false"/>

		<foreach item="File" property="file.base">
			<in>
				<items>
					<include name="source/${lang.base}/${app}/**/*.xml"/>
					<include name="source/${lang.base}/pubdate.xml"/>
					<include name="source/${lang.base}/glossary.xml"/>
					<include name="source/${lang.base}/wishlist.xml"/>
					<include name="source/${lang.base}/version.xml"/>
				</items>
			</in>
			<do>
				<property name="file.target" value="${string::replace(file.base,'\'+lang.base+'\','\'+lang.target+'\')}"/>

				<uptodate property="file.target.uptodate">
					<sourcefiles>
						<include name="${file.base}"/>
						<include name="${lang.pofile}"/>
					</sourcefiles>
					<targetfiles>
						<include name="${file.target}"/>
					</targetfiles>
				</uptodate>

				<ifnot test="${file.target.uptodate}">
					<echo message="${file.target}"/>
					<property name="dir.target" value="${path::get-directory-name(file.target)}"/>
					<mkdir dir="${dir.target}" unless="${directory::exists(dir.target)}"/>
					<exec program="python"
								commandline="xml2po.py -t ${lang.target}.mo -o ${file.target} ${file.base}"
								verbose="false"/>
				</ifnot>
			</do>
		</foreach>

<!--
		<foreach item="File" property="file.base">
			<in>
				<items refid="files.exclude" />
			</in>
			<do>
				<property name="file.target" value="${string::replace(file.base,'\'+lang.base+'\','\'+lang.target+'\')}"/>
				<copy file="${file.base}" tofile="${file.target}" overwrite="true"/>
			</do>
		</foreach>
-->

		<delete file="${lang.target}.mo"/>
	</target>
	
<!-- ====================================================================== -->
<!-- Create PDF documentation                                               -->
<!-- ====================================================================== -->

	<target name="pdf" description="Create PDF documentation">
		
		<property name="file.target" value="${doc.target.work}.pdf"/>
		<call target="uptodate"/>

		<ifnot test="${file.target.uptodate}">
			<property name="xslt.params" value="${xsl.pdf.params}"/>
			<property name="xslt.file" value="${xsl.pdf.file}"/>
			<property name="xslt.target" value="${doc.target.work}/${doc.target.name}.fo"/>

			<call target="xsltproc" />

			<property name="userconfig.lang" value="${path.user.xsl}/${lang.target}/userconfig.xml" />
			<property name="commandline" value="-fo ${xslt.target} -pdf ${file.target}"/>
			<property name="commandline" value="-c ${userconfig.lang} ${commandline}" if="${file::exists(userconfig.lang)}"/>
			
			<exec program="fop.bat"
						commandline="${commandline}"
						basedir="${path.fop}"
						verbose="false"/>
		</ifnot>
	</target>

<!-- ====================================================================== -->
<!-- Create CHM documentation                                               -->
<!-- ====================================================================== -->

	<target name="chm" description="Create CHM documentation">
	
		<property name="file.target" value="${doc.target.work}.chm"/>
		<call target="uptodate"/>

		<ifnot test="${file.target.uptodate}">
			<property name="xslt.params" value="${xsl.chm.params}"/>
			<property name="xslt.file" value="${xsl.chm.file}"/>
			<property name="xslt.target" value="${doc.target.work}/${doc.target.name}"/>

			<call target="xsltproc" />
			
			<if test="${doc.target.name=='TortoiseSVN'}">
				<property name="help.resource" value="../src/TortoiseProc/resource.h" />
			</if>
			<!-- The CHM helpcontext target resides in an external build file -->
			<call target="help.custom" if="${target::exists('help.custom')}"/>
			<copy file="${path.user.css}/styles_chm.css" todir="${doc.target.work}"/>

			<exec program="hhc.exe"
						commandline="${doc.target.work}/htmlhelp.hhp"
						basedir="${path.bin}"
						resultproperty="result.hhc"
						failonerror="false"
						verbose="false"/>

			<copy file="${doc.target.work}/htmlhelp.chm" tofile="${file.target}"/>
		</ifnot>
		<delete>
			<fileset>
				<include name="${doc.target.work}/*.*"/>
			</fileset>
		</delete>
	</target>

<!-- ====================================================================== -->
<!-- Create HTML multi page documentation                                   -->
<!-- ====================================================================== -->
	<target name="html" description="Create HTML documentation" depends="">

		<property name="file.target" value="${doc.target.work}/index.html"/>
		<call target="uptodate"/>

		<ifnot test="${file.target.uptodate}">
			<property name="xslt.params" value="${xsl.htmlsingle.params}"/>
			<property name="xslt.file" value="${xsl.htmlsingle.file}"/>
			<property name="xslt.target" value="${doc.target.work}/${doc.target.name}"/>

			<copy file="${path.user.css}/styles_chm.css" todir="${doc.target.work}"/>
			<copy file="${path.user.css}/styles_html.css" todir="${doc.target.work}"/>

			<call target="xsltproc" />

		</ifnot>
	</target>

<!-- ====================================================================== -->
<!-- Create HTML single page documentation                                  -->
<!-- ====================================================================== -->

	<target name="htmlsingle" description="Create HTML single page documentation" depends="">

		<property name="file.target" value="${doc.target.work}/help-onepage.html"/>
		<call target="uptodate"/>

		<ifnot test="${file.target.uptodate}">
			<property name="xslt.params" value="${xsl.html.params}"/>
			<property name="xslt.file" value="${xsl.html.file}"/>
			<property name="xslt.target" value="${file.target}"/>

			<copy file="${path.user.css}/styles_chm.css" todir="${doc.target.work}"/>
			<copy file="${path.user.css}/styles_html.css" todir="${doc.target.work}"/>

			<call target="xsltproc" />

		</ifnot>
	</target>
</project>

