<?xml version="1.0"?>
<project name="Documentation" default="all" basedir=".">
	<description>
		Builds the Documentation in all languages and all output formats
	</description>
	
	<copy file="doc.build.include.tmpl" tofile="doc.build.include" unless="${file::exists('doc.build.include')}"/>
	<include buildfile="doc.build.include"/>
 
<!-- ====================================================================== -->
<!-- Loop over all languages																								-->
<!-- ====================================================================== -->

	<target name="all" 
		description="Loop over all languages, output formats and applications and build documentation"
		depends="prepare,potfile" >

		<property name="lang.target" value="${lang.base}"/>
		<call target="doit"/>

		<foreach item="File" property="lang.pofile">
			<in>
				<items>
					<include name="po/*.po"/>
				</items>
			</in>
			<do>
				<property name="lang.target" value="${path::get-file-name-without-extension(lang.pofile)}"/>
				<call target="doit"/>
			</do>
		</foreach>
	</target>
	
<!-- ====================================================================== -->
<!-- Loop over all applications and output formats													-->
<!-- ====================================================================== -->

	<target name="doit">

		<foreach item="String" in="${applications}" delim="," property="app">
			<property name="doc.source.file" value="source/${lang.base}/${app}.xml"/>
			<property name="doc.base.name" value="${app}_${lang.base}"/>
			<property name="doc.base.work" value="output/${doc.base.name}"/>
					
			<property name="doc.target.name" value="${app}_${lang.target}"/>
			<property name="doc.target.work" value="output/${doc.target.name}"/>
			<property name="doc.target.source" value="source/${lang.target}/${app}.xml"/>

			<echo message="------------------------------------------------------------"/>
			<echo message="Creating '${doc.target.name}' documentation"/>

			<call target="translate" unless="${lang.base==lang.target}"/>

			<delete dir="${doc.target.work}/images" failonerror="false"/>
			<mkdir dir="${doc.target.work}/images"/>
			<copy todir="${doc.target.work}/images">
				<fileset basedir="images/${lang.base}">
					<include name="*"/>
				</fileset>
			</copy>

			<copy todir="${doc.target.work}/images" unless="${lang.base==lang.target}">
				<fileset basedir="images/${lang.target}">
					<include name="*"/>
				</fileset>
			</copy>
		
			<foreach item="String" in="${docformats}" delim="," property="docformat">
				<call target="${docformat}"/>
			</foreach>
		</foreach>
	</target>
	
<!-- ====================================================================== -->
<!-- ====================================================================== -->

	<target name="clean" description="remove all generated files">
		<delete dir="output" failonerror="false"/>
	</target>
	
<!-- ====================================================================== -->
<!-- ====================================================================== -->

	<target name="prepare" description="Create directories">

		<mkdir dir="output"/>
		<call target="prepare.custom" if="${target::exists('prepare.custom')}"/>

	</target>

<!-- ====================================================================== -->
<!-- ====================================================================== -->

	<target name="uptodate" description="Check whether the given target is up to date">
		<echo message="Checking if '${file.target}' is up to date"/>
		<uptodate property="file.target.uptodate">
			<sourcefiles>
				<include name="source/${lang.target}/**/*.xml"/>
				<exclude name="${file.exclude}"/>
			</sourcefiles>
			<targetfiles>
				<include name="${file.target}"/>
			</targetfiles>
		</uptodate>
		<if test="${file.target.uptodate}">
			<echo message="Up to date"/>
		</if>
	</target>

<!-- ====================================================================== -->
<!-- Create po template for each application from sources										-->
<!-- ====================================================================== -->

	<target name="potfile" description="Create po template from sources">
		<foreach item="String" in="${potemplates}" delim="," property="app">

			<echo message="------------------------------------------------------------"/>
			<echo message="Check if po template is up to date"/>
			<property name="lang.target" value="${lang.base}"/>

			<!-- Profile all xml sources into a single master file -->
			<property name="filelist" value=" "/>
			<property name="path.base" value="${project::get-base-directory()}\"/>
			<property name="file.target" value="po/${app}.pot"/>
			<call target="uptodate"/>

			<ifnot test="${file.target.uptodate}">
				<foreach item="File" property="file.base">
					<in>
						<items basedir=".">
							<include name="source/${lang.base}/**/*.xml"/>
							<exclude name="source/${lang.base}/**/${file.exclude}"/>
						</items>
					</in>
					<do>
						<property name="filelist" value="${filelist+' '+string::replace(file.base,path.base,'')}"/>
					</do>
				</foreach>

				<echo message="${path.base}"/>
				<echo message="Creating po template from sources"/>
				<exec program="python"
							commandline="xml2po.py -e -o ${file.target} ${filelist}"
							verbose="false"/>
			</ifnot>

		</foreach>
	</target>

<!-- ====================================================================== -->
<!-- Create translated source files																					-->
<!-- ====================================================================== -->
	<target name="translate" description="Create translated source file">
		<echo message="Translating: '${lang.target}' This may take a few minutes"/>
		
		<exec program="msgfmt"
					commandline="${lang.pofile} -o ${lang.target}.mo"
					basedir="${path.msgfmt}"
					verbose="false"/>

		<foreach item="File" property="file.base">
			<in>
				<items>
					<include name="source/${lang.base}/**/*.xml"/>
					<exclude name="source/${lang.base}/**/${file.exclude}"/>
				</items>
			</in>
			<do>
				<property name="file.target" value="${string::replace(file.base,'\'+lang.base+'\','\'+lang.target+'\')}"/>

				<uptodate property="file.target.uptodate">
					<sourcefiles>
						<include name="${file.base}"/>
						<include name="${lang.pofile}"/>
					</sourcefiles>
					<targetfiles>
						<include name="${file.target}"/>
					</targetfiles>
				</uptodate>

				<ifnot test="${file.target.uptodate}">
					<echo message="${file.target}"/>
					<property name="dir.target" value="${path::get-directory-name(file.target)}"/>
					<mkdir dir="${dir.target}" unless="${directory::exists(dir.target)}"/>
					<exec program="python"
								commandline="xml2po.py -t ${lang.target}.mo -o ${file.target} ${file.base}"
								verbose="false"/>
				</ifnot>
			</do>
		</foreach>

		<delete file="${lang.target}.mo"/>
	</target>

<!-- ====================================================================== -->
<!-- Run xsltproc with the defined parameters -->
<!-- ====================================================================== -->
	<target name="xsltproc" description="Run xsltproc with the defined parameters">
		<echo message="Processing XML Source" />

		<!-- Check whether a language specific xsl file exists and use it -->
		<!-- if none is found, load XSL file from default location.       -->
		<property name="xslfile.lang" value="${path.user.xsl}/${lang.target}/${xslfile}" />
		<echo message="${xslfile.lang}" />
		<property name="xslfile" value="${xslfile.lang}" if="${file::exists(xslfile.lang)}"/>
		<property name="xslfile" value="${path.user.xsl}/${xslfile}" unless="${file::exists(xslfile.lang)}"/>

		<exec program="xsltproc"
					commandline="${xsltparams} --output ${tempfile} ${xslfile} ${doc.target.source}"
					basedir="${path.bin}"
					verbose="false"/>
	</target>
	
<!-- ====================================================================== -->
<!-- Create PDF documentation -->
<!-- ====================================================================== -->

	<target name="pdf" description="Create PDF documentation">
		
		<property name="file.target" value="${doc.target.work}.pdf"/>
		<call target="uptodate"/>

		<ifnot test="${file.target.uptodate}">
			<property name="xsltparams" value="${xsl.pdf.params}"/>
			<property name="xslfile" value="${xsl.pdf.file}"/>
			<property name="tempfile" value="${doc.target.work}/${doc.target.name}.fo"/>

			<call target="xsltproc" />

			<exec program="fop.bat"
						commandline="-c ${path.user.xsl}/${lang.target}/userconfig.xml -fo ${tempfile} -pdf ${file.target}"
						basedir="${path.fop}"
						verbose="false"/>
		</ifnot>
	</target>

<!-- ====================================================================== -->
<!-- Create CHM documentation -->
<!-- ====================================================================== -->

	<target name="chm" description="Create CHM documentation">
	
		<property name="file.target" value="${doc.target.work}.chm"/>
		<call target="uptodate"/>

		<ifnot test="${file.target.uptodate}">
			<property name="xsltparams" value="${xsl.chm.params}"/>
			<property name="xslfile" value="${xsl.chm.file}"/>
			<property name="tempfile" value="${doc.target.work}/${doc.target.name}"/>

			<call target="xsltproc" />

			<!-- The CHM helpcontext target resides in an external build file -->
			<call target="help.custom" if="${target::exists('help.custom')}"/>
			<copy file="${path.user.css}/styles_chm.css" todir="${doc.target.work}"/>

			<exec program="hhc.exe"
						commandline="${doc.target.work}/htmlhelp.hhp"
						basedir="${path.bin}"
						resultproperty="result.hhc"
						failonerror="false"
						verbose="false"/>

			<copy file="${doc.target.work}/htmlhelp.chm" tofile="${file.target}"/>
		</ifnot>
		<delete>
			<fileset>
				<include name="${doc.target.work}/*.*"/>
			</fileset>
		</delete>
	</target>

<!-- ====================================================================== -->
<!-- Create HTML multi page documentation -->
<!-- ====================================================================== -->
	<target name="html" description="Create HTML documentation" depends="">

		<property name="file.target" value="${doc.target.work}/index.html"/>
		<call target="uptodate"/>

		<ifnot test="${file.target.uptodate}">
			<property name="xsltparams" value="${xsl.htmlsingle.params}"/>
			<property name="xslfile" value="${xsl.htmlsingle.file}"/>
			<property name="tempfile" value="${doc.target.work}/${doc.target.name}"/>

			<copy file="${path.user.css}/styles_chm.css" todir="${doc.target.work}"/>
			<copy file="${path.user.css}/styles_html.css" todir="${doc.target.work}"/>

			<call target="xsltproc" />

		</ifnot>
	</target>

<!-- ====================================================================== -->
<!-- Create HTML single page documentation -->
<!-- ====================================================================== -->

	<target name="htmlsingle" description="Create HTML single page documentation" depends="">

		<property name="file.target" value="${doc.target.work}/help-onepage.html"/>
		<call target="uptodate"/>

		<ifnot test="${file.target.uptodate}">
			<property name="xsltparams" value="${xsl.html.params}"/>
			<property name="xslfile" value="${xsl.html.file}"/>
			<property name="tempfile" value="${file.target}"/>

			<copy file="${path.user.css}/styles_chm.css" todir="${doc.target.work}"/>
			<copy file="${path.user.css}/styles_html.css" todir="${doc.target.work}"/>

			<call target="xsltproc" />

		</ifnot>
	</target>
</project>

