<?xml version="1.0"?>
<!--
============================================================ 
 $Date$
 $Author$
 $Rev$
============================================================ 

Customization layer for build files.

You can override these settings by defining them on the command line or by
defining them in doc.build.user which is included here if it exists.
	
Example content of doc.build.user:
<property name="applications" value="TortoiseSVN" />
<property name="docformats" value="chm" />
<property name="languages" value="en" />
  
This will only build the english HTML helpf file for TortoiseSVN

-->

<project name="customize">
	<description>Customization layer for build file</description>

	<include buildfile="doc.build.user" if="${file::exists('doc.build.user')}"/>

	<!-- ============================================================ -->
	<!-- List of applications, languages and output formats in which  -->
	<!-- the documentation will be created by default                 -->

	<property name="applications" 
		value="TortoiseSVN,TortoiseMerge" 
		unless="${property::exists('applications')}"
	/>
	<property name="docformats" 
		value="pdf,chm,html,htmlsingle" 
		unless="${property::exists('docformats')}"
	/>
	<property name="languages" 
		value="en,de,es,fr,ja,ru,zh_CN" 
		unless="${property::exists('languages')}"
	/>

	<!-- ============================================================ -->
  <!-- Define property so that doc.build alone doesn't fail         -->

	<property name="devrelease"
	  value="" 
		unless="${property::exists('devrelease')}"
	/>

  <property name="critical" value="${devrelease!='-dev'}" />

	<!-- ============================================================ -->
	<!-- Settings for the translation                                 -->
	
	<!-- Base language. All other documents are created using this    -->
	<!-- documents structure                                          -->
	<property name="lang.base"
		value="en"
		unless="${property::exists('lang.base')}"
	/>
	
	<!-- ============================================================ -->
	<!-- Settings for the CHM Help creation                           -->
	<!-- Attention, this is implemented as a target, because I could  -->
	<!-- not find a better way to create the property depending on    -->
	<!-- the app name                                                 -->
	
	<target name="help.prepare.TortoiseSVN">
	<echo message="help.prepare.TortoiseSVN"/>
		<property name="help.resource.TortoiseSVN"
		  value="../src/TortoiseProc/resource.h"
			unless="${property::exists('help.resource.TortoiseSVN')}"
		/>
		<property name="help.resource" value="${help.resource.TortoiseSVN}" />
	</target>
	<target name="help.prepare.TortoiseMerge">
	<echo message="help.prepare.TortoiseMerge"/>
		<property name="help.resource.TortoiseMerge"
	  	value="../src/TortoiseMerge/resource.h"
			unless="${property::exists('help.resource.TortoiseMerge')}"
		/>
		<property name="help.resource" value="${help.resource.TortoiseMerge}" />
	</target>
	
	<!-- Fileset to exclude from translation and .pot creation        -->
	<!-- Duplicate these files in the "sourcefiles" fileset           -->
<!--
	<fileset id="files.exclude">
		<include name="source/${lang.base}/**/version.xml"/>
		<include name="source/${lang.base}/**/pubdate.xml"/>
	</fileset>
	
	<fileset id="files.filtered">
		<include name="source/${lang.base}/TortoiseSVN/**/*.xml"/>
		<include name="source/${lang.base}/**/wishlist.xml"/>
		<exclude name="source/${lang.base}/**/version.xml"/>
		<exclude name="source/${lang.base}/**/pubdate.xml"/>
	</fileset>
-->

	<!-- Name of the po template file to create. Can also be a list   -->
	<!-- of applications if you want to create a template for each    -->
	<property name="potemplates" value="${applications}" />

	<!-- ============================================================ -->
	<!-- Paths to the binaries                                        -->
	<property name="path.bin" 
		value="${path::get-full-path('../Tools')}"
		unless="${property::exists('path.bin')}"
	/>
	<property name="path.fop" 
		value="${path::get-full-path('../Tools/fop')}"
		unless="${property::exists('path.fop')}"
	/>
	<property name="path.xsl" 
		value="${string::replace(path::get-full-path('../Tools/xsl'), '\', '/')}"
		unless="${property::exists('path.xsl')}"
	/>
	<property name="path.gettext" 
		value="${path::get-full-path('../Tools')}"
		unless="${property::exists('path.gettext')}"
	/>
	<property name="path.subwcrev" 
		value="../bin/release/bin/"
		unless="${property::exists('path.subwcrev')}"
	/>

	<!-- ============================================================ -->
	<!-- Settings for XSLTPROC                                        -->

	<!-- Paths where the xsl and css files are found                  -->
	<property name="path.user.xsl" value="./xsl"/>
	<property name="path.user.css" value="./source"/>

	<!-- stylesheets and stringparams                                 -->
	<property name="xsl.pdf.params" value="--nonet --xinclude"/>
	<property name="xsl.pdf.file" value="pdfdoc.xsl"/>
	<property name="xsl.chm.params" value="--nonet --xinclude --stringparam html.stylesheet styles_chm.css --stringparam use.id.as.filename 1"/>
	<property name="xsl.chm.file" value="htmlhelp.xsl"/>
	<property name="xsl.html.params" value="--nonet --xinclude --stringparam html.stylesheet styles_html.css --stringparam use.id.as.filename 1"/>
	<property name="xsl.html.file" value="htmlsingle.xsl"/>
	<property name="xsl.htmlsingle.params" value="--nonet --xinclude --stringparam html.stylesheet styles_html.css --stringparam use.id.as.filename 1"/>
	<property name="xsl.htmlsingle.file" value="htmlchunk.xsl"/>
	<property name="xsl.profile.params" value="--nonet --xinclude --stringparam profile.condition &quot;exclude&quot;"/>
	<property name="xsl.profile.file" value="profile.xsl"/>

	<!-- ============================================================ -->
	<!-- Paths to the application resources for the chm help creation -->
	<property name="help.context" value="./source/context.h" />

<!-- ====================================================================== -->
<!-- Custom target to prepare the build                                     -->
<!-- ====================================================================== -->

	<target name="prepare.custom" 
		description="Prepare XSL files, create help context file"
		depends="versioninfo">

		<exec program="SubWCRev.exe"
			commandline="source/${lang.base} source/pubdate.tmpl source/${lang.base}/pubdate.xml"
			basedir="${path.subwcrev}"
			failonerror="false"
			resultproperty="result.subwcrev"
			verbose="false" />
		<copy file="source/Pubdate.none" tofile="source/${lang.base}/pubdate.xml" overwrite="true" unless="${result.subwcrev=='0'}"/>

		<!-- Store path to docbook stylesheets in helper stylesheets -->
		<echo message="&lt;xsl:stylesheet xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot; version=&quot;1.0&quot;&gt;" file="${path.user.xsl}/db_pdfdoc.xsl"/>
		<echo message="&lt;xsl:import href=&quot;${path.xsl}/fo/docbook.xsl&quot;/&gt;" file="${path.user.xsl}/db_pdfdoc.xsl" append="true"/>
		<echo message="&lt;/xsl:stylesheet&gt;" file="${path.user.xsl}/db_pdfdoc.xsl" append="true"/>

		<echo message="&lt;xsl:stylesheet xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot; version=&quot;1.0&quot;&gt;" file="${path.user.xsl}/db_htmlhelp.xsl"/>
		<echo message="&lt;xsl:import href=&quot;${path.xsl}/htmlhelp/htmlhelp.xsl&quot;/&gt;" file="${path.user.xsl}/db_htmlhelp.xsl" append="true"/>
		<echo message="&lt;/xsl:stylesheet&gt;" file="${path.user.xsl}/db_htmlhelp.xsl" append="true"/>

		<echo message="&lt;xsl:stylesheet xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot; version=&quot;1.0&quot;&gt;" file="${path.user.xsl}/db_htmlsingle.xsl"/>
		<echo message="&lt;xsl:import href=&quot;${path.xsl}/html/docbook.xsl&quot;/&gt;" file="${path.user.xsl}/db_htmlsingle.xsl" append="true"/>
		<echo message="&lt;/xsl:stylesheet&gt;" file="${path.user.xsl}/db_htmlsingle.xsl" append="true"/>

		<echo message="&lt;xsl:stylesheet xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot; version=&quot;1.0&quot;&gt;" file="${path.user.xsl}/db_htmlchunk.xsl"/>
		<echo message="&lt;xsl:import href=&quot;${path.xsl}/html/chunk.xsl&quot;/&gt;" file="${path.user.xsl}/db_htmlchunk.xsl" append="true"/>
		<echo message="&lt;/xsl:stylesheet&gt;" file="${path.user.xsl}/db_htmlchunk.xsl" append="true"/>

	</target>

<!-- ====================================================================== -->
<!-- Try creating the version file                                          -->
<!-- ====================================================================== -->

	<target name="versioninfo" description="Creates the version file">
		<!-- This task shouldn't run every time because it triggers a rebuild of all the docs.
		     To work around this, version.xml is excluded from the files that trigger the build.-->
		<if test="${environment::variable-exists('MajorVersion')}">
			<copy
				file="source\en\version.in"
				tofile="source\en\version.xml"
				overwrite="true"
				>
				<filterchain>
					<replacetokens begintoken="$" endtoken="$">
						<token key="MajorVersion" value="${environment::get-variable('MajorVersion')}" />
						<token key="MinorVersion" value="${environment::get-variable('MinorVersion')}" />
						<token key="MicroVersion" value="${environment::get-variable('Microversion')}" />
						<token key="WCREV" value="${environment::get-variable('WCREV')}" />
					</replacetokens>
				</filterchain>
			</copy>
		</if>
		<if test="${not environment::variable-exists('MajorVersion')}">
			<copy
				file="source\en\version.in"
				tofile="source\en\version.xml"
				overwrite="true"
			/>
			<echo>Note: version information not set!</echo>
		</if>
	</target>

<!-- ====================================================================== -->
<!-- Prepare help context file                                              -->
<!-- ====================================================================== -->

	<target name="help.prepare" description="Create CHM help context">
		<call target="help.prepare.${app}" />
<!--		if="${target::exists('help.prepare.${app}')}"/>-->

		<echo message="help resource generation with file ${help.resource}" />
		
		<echo message="// Generated Help Map file." file="${help.context}" />
		<echo message="" file="${help.context}" append="true"/>
		<echo message="// Commands (ID_* and IDM_*)" file="${help.context}" append="true"/>
		<exec program="makehm"
					commandline="/h ID_,HID_,0x10000 IDM_,HIDM_,0x10000 ${help.resource}"
					output="${help.context}"
					append="true"
					verbose="false" />

		<echo message="" file="${help.context}" append="true"/>
		<echo message="echo // Prompts (IDP_*)" file="${help.context}" append="true"/>
		<exec program="makehm"
					commandline="/h IDP_,HIDP_,0x30000 ${help.resource}"
					output="${help.context}"
					append="true"
					verbose="false" />

		<echo message="" file="${help.context}" append="true"/>
		<echo message="echo // Resources (IDR_*)" file="${help.context}" append="true"/>
		<exec program="makehm"
					commandline="/h IDR_,HIDR_,0x20000 ${help.resource}"
					output="${help.context}"
					append="true"
					verbose="false" />

		<echo message="" file="${help.context}" append="true"/>
		<echo message="echo // Dialogs (IDD_*)" file="${help.context}" append="true"/>
		<exec program="makehm"
					commandline="/h IDD_,HIDD_,0x20000 ${help.resource}"
					output="${help.context}"
					append="true"
					verbose="false" />

		<echo message="" file="${help.context}" append="true"/>
		<echo message="// Frame Controls xyxzy(IDW_*)" file="${help.context}" append="true"/>
		<exec program="makehm"
					commandline="/h /a afxhh.h IDW_,HIDW_,0x50000 ${help.resource}"
					output="${help.context}"
					append="true"
					verbose="false" />


		<!-- Copy help context to target location -->
		<copy file="${help.context}" todir="${doc.target.work}" overwrite="true"/>

	</target>

</project>
