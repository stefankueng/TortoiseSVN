msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2005-04-17 09:27Westeuropäische Normalzeit\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: source/en/tsvn_repository/repository_hooks.xml:3(title) 
msgid "Hook Scripts"
msgstr ""

#: source/en/tsvn_repository/repository_hooks.xml:5(primary) 
msgid "hooks"
msgstr ""

#: source/en/tsvn_repository/repository_hooks.xml:7(para) 
msgid "A hook script is a program triggered by some repository event, such as the creation of a new revision or the modification of an unversioned property. Each hook is handed enough information to tell what that event is, what target(s) it's operating on, and the username of the person who triggered the event. Depending on the hook's output or return status, the hook program may continue the action, stop it, or suspend it in some way. Please refer to the chapter on <ulink url=\"http://svnbook.red-bean.com/en/1.1/ch05s02.html#svn-ch-5-sect-2.1\"><citetitle>Hook Scripts</citetitle></ulink> in the Subversion Book for full details about the hooks which are implemented."
msgstr ""

#: source/en/tsvn_repository/repository_hooks.xml:22(para) 
msgid "Sample hook scripts can be found in the <filename>hooks</filename> directory of the repository. These sample scripts are suitable for Unix/Linux servers but need to be modified if your server is Windows based. The hook can be a batch file or an executable. The sample below shows a batch file which might be used to implement a pre-revprop-change hook. <screen>\nrem Only allow log messages to be changed.\nif \"%4\" == \"svn:log\" exit 0\necho Property '%4' cannot be changed &gt;&amp;2\nexit 1\n</screen> Note that anything sent to stdout is discarded. if you want a message to appear in the Commit Reject dialog you must send it to stderr. In a batch file this is achieved using <filename>&gt;&amp;2</filename>"
msgstr ""

#: source/en/tsvn_repository/repository_create.xml:3(title) 
msgid "Repository Creation"
msgstr ""

#: source/en/tsvn_repository/repository_create.xml:4(para) 
msgid "You can create a repository with the FSFS backend or with the old but stable Berkeley Database (BDB) format. The FSFS format is faster and it now works on network shares and Windows 98 without problems. The BDB format is more stable because it has been tested longer. Read <ulink url=\"http://svnbook.red-bean.com/en/1.1/ch05.html#svn-ch-5-sect-1.2.A\"><citetitle>Chapter 5, Repository Data-Stores</citetitle></ulink> in the SVN book for more information."
msgstr ""

#: source/en/tsvn_repository/repository_create.xml:16(title) 
msgid "Creating a Repository with the Command Line Client"
msgstr ""

#: source/en/tsvn_repository/repository_create.xml:18(primary) source/en/tsvn_repository/repository_create.xml:60(primary) 
msgid "Create"
msgstr ""

#: source/en/tsvn_repository/repository_create.xml:19(secondary) 
msgid "Command Line Client"
msgstr ""

#: source/en/tsvn_repository/repository_create.xml:23(para) 
msgid "Create an empty folder with the name SVN (e.g. <filename>D:\\SVN\\</filename>), which is used as root for all your repositories."
msgstr ""

#: source/en/tsvn_repository/repository_create.xml:30(para) 
msgid "Create another folder <filename>MyNewRepository</filename> inside <filename>D:\\SVN\\</filename>."
msgstr ""

#: source/en/tsvn_repository/repository_create.xml:37(para) 
msgid "Open the command prompt (or DOS-Box), change into <filename>D:\\SVN\\</filename> and type <screen>\nsvnadmin create --fs-type bdb MyNewRepository\n</screen> or <screen>\nsvnadmin create --fs-type fsfs MyNewRepository\n</screen>"
msgstr ""

#: source/en/tsvn_repository/repository_create.xml:50(para) 
msgid "Now you've got a new repository located at <filename>D:\\SVN\\MyNewRepository</filename>."
msgstr ""

#: source/en/tsvn_repository/repository_create.xml:58(title) 
msgid "Creating The Repository With TortoiseSVN"
msgstr ""

#: source/en/tsvn_repository/repository_create.xml:61(secondary) source/en/tortoisesvn.xml:4(title) 
msgid "TortoiseSVN"
msgstr ""

#: source/en/tsvn_repository/repository_create.xml:65(title) 
msgid "The TortoiseSVN menu for unversioned folders"
msgstr ""

#: source/en/tsvn_repository/repository_create.xml:70(para) 
msgid "Open the windows explorer"
msgstr ""

#: source/en/tsvn_repository/repository_create.xml:75(para) 
msgid "Create a new folder and name it e.g. <filename>SVNRepository</filename>"
msgstr ""

#: source/en/tsvn_repository/repository_create.xml:81(para) 
msgid "<action>Right-click</action> on the newly created folder and select <menuchoice><guimenu>TortoiseSVN</guimenu><guimenuitem>Create Repository here...</guimenuitem></menuchoice>."
msgstr ""

#: source/en/tsvn_repository/repository_create.xml:89(para) 
msgid "A repository is then created inside the new folder. <emphasis>Don't edit those files yourself!!!</emphasis>. If you get any errors make sure that the folder is empty and not write protected."
msgstr ""

#: source/en/tsvn_repository/repository_create.xml:97(para) 
msgid "To access your local repository you need the path to that folder. Just remember that Subversion expects all repository paths in the form <systemitem class=\"url\">file:///C:/SVNRepository/</systemitem>"
msgstr ""

#: source/en/tsvn_repository/repository_create.xml:102(para) 
msgid "To access a repository located on a network share you can either use drive mapping, or you can use the UNC path. For UNC paths, the form is <systemitem class=\"url\">file:///\\ServerName/path/to/repos/</systemitem>. Note the backslash before the server name."
msgstr ""

#: source/en/tsvn_repository/repository_create.xml:111(para) 
msgid "Do not create or access a Berkeley DB repository on a network share. It <emphasis>cannot</emphasis> exist on a remote filesystem. Not even if you have the network drive mapped to a drive letter. If you attempt to use Berkeley DB on a network share, the results are unpredictable - you may see mysterious errors right away, or it may be months before you discover that your repository database is subtly corrupted."
msgstr ""

#: source/en/tsvn_repository/repository_create.xml:122(para) 
msgid "If you really need to access a repository through a network share, create the repository with fsfs format. If you need to provide server access as well, you will need Subversion Server 1.1 or higher."
msgstr ""

#: source/en/tsvn_repository/repository_backup.xml:3(title) 
msgid "Repository Backup"
msgstr ""

#: source/en/tsvn_repository/repository_backup.xml:5(primary) 
msgid "backup"
msgstr ""

#: source/en/tsvn_repository/repository_backup.xml:7(para) 
msgid "Whichever type of repository you use, it is vitally important that you maintain regular backups, and that you verify the backup. If the server fails, you may be able to access a recent version of your files, but without the repository all your history is lost forever."
msgstr ""

#: source/en/tsvn_repository/repository_backup.xml:14(para) 
msgid "The simplest (but not recommended) way is just to copy the repository folder onto the backup medium. However, you have to be absolutely sure that no process is accessing the data. In this context, access means <emphasis>any</emphasis> access at all. A BDB repository is written to even when the operation only appears to require reading, such as getting status. If your repository is accessed at all during the copy, (web browser left open, WebSVN, etc.) the backup will be worthless."
msgstr ""

#: source/en/tsvn_repository/repository_backup.xml:24(para) 
msgid "The recommended method is to run <screen>\nsvnadmin hotcopy path/to/repository path/to/backup --clean-logs\n</screen> to create a copy of your repository in a safe manner. Then backup the copy. The <literal>--clean-logs</literal> option is not required, but removes any redundant log files when you backup a BDB repository, which may save some space."
msgstr ""

#: source/en/tsvn_repository/repository_backup.xml:34(para) 
msgid "The <literal>svnadmin</literal> tool is installed automatically when you install the subversion command line client. If you are installing the command line tools on a Windows PC, the best way is to download the Windows installer version. It is compressed more efficiently than the <filename>.zip</filename> version, so the download is smaller, and it takes care of setting the paths for you. You can download the latest version of the Subversion command line client from <ulink url=\"http://subversion.tigris.org/servlets/ProjectDocumentList?folderID=91\"><citetitle>http://subversion.tigris.org/servlets/ProjectDocumentList?folderID=91</citetitle></ulink>."
msgstr ""

#: source/en/tsvn_repository/repository.xml:3(title) source/en/tsvn_basics.xml:34(title) source/en/tsvn_basics.xml:503(title) 
msgid "The Repository"
msgstr ""

#: source/en/tsvn_repository/repository.xml:5(para) 
msgid "No matter which protocol you use to access your repositories, you always need to create at least one repository. This can either be done with the Subversion command line client or with TortoiseSVN."
msgstr ""

#: source/en/tsvn_repository/repository.xml:10(para) 
msgid "If you haven't created a Subversion repository yet, it's time to do that now."
msgstr ""

#: source/en/tsvn_dug/dug_wcstatus.xml:3(title) 
msgid "Getting Status Information"
msgstr ""

#: source/en/tsvn_dug/dug_wcstatus.xml:5(primary) source/en/tsvn_dug/dug_wcstatus.xml:134(primary) 
msgid "status"
msgstr ""

#: source/en/tsvn_dug/dug_wcstatus.xml:7(para) 
msgid "While you are working on your working copy you often need to know which files you have changed/added/removed or renamed, or even which files got changed and committed by others."
msgstr ""

#: source/en/tsvn_dug/dug_wcstatus.xml:13(title) 
msgid "Icon Overlays"
msgstr ""

#: source/en/tsvn_dug/dug_wcstatus.xml:15(primary) source/en/tsvn_app_faq.xml:75(primary) 
msgid "overlays"
msgstr ""

#: source/en/tsvn_dug/dug_wcstatus.xml:19(title) 
msgid "Explorer showing icon overlays"
msgstr ""

#: source/en/tsvn_dug/dug_wcstatus.xml:17(para) 
msgid "<placeholder-1/> Now that you have checked out a working copy from a Subversion repository you can see your files in the windows explorer with changed icons. This is one of the reasons why TortoiseSVN is so popular. TortoiseSVN adds a so called overlay icon to each file icon which overlaps the original file icon. Depending on the Subversion status of the file the overlay icon is different. <graphic fileref=\"images/InSubVersionIcon.png\"/> A fresh checked out working copy has a green checkmark as overlay. That means the Subversion status is <literal>normal</literal>. <graphic fileref=\"images/ModifiedIcon.png\"/> As soon as you start editing a file, the status changes to <literal>modified</literal> and the icon overlay then changes to a red exclamation mark. That way you can easily see which files were changed since you last updated your working copy and need to be committed. <graphic fileref=\"images/ConflictIcon.png\"/> If during an update a <literal>conflict</literal> occurs then the icon changes to a yellow exclamation mark. <graphic fileref=\"images/AddedIcon.png\"/> The plus sign tells you that a file or folder has been scheduled to be <literal>added</literal> to version control. <graphic fileref=\"images/DeletedIcon.png\"/> This Icon shows you that some files or folders inside the current folder have been scheduled do be <literal>deleted</literal> from version control or a file under version control is missing in a folder."
msgstr ""

#: source/en/tsvn_dug/dug_wcstatus.xml:48(para) 
msgid "The folder icons also have icon overlays displayed. By default, only the status of the folder itself is shown. But you can change that behaviour in the <menuchoice><guimenuitem>Settings</guimenuitem></menuchoice> (<xref linkend=\"tsvn-DUG-settings\"/>), so that the status of folders is shown recursively. This will make the icon overlays for folders slower and is therefore not recommended on slower machines or large working copies."
msgstr ""

#: source/en/tsvn_dug/dug_wcstatus.xml:67(title) 
msgid "Slow Overlays"
msgstr ""

#: source/en/tsvn_dug/dug_wcstatus.xml:68(para) 
msgid "You may notice that if you enable the recursive overlay for folders that the explorer slows down remarkably when browsing working copies. This depends on how big your working copy is and how much RAM Windows can use for file index caching. Usually it's only very slow the first time you browse such a directory - if you browse the same directory later again it's much faster."
msgstr ""

#: source/en/tsvn_dug/dug_wcstatus.xml:76(para) 
msgid "If you want to disable the recursive overlays for some folders but not for all then you can do that by creating a file called <filename>_tsvnexcluderecursive</filename> inside that folder. This will disable the recursive overlays for that folder, but <emphasis>not</emphasis> for the files or folders inside it."
msgstr ""

#: source/en/tsvn_dug/dug_wcstatus.xml:84(para) 
msgid "You can also disable the overlays completely for a folder by creating a file called <filename>_tsvnexcludethis</filename> inside that folder. Again, this disables the overlays only for that folder, not the folders inside it. You can define specific paths to be excluded from showing overlays on the settings page (<xref linkend=\"tsvn-DUG-settings-overlay\"/>)."
msgstr ""

#: source/en/tsvn_dug/dug_wcstatus.xml:60(para) 
msgid "With this setting each folder shows the status of all files below it, where status <literal>conflict</literal> overrides <literal>modified</literal> and <literal>modified</literal> overrides <literal>normal</literal>. So you can easily see if there's a file with a conflict or a modified file in a folder. <tip><placeholder-1/><placeholder-2/><placeholder-3/><placeholder-4/></tip>"
msgstr ""

#: source/en/tsvn_dug/dug_wcstatus.xml:95(para) 
msgid "Unlike <application>TortoiseCVS</application> (the CVS shell integration) no overlay icon for unversioned files is shown. We do this because the number of icon overlays are limited system wide and should be used economically."
msgstr ""

#: source/en/tsvn_dug/dug_wcstatus.xml:103(title) 
msgid "TortoiseSVN Columns In Explorer"
msgstr ""

#: source/en/tsvn_dug/dug_wcstatus.xml:105(primary) 
msgid "Explorer Columns"
msgstr ""

#: source/en/tsvn_dug/dug_wcstatus.xml:107(para) 
msgid "The same information which is available from the icon overlays (and much more) can be displayed as additional columns in Explorer's Detailed View."
msgstr ""

#: source/en/tsvn_dug/dug_wcstatus.xml:112(para) 
msgid "Simply right click on one of the headings of a column, choose <guimenuitem>More...</guimenuitem> from the context menu displayed. A dialog will appear where you can specify the columns and their order, which is displayed in the \"Detailed View\". Scroll down until the entries starting with SVN come into view. Check the ones you would like to have displayed and close the dialog by pressing <guibutton>OK</guibutton>. The columns will be appended to the right of those currently displayed. You can reorder them by drag and drop, or resize them, so that they fit your needs."
msgstr ""

#: source/en/tsvn_dug/dug_wcstatus.xml:124(para) 
msgid "If you want the current layout to be displayed in all your working copies, you may want to make this the default view."
msgstr ""

#: source/en/tsvn_dug/dug_wcstatus.xml:132(title) 
msgid "Status Of The Repository"
msgstr ""

#: source/en/tsvn_dug/dug_wcstatus.xml:138(title) 
msgid "Check for Modifications"
msgstr ""

#: source/en/tsvn_dug/dug_wcstatus.xml:136(para) 
msgid "<placeholder-1/> It's often very useful to know which files you have changed and also which files got changed and committed by others. That's where the command <menuchoice><guimenuitem>Check For Modifications...</guimenuitem></menuchoice> comes in handy. This dialog will show you every file that has changed in any way in your working copy, as well as any unversioned files you may have. If you click on the <guibutton>Check Repository</guibutton> then you can also look for changes in the repository. That way you can check before an update if there's a possible conflict."
msgstr ""

#: source/en/tsvn_dug/dug_wcstatus.xml:155(para) 
msgid "From the context menu of the dialog you can show a diff of the changes or revert your local changes. TortoiseSVN automatically downloads the most recent version from the repository to do the diff."
msgstr ""

#: source/en/tsvn_dug/dug_wcstatus.xml:163(title) 
msgid "Viewing Diffs"
msgstr ""

#: source/en/tsvn_dug/dug_wcstatus.xml:165(primary) 
msgid "diffing"
msgstr ""

#: source/en/tsvn_dug/dug_wcstatus.xml:167(para) 
msgid "Often you want to look inside your files, to have a look at what you've changed. You can accomplish this by selecting a file which has changed, and selecting <guimenuitem>Diff</guimenuitem> from TortoiseSVN's context menu. This starts the external diff-viewer, which will then compare the current file to it's contents, after the last checkout or update."
msgstr ""

#: source/en/tsvn_dug/dug_wcstatus.xml:176(para) 
msgid "Even when not inside a working copy or when you have multiple versions of the file lying around, you can still display diffs:"
msgstr ""

#: source/en/tsvn_dug/dug_wcstatus.xml:180(para) 
msgid "Select the two files you want to compare in explorer (e.g. using <keycap>Ctrl</keycap> and the mouse) and choose <guimenuitem>Diff</guimenuitem> from TortoiseSVN's context menu. The file clicked last (the one with the focus, i.e. the dotted rectangle) will be regarded as the later one."
msgstr ""

#: source/en/tsvn_dug/dug_update.xml:3(title) 
msgid "Update Your Working Copy With Changes From Others"
msgstr ""

#: source/en/tsvn_dug/dug_update.xml:5(primary) source/en/tsvn_app_automation.xml:113(entry) 
msgid "update"
msgstr ""

#: source/en/tsvn_dug/dug_update.xml:9(title) 
msgid "Progress dialog showing finished update"
msgstr ""

#: source/en/tsvn_dug/dug_update.xml:7(para) 
msgid "<placeholder-1/> Occasionally you may want changes done by others to get incorporated in your local working copy. The process of getting changes from the server to your local copy is known as <literal>updating</literal>. Updating may be done on single files, a set of selected files, or recursively on entire directory hierarchies. To update, select the files and/or directories you want, <action>right click</action> and select <menuchoice><guimenuitem>Update</guimenuitem></menuchoice> in the explorer context menu. A window will pop up displaying the progress of the update as it runs. Changes done by others will be merged into your files, keeping any changes you may have done to the same files. The repository is <emphasis>not</emphasis> affected by an update."
msgstr ""

#: source/en/tsvn_dug/dug_update.xml:33(term) source/en/tsvn_dug/dug_commit.xml:102(term) 
msgid "Blue"
msgstr ""

#: source/en/tsvn_dug/dug_update.xml:34(listitem) 
msgid "New item added to your WC."
msgstr ""

#: source/en/tsvn_dug/dug_update.xml:39(term) source/en/tsvn_dug/dug_commit.xml:108(term) 
msgid "Dark red"
msgstr ""

#: source/en/tsvn_dug/dug_update.xml:40(listitem) 
msgid "Redundant item deleted from your WC."
msgstr ""

#: source/en/tsvn_dug/dug_update.xml:45(term) 
msgid "Green"
msgstr ""

#: source/en/tsvn_dug/dug_update.xml:46(listitem) 
msgid "Changes from repository successfully merged with your local changes."
msgstr ""

#: source/en/tsvn_dug/dug_update.xml:52(term) 
msgid "Bright red"
msgstr ""

#: source/en/tsvn_dug/dug_update.xml:53(listitem) 
msgid "Changes from repository merged with local changes, resulting in conflicts which you need to resolve."
msgstr ""

#: source/en/tsvn_dug/dug_update.xml:59(term) source/en/tsvn_dug/dug_commit.xml:114(term) 
msgid "Black"
msgstr ""

#: source/en/tsvn_dug/dug_update.xml:60(listitem) source/en/tsvn_dug/dug_commit.xml:115(listitem) 
msgid "All other items."
msgstr ""

#: source/en/tsvn_dug/dug_update.xml:28(para) 
msgid "The progress dialog uses colour coding to highlight different update actions <placeholder-1/>"
msgstr ""

#: source/en/tsvn_dug/dug_update.xml:66(para) 
msgid "If you get any <literal>conflicts</literal> during an update (this can happen if others changed the same lines in the same file as you did and those changes don't match) then the dialog shows those conflicts in red. You can <action>double click</action> on these lines to start the external merge tool to resolve the conflicts."
msgstr ""

#: source/en/tsvn_dug/dug_update.xml:73(para) 
msgid "TortoiseSVN also allows you to update your working copy to a specific revision, not only to the most recent one. This command is called <menuchoice><guimenuitem>Update to Revision...</guimenuitem></menuchoice> and first opens a dialog where you can enter the required revision."
msgstr ""

#: source/en/tsvn_dug/dug_update.xml:82(para) 
msgid "If you update a file or folder to a specific revision, you will get <literal>out of date</literal> error messages when you try to commit them! If you want to undo changes to a file and start afresh from an earlier revision, you must either use the <menuchoice><guimenuitem>Revert changes from this revision</guimenuitem></menuchoice> command from the log dialog or the <menuchoice><guimenuitem>Merge...</guimenuitem></menuchoice> menu command."
msgstr ""

#: source/en/tsvn_dug/dug_update.xml:98(para) 
msgid "The <menuchoice><guimenuitem>Update to Revision...</guimenuitem></menuchoice> command allows you to revert your working to an earlier revision. Say e.g. your working copy is at revision 100, but you want your working copy To reflect the state which it had in revision 50 - then simply update to revision 50."
msgstr ""

#: source/en/tsvn_dug/dug_update.xml:108(para) 
msgid "In general, updating individual files to an earlier revision is not a good idea as it leaves your working copy in an inconsistent state. If the file you are updating has changed name, you may even find that the file just disappears from your working copy because no file of that name existed in the earlier revision. If you simply want a local copy of an old version of a file it is better to use the <menuchoice><guimenuitem>Save revision to...</guimenuitem></menuchoice> command from the log dialog for that file."
msgstr ""

#: source/en/tsvn_dug/dug_update.xml:121(para) 
msgid "If you updated your working copy to an earlier revision, you must not make changes to the files! You will get <literal>out of date</literal> errors if you try to commit those changes. If you want to revert some changes in your working copy, then use the repository browser and save the file in question over the file in your working copy. Or you can use the log dialog and use the command <menuchoice><guimenuitem>Revert changes in this revision</guimenuitem></menuchoice>. This will undo only those changes made in the selected revision. Changes made after that revision will be retained. For reverting multiple revisions, you should use the merge command, where you can specify the range of revisions you want to undo."
msgstr ""

#: source/en/tsvn_dug/dug_update.xml:138(title) 
msgid "Multiple Files/Folders"
msgstr ""

#: source/en/tsvn_dug/dug_update.xml:139(para) 
msgid "If you select multiple files and folders in the explorer and then select <menuchoice><guimenuitem>Update</guimenuitem></menuchoice>, all of those files/folders are updated one by one. TortoiseSVN makes sure that all files/folders which are from the same repository are updated to the exact same revision! Even if between those updates another commit occurred."
msgstr ""

#: source/en/tsvn_dug/dug_update.xml:151(title) 
msgid "Local File Already Exists"
msgstr ""

#: source/en/tsvn_dug/dug_update.xml:152(para) 
msgid "Sometimes when you try to update, the update fails with a message to say that there is already a local file of the same name. This typically happens when Subversion tries to checkout a newly versioned file, and finds that an unversioned file of the same name already exists in your working folder. Subversion will never overwrite an unversioned file - it might contain something you are working on, which coincidentally has the same filename as another developer has used for his newly committed file."
msgstr ""

#: source/en/tsvn_dug/dug_update.xml:161(para) 
msgid "If you get this error message, the solution is simply to rename the local unversioned file. After completing the update, you can check whether the renamed file is still needed."
msgstr ""

#: source/en/tsvn_dug/dug_update.xml:166(para) 
msgid "If you keep getting error messages, use <menuchoice><guimenuitem>Check for modifications</guimenuitem></menuchoice> instead to list all the problem files. That way you can deal with them all at once."
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:3(title) 
msgid "Revision Log Dialog"
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:5(primary) source/en/tsvn_app_automation.xml:87(entry) 
msgid "log"
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:8(primary) 
msgid "history"
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:11(para) 
msgid "For every change you make and commit, you should provide a log message for that change. That way you can later find out what changes you made and why, and you have a detailed log for your development process."
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:23(para) 
msgid "The top pane shows a list of revisions where changes to the file/folder have been committed. This summary includes the date and time, the person who committed the revision and the start of the log message."
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:29(para) 
msgid "Lines shown in blue indicate that something has been copied to this development line (perhaps from a branch)."
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:35(para) 
msgid "The middle pane shows the full log message for the selected revision."
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:41(para) 
msgid "The bottom pane shows a list of all files and folders that were changed as part of the selected revision."
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:17(para) 
msgid "The Revision Log Dialog retrieves all those log messages and shows them to you. The display is divided into 3 panes. <placeholder-1/> But it does much more than that - it provides context menu commands which you can use to get even more information about the project history."
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:52(title) 
msgid "Invoking the Revision Log Dialog"
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:55(title) 
msgid "The Revision Log Dialog"
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:61(para) 
msgid "From the TortoiseSVN context submenu"
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:66(para) 
msgid "From the property page"
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:71(para) 
msgid "From the Progress dialog after an update has finished. Then the Log dialog only shows those revisions which were changed since your last update"
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:53(para) 
msgid "<placeholder-1/> There are several places from where you can show the Log dialog: <placeholder-2/>"
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:81(title) 
msgid "Getting Additional Information"
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:84(title) 
msgid "The Revision Log Dialog Top Pane with Context Menu"
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:90(para) 
msgid "Compare the selected revision with your working copy. The default Diff-Tool is TortoiseMerge which is supplied with TortoiseSVN. If the log dialog is for a folder, this will show you a list of changed files, and allow you to review the changes made to each file individually."
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:100(para) 
msgid "View the changes made in the selected revision as a Unified-Diff file. The Unified-Diff operation is faster than invoking the <quote>normal</quote> external diff viewer because TortoiseSVN doesn't have to fetch whole files but only the differences."
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:110(para) 
msgid "Save the selected revision to a file so you have an older version of that file. This option is only available when you access the log for a file, and it saves a version of that one file only."
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:118(para) 
msgid "Open the repository browser to examine the selected folder. This option is only available when you access the log for a directory."
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:125(para) 
msgid "Create a branch/tag from a selected revision. This is useful e.g. if you forgot to create a tag and already committed some changes which weren't supposed to get into that release."
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:133(para) 
msgid "Update your working copy to the selected revision. Useful if you want to have your working copy reflect a time in the past. It is best to update a whole directory in your working copy, not just one file, otherwise your working copy will be inconsistent and you will be unable to commit any changes."
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:143(para) 
msgid "Revert changes from which were made in the selected revision. The changes are reverted in your working copy so this operation does <emphasis>not</emphasis> affect the repository at all! Note that this will undo the changes made in that revision only. It does not replace your working copy with the entire file at the earlier revision. This is very useful for undoing an earlier change when other unrelated changes have been made since."
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:155(para) 
msgid "Edit the log message or author attached to a previous commit. Read <xref linkend=\"tsvn-DUG-showlog-4\"/> to find out how this works."
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:162(para) 
msgid "Search log messages for the text you enter. This searches the log messages that you entered and also the action summaries created by Subversion (shown in the bottom pane). The search is not case sensitive."
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:82(para) 
msgid "<placeholder-1/> The top pane of the Log dialog has a context menu that allows you to <placeholder-2/>"
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:173(title) 
msgid "Top Pane Context Menu for 2 Selected Files"
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:181(para) 
msgid "Compare the two selected revisions using a visual difference tool. The default Diff-Tool is TortoiseMerge which is supplied with TortoiseSVN. This option is only available for files, not folders."
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:189(para) 
msgid "View the differences between the two selected revisions as a Unified-Diff file. This works for files and folders."
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:195(para) 
msgid "Search log messages as described above."
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:171(para) 
msgid "<placeholder-1/> If you select two revisions at once (using the usual <keycap>Ctrl</keycap>-modifier), the context menu changes and only gives you three options: <placeholder-2/>"
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:203(title) 
msgid "The Log Dialog Bottom Pane with Context Menu"
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:209(para) 
msgid "Show differences made in the selected revision for the selected file. This context menu is only available for files shown as <literal>Modified</literal>."
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:216(para) 
msgid "Save the selected revision to a file so you have an older version of that file."
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:222(para) 
msgid "View the subversion properties for the selected item."
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:201(para) 
msgid "<placeholder-1/> The bottom pane of the Log dialog also has a context menu that allows you to <placeholder-2/>"
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:230(title) 
msgid "Getting all log messages"
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:236(para) 
msgid "For a large repository there may be hundreds or even thousands of changes and fetching them all could take a long time. Normally you are only interested in the more recent changes. By default, the number of log messages fetched is limited to 100, but you can change this value in <menuchoice><guimenuitem>Settings</guimenuitem></menuchoice> (<xref linkend=\"tsvn-DUG-settings\"/>),"
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:250(para) 
msgid "When the <guilabel>Stop on copy/rename</guilabel> box is checked, Show Log will stop at the point that the selected file or folder was copied from somewhere else within the repository. This can be useful when looking at branches (or tags) as it stops at the root of that branch, and gives a quick indication of changes made in that branch only."
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:259(para) 
msgid "This option is normally unchecked by default, except when the Show Log dialog is invoked from within the Merge dialog."
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:264(para) 
msgid "Note that Subversion currently implements renaming as a copy/delete pair, so renaming a file or folder will also cause the log display to stop if this option is checked."
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:231(para) 
msgid "The Log dialog does not always show all changes ever made for a number of reasons: <placeholder-1/> If you want to see <emphasis>all</emphasis> log messages right back to revision 1, press <guibutton>Get All</guibutton>."
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:277(title) 
msgid "Changing the Log Message and Author"
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:279(primary) 
msgid "edit log/author"
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:281(para) 
msgid "Sometimes you might want to change a log message you once entered, maybe because there's a spelling error in it or you want to improve the message or change it for other reasons. Or you want to change the author of the commit because you forgot to set up authentication or..."
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:288(para) 
msgid "Subversion lets you change both the log message and the author of revisions any time you want. But since such changes can't be undone (those changes are not versioned) this feature is disabled by default. To make this work, you must set up a pre-revprop-change hook. Please refer to the chapter on <ulink url=\"http://svnbook.red-bean.com/en/1.1/ch05s02.html#svn-ch-5-sect-2.1\"><citetitle>Hook Scripts</citetitle></ulink> in the Subversion Book for details about how to do that. Read <xref linkend=\"tsvn-repository-hooks\"/> to find some further notes on implementing hooks on a Windows machine."
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:301(para) 
msgid "Once you've set up your server with the required hooks, you can change both author and log message of any revision, using the context menu from the top pane of the Log dialog."
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:307(para) 
msgid "Because Subversion's revision properties are not versioned, making modifications to such a property (for example, the <literal>svn:log</literal> commit message property) will overwrite the previous value of that property <emphasis>forever</emphasis>."
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:318(title) 
msgid "Statistical Information"
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:320(primary) 
msgid "statistics"
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:322(para) 
msgid "The <guibutton>Statistics</guibutton> button brings up a box showing some interesting information about the revisions shown in the Log dialog. This shows how many authors have been at work, how many commits they have made, progress by week, and much more. Now you can see at a glance who has been working hardest and who is slacking ;-)"
msgstr ""

#: source/en/tsvn_dug/dug_showlog.xml:330(para) 
msgid "Note that the statistics cover the same period as the Log dialog. If that is only displaying one revision then the statistics will not tell you very much."
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:3(title) 
msgid "TortoiseSVN's Settings"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:5(primary) source/en/tsvn_app_automation.xml:200(entry) 
msgid "settings"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:7(para) 
msgid "To find out what the different settings are for, just leave your mouse pointer a second on the editbox/checkbox... and a helpful tooltip will popup."
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:14(title) source/en/tsvn_dug/dug_settings.xml:17(title) 
msgid "The Settings Dialog, Main Tab"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:24(term) 
msgid "Language"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:26(para) 
msgid "Selects your user interface language. What else did you expect?"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:33(term) 
msgid "Exclude/Ignore pattern"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:35(para) 
msgid "<indexterm><primary>exclude pattern</primary></indexterm><indexterm><primary>global ignore</primary></indexterm> Exclude patterns are used to prevent unversioned files from showing up e.g. in the commit dialog. Files matching the patterns are also ignored by an import. Exclude files or directories by typing in the names or extensions. Patterns are separated by spaces e.g. <literal>bin obj *.bak *.~?? *.jar *.[Tt]mp</literal>. The first two entries refer to directories, the other four to files."
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:53(literal) 
msgid "global-ignores"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:56(guibutton) 
msgid "Edit"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:51(warning) 
msgid "If you use the subversion configuration file to set a <placeholder-1/> pattern, it will override the settings you made here. The Subversion configuration file is accessed using the <placeholder-2/> as described below."
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:58(para) 
msgid "This exclude pattern will affect all your projects. It is not versioned, so it will not affect other users. By contrast you can also use the versioned <literal>svn:ignore</literal> property to exclude files or directories from version control. You can set the <literal>svn:ignore</literal> property using the <menuchoice><guimenuitem>Add to Ignore List</guimenuitem></menuchoice> command. After commiting every other user will have the same <literal>svn:ignore</literal> property set for this project / directory as you. If you want to remove an ignored file from <literal>svn:ignore</literal>, you have to edit the parent folder properties. Read <xref linkend=\"tsvn-DUG-ignore\"/> and <xref linkend=\"tsvn-DUG-propertypage\"/> for more information."
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:82(term) 
msgid "Default number of log messages"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:84(para) 
msgid "Limits the number of log messages that TortoiseSVN fetches when you first select <menuchoice><guimenuitem>Show Log</guimenuitem></menuchoice> Useful for slow connections / servers. You can always <guibutton>Fetch All</guibutton> messages."
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:96(term) 
msgid "Edit..."
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:98(para) 
msgid "... the subversion configuration file directly. Some settings cannot be modified directly by TortoiseSVN, and need to be set here instead. For more information about the subversion <filename>config</filename> file see the <ulink url=\"http://svnbook.red-bean.com/en/1.1/ch07.html#svn-ch-7-sect-1.3.2\"><citetitle>Subversion Manual</citetitle></ulink>. The section on <ulink url=\"http://svnbook.red-bean.com/en/1.1/ch07s02.html#svn-ch-7-sect-2.4\"><citetitle>Automatic Property Setting</citetitle></ulink> is of particular interest, and that is configured here."
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:116(term) 
msgid "Short date / time format in log messages"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:118(para) 
msgid "If the standard long messages use up too much space on your screen use the short format."
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:125(term) 
msgid "Set filedates to \"last commit time\""
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:127(para) 
msgid "This option tells TortoiseSVN to set the filedates to the last commit time when doing a checkout or an update. Otherwise TortoiseSVN will use the current date. If you are developing software it is generally best to use the current date because build systems normally look at the datestamps to decide which files need compiling. If you use \"last commit time\" and revert to an older file revision, your project may not compile as you expect it to."
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:141(term) 
msgid "Progress Dialog"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:143(para) 
msgid "TortoiseSVN can automatically close all progress dialogs when the action is finished without error. This setting allows you to select the conditions for closing the dialogs. The default (recommended) setting is <guilabel>Close manually</guilabel> which allows you to review all messages and check what has happened. However, you may decide that you want to ignore some types of message and have the dialog close automatically if there are no critical changes."
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:154(para) 
msgid "<guilabel>Auto-close if no merges, adds or deletes</guilabel> means that the progress dialog will close if there were simple updates, but if changes from the repository were merged with yours, or if any files were added or deleted, the dialog will remain open."
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:161(para) 
msgid "<guilabel>Auto-close if no conflicts</guilabel> relaxes the criteria further and will close the dialog even if there were merges, adds or deletes. However, if there were any conflicts or errors, the dialog remains open."
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:168(para) 
msgid "<guilabel>Auto-close if no errors</guilabel> always closes the dialog even if there were conflicts. The only condition that keeps the dialog open is an error condition, which occurs when subversion is unable to complete the task. For example, an update fails because the server is inaccessible, or a commit fails because the working copy is out-of-date."
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:180(term) 
msgid "Check for newer versions"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:182(para) 
msgid "If checked, TortoiseSVN will check once a week to see if an update is available"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:15(para) 
msgid "<placeholder-1/> Apart from setting your preferred language, this dialog allows you to specify (almost) every setting TortoiseSVN has. <placeholder-2/>"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:210(title) source/en/tsvn_dug/dug_settings.xml:213(title) 
msgid "The Settings Dialog, Look and Feel Tab"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:211(para) 
msgid "<placeholder-1/> This tab allows you to choose the items for which TortoiseSVN will display icon overlays. If you feel that your icon overlays are very slow (explorer is not responsive), uncheck the \"Recurse into folders to fetch the status\" box. You can even disable all icon overlays, but where's the fun in that?"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:224(title) 
msgid "The Settings Dialog, Overlay Chooser Dialog"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:222(para) 
msgid "<placeholder-1/> You can also change the overlay icon set by clicking on <guibutton>Select Overlay Set</guibutton>. Note that if you change overlay set, you have to restart your computer for the changes to take effect."
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:232(para) 
msgid "The <guilabel>Exclude Paths</guilabel> are used to tell TortoiseSVN for which paths <emphasis>not</emphasis> to show icon overlays and status columns. This is useful if you have some very big working copies containing only libraries which you won't change at all and therefore don't need the overlays. For example:"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:239(para) 
msgid "<filename>f:\\development\\SVN\\Subversion</filename> will disable the overlays on <emphasis>only</emphasis> that specific folder. You still can see the overlays on all files and folder inside that folder."
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:244(para) 
msgid "<filename>f:\\development\\SVN\\Subversion*</filename> will disable the overlays on <emphasis>all</emphasis> files and folders whose path starts with <filename>f:\\development\\SVN\\Subversion</filename>. That means you won't see overlays for any files and folders below that path."
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:251(para) 
msgid "The same applies to the <guilabel>Include Paths</guilabel>. Only that for those paths the overlays are shown even if the overlays are disabled for that specific drive type."
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:256(para) 
msgid "You can also specify here which of the TortoiseSVN context menu entries will show up in the main context menu."
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:263(title) source/en/tsvn_dug/dug_settings.xml:269(title) 
msgid "The Settings Dialog, Network Tab"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:265(primary) 
msgid "proxy server"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:267(para) 
msgid "<placeholder-1/> Here you can configure your proxy server, if you need one to get through your company's firewall."
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:275(para) 
msgid "You can also specify which program TortoiseSVN should use to establish a secure connection to a svn+ssh repository. We recommend that you use TortoisePlink.exe. This is a version of the popular Plink program, and is included with TortoiseSVN."
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:284(title) source/en/tsvn_dug/dug_settings.xml:287(title) 
msgid "The Settings Dialog, Diff/Merge Tab"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:285(para) 
msgid "<placeholder-1/> Here you can define your own diff/merge programs that TortoiseSVN should use. The basic setting is to use the builtin TortoiseMerge which is installed alongside TortoiseSVN."
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:295(title) 
msgid "Diff Program"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:307(term) source/en/tsvn_dug/dug_settings.xml:381(term) 
msgid "%base"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:309(para) 
msgid "The original file without your changes"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:315(term) source/en/tsvn_dug/dug_settings.xml:390(term) 
msgid "%bname"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:317(para) source/en/tsvn_dug/dug_settings.xml:392(para) 
msgid "The window title for the base file"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:323(term) source/en/tsvn_dug/dug_settings.xml:398(term) 
msgid "%mine"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:325(para) 
msgid "Your own file, with your changes"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:331(term) source/en/tsvn_dug/dug_settings.xml:406(term) 
msgid "%yname"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:333(para) source/en/tsvn_dug/dug_settings.xml:408(para) 
msgid "The window title for your file"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:296(para) 
msgid "An external diff program may be used for comparing different revisions of files. The external program will need to obtain the filenames from the command line, along with any other command line options. TortoiseSVN uses substitution parameters prefixed with <literal>%</literal>. When it encounters one of these it will substitute the appropriate value. The order of the parameters will depend on the Diff program you use. <placeholder-1/>"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:340(para) 
msgid "The window titles are not pure filenames. TortoiseSVN treats that as a name to display and creates the names accordingly. So e.g. if you're doing a diff from a file in revision 123 with a file in your working copy, the names will be <filename>filename : revision 123</filename> and <filename>filename : working copy</filename>"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:350(para) 
msgid "For example, with ExamDiff Pro: <screen>\nC:\\Path-To\\ExamDiff.exe %base %mine\n</screen> or with KDiff3: <screen>\nC:\\Path-To\\kdiff3.exe %base %mine --L1 %bname --L2 %yname\n</screen>"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:360(para) 
msgid "If you use the <literal>svn:keywords</literal> property to expand keywords, and in particular the <literal>revision</literal> of a file, then there may be a difference between files which is purely due to the current value of the keyword. TSVN can hide this artificial difference by first parsing the files for keywords before doing the diff operation. However, this can take some time, especially with large files, so this behaviour is optional. If <guilabel>Convert files when diffing against BASE</guilabel> is checked then TSVN will pre-process the files."
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:374(title) 
msgid "Merge Program"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:383(para) 
msgid "the original file without your or the others changes"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:400(para) 
msgid "your own file, with your changes"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:414(term) 
msgid "%theirs"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:416(para) 
msgid "the file as it is in the repository"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:422(term) 
msgid "%tname"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:424(para) 
msgid "The window title for the file in the repository"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:430(term) 
msgid "%merged"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:432(para) 
msgid "the conflicted file, the result of the merge operation"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:439(term) 
msgid "%mname"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:441(para) 
msgid "The window title for the merged file"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:375(para) 
msgid "An external merge program used to resolve conflicted files. Parameter substitution is used in the same way as with the Diff Program. <placeholder-1/>"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:448(para) 
msgid "For example, with Perforce WinMerge: <screen>\nC:\\Path-To\\P4WinMrg.exe %base %theirs %mine %merged\n</screen> or with KDiff3: <screen>\nC:\\Path-To\\kdiff3.exe %base %mine %theirs -o %merged\n</screen>"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:460(title) 
msgid "Diff Viewer"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:461(para) 
msgid "A viewer program for unified-diff files (patch files). If you don't have one the builtin option is to use NotePad. No parameters are required."
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:466(para) 
msgid "The original Windows NotePad program does not behave well on files which do not have standard CR-LF line-endings. Since most unified diff files have pure LF line-endings, they do not view well in NotePad. However, you can download a free NotePad replacement <ulink url=\"http://www.flos-freeware.ch/notepad2.html\"><citetitle>Notepad2</citetitle></ulink> which not only displays the line-endings correctly, but also colour codes the added and removed lines."
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:481(title) 
msgid "The Settings Dialog, Diff/Merge Advanced Dialog"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:479(para) 
msgid "<placeholder-1/> In the advanced settings, you can define a different diff and merge program for every file extension. For instance you could associate Photoshop as the <quote>Diff</quote> Program for .jpg files :-)"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:490(title) 
msgid "TortoiseSVN's Sounds"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:492(primary) 
msgid "sounds"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:497(listitem) 
msgid "Error"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:500(listitem) 
msgid "Notice"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:503(listitem) 
msgid "Warning"
msgstr ""

#: source/en/tsvn_dug/dug_settings.xml:494(para) 
msgid "TortoiseSVN has three custom sounds which are installed by default. <placeholder-1/> You can select different sounds (or turn these sounds off completely) using the Windows Control Panel, not the TortoiseSVN settings dialog."
msgstr ""

#: source/en/tsvn_dug/dug_revgraph.xml:4(title) 
msgid "Revision Graphs"
msgstr ""

#: source/en/tsvn_dug/dug_revgraph.xml:6(primary) source/en/tsvn_basics.xml:468(primary) 
msgid "revision"
msgstr ""

#: source/en/tsvn_dug/dug_revgraph.xml:9(primary) 
msgid "graph"
msgstr ""

#: source/en/tsvn_dug/dug_revgraph.xml:13(title) 
msgid "A Revision Graph"
msgstr ""

#: source/en/tsvn_dug/dug_revgraph.xml:11(para) 
msgid "<placeholder-1/> Sometimes you need to know where branches and tags were taken from the trunk, and the ideal way to view this sort of information is as a graph or tree structure. That's when you need to use <menuchoice><guimenuitem>Revision Graph...</guimenuitem></menuchoice>"
msgstr ""

#: source/en/tsvn_dug/dug_revgraph.xml:23(para) 
msgid "This command analyses the revision history and attempts to create a tree showing the points at which copies were taken, and when branches/tags were deleted. Please note: It can take several minutes to retrieve all the data needed to create the revision graph, depending on how much the project has changed and of course your network connection to the repository."
msgstr ""

#: source/en/tsvn_dug/dug_revgraph.xml:35(term) 
msgid "Added file/folder"
msgstr ""

#: source/en/tsvn_dug/dug_revgraph.xml:37(para) 
msgid "Items which have been added, or created by copying another file/folder are shown using a rounded rectangle."
msgstr ""

#: source/en/tsvn_dug/dug_revgraph.xml:44(term) 
msgid "Deleted file/folder"
msgstr ""

#: source/en/tsvn_dug/dug_revgraph.xml:46(para) 
msgid "Deleted items eg. a branch which is no longer required, are shown using an octagon (rectangle with corners cut off)."
msgstr ""

#: source/en/tsvn_dug/dug_revgraph.xml:53(term) 
msgid "Normal file/folder"
msgstr ""

#: source/en/tsvn_dug/dug_revgraph.xml:55(para) 
msgid "All other items are shown using a plain rectangle."
msgstr ""

#: source/en/tsvn_dug/dug_revgraph.xml:31(para) 
msgid "The revision graph shows several types of node: <placeholder-1/> Note that the graph only shows the points at which items were added or deleted. Showing every revision of a project would generate an impossibly large graph for non-trivial cases. For this reason, simple project structures with no adds or deletes will produce an empty revision graph."
msgstr ""

#: source/en/tsvn_dug/dug_revgraph.xml:67(para) 
msgid "The revision date, author and comments are shown in a hint box whenever the mouse hovers over a revision box."
msgstr ""

#: source/en/tsvn_dug/dug_revgraph.xml:71(warning) 
msgid "Because subversion cannot provide all the information required, a certain amount of interpretation is required, which can sometimes give strange results. Nevertheless, the output for the trunk will generally give useful results."
msgstr ""

#: source/en/tsvn_dug/dug_revert.xml:4(title) 
msgid "Undo Changes"
msgstr ""

#: source/en/tsvn_dug/dug_revert.xml:6(primary) source/en/tsvn_app_faq.xml:455(primary) source/en/tsvn_app_automation.xml:138(entry) 
msgid "revert"
msgstr ""

#: source/en/tsvn_dug/dug_revert.xml:9(primary) 
msgid "undo"
msgstr ""

#: source/en/tsvn_dug/dug_revert.xml:24(title) 
msgid "Revert dialog"
msgstr ""

#: source/en/tsvn_dug/dug_revert.xml:11(para) 
msgid "If you want to undo all changes you made in a file since the last update you need to select the file, <action>right click</action> to pop up the context menu and then select the command <menuchoice><guimenuitem>revert</guimenuitem></menuchoice> in the TortoiseSVN submenu. A dialog will pop up showing you the files you've changed and you can revert. Select those you want to revert and press <guibutton>OK</guibutton>. <placeholder-1/>"
msgstr ""

#: source/en/tsvn_dug/dug_revert.xml:29(title) 
msgid "Undoing Changes which have been Committed"
msgstr ""

#: source/en/tsvn_dug/dug_revert.xml:30(para) 
msgid "<menuchoice><guimenuitem>Revert</guimenuitem></menuchoice> will only undo your local changes. It does <emphasis>not</emphasis> undo any changes which have already been committed. If you want to undo all the changes which were committed in a particular revision, read <xref linkend=\"tsvn-DUG-showlog\"/> for further information."
msgstr ""

#: source/en/tsvn_dug/dug_repobrowser.xml:3(title) source/en/tsvn_dug/dug_repobrowser.xml:14(title) 
msgid "The Repository Browser"
msgstr ""

#: source/en/tsvn_dug/dug_repobrowser.xml:5(primary) source/en/tsvn_app_automation.xml:261(entry) 
msgid "repobrowser"
msgstr ""

#: source/en/tsvn_dug/dug_repobrowser.xml:8(para) 
msgid "Sometimes you need to work directly on the repository, without having a working copy. That's what the <firstterm>Repository Browser</firstterm> is for. What the explorer and the icon overlays are for your working copy is the Repository Browser for the repository. <placeholder-1/> With the Repository Browser you can execute commands like copy, move, rename, ... directly on the repository."
msgstr ""

#: source/en/tsvn_dug/dug_repobrowser.xml:20(para) 
msgid "On the top of the Repository Browser Window you can enter the URL of the repository and the revision you want to browse. Browsing an older revision is useful if you want to e.g. recover a previously deleted file. Use the <menuchoice><guimenuitem>Copy To...</guimenuitem></menuchoice> command to do that and enter the full working copy path to where you want to recover your deleted file."
msgstr ""

#: source/en/tsvn_dug/dug_rename.xml:3(title) 
msgid "Deleting, Renaming And Moving"
msgstr ""

#: source/en/tsvn_dug/dug_rename.xml:5(primary) source/en/tsvn_app_faq.xml:452(primary) 
msgid "delete"
msgstr ""

#: source/en/tsvn_dug/dug_rename.xml:8(primary) source/en/tsvn_app_faq.xml:449(primary) source/en/tsvn_app_automation.xml:206(entry) 
msgid "remove"
msgstr ""

#: source/en/tsvn_dug/dug_rename.xml:11(primary) source/en/tsvn_app_automation.xml:213(entry) 
msgid "rename"
msgstr ""

#: source/en/tsvn_dug/dug_rename.xml:14(primary) 
msgid "move"
msgstr ""

#: source/en/tsvn_dug/dug_rename.xml:22(title) 
msgid "Explorer context menu for versioned files"
msgstr ""

#: source/en/tsvn_dug/dug_rename.xml:17(para) 
msgid "Unlike CVS, Subversion allows renaming and moving of files and folders. So there are menu entries for delete and rename in the TortoiseSVN submenu. <placeholder-1/>"
msgstr ""

#: source/en/tsvn_dug/dug_rename.xml:26(para) 
msgid "If you delete a file/directory using TSVN, the file is removed from your working copy and marked for deletion. The file's parent folder shows a \"deleted\" icon overlay. You can always get the file back, if you call <menuchoice><guimenuitem>revert</guimenuitem></menuchoice> on the parent folder."
msgstr ""

#: source/en/tsvn_dug/dug_rename.xml:41(para) 
msgid "select the files or directories you want to move"
msgstr ""

#: source/en/tsvn_dug/dug_rename.xml:46(para) source/en/tsvn_dug/dug_add.xml:50(para) 
msgid "<action>right-drag</action> them to the new location inside the working copy"
msgstr ""

#: source/en/tsvn_dug/dug_rename.xml:52(para) source/en/tsvn_dug/dug_add.xml:56(para) 
msgid "release the right mouse button"
msgstr ""

#: source/en/tsvn_dug/dug_rename.xml:57(para) 
msgid "in the popup menu select <menuchoice><guimenuitem>move files in Subversion to here</guimenuitem></menuchoice>"
msgstr ""

#: source/en/tsvn_dug/dug_rename.xml:36(para) 
msgid "If you want to move files inside a working copy, use the drag-and-drop handler again: <placeholder-1/> If a file is deleted via the explorer but not removed from version control (i.e. you delete a file as usual), the commit dialog shows those files and lets you remove them from version control too before the commit. So it doesn't really matter, if you forget to delete the file with TortoiseSVN as you are supposed to do."
msgstr ""

#: source/en/tsvn_dug/dug_rename.xml:73(title) 
msgid "Commit the parent folder"
msgstr ""

#: source/en/tsvn_dug/dug_rename.xml:74(para) 
msgid "Since renames and moves are done as a delete followed by an add you must commit the parent folder of the renamed/moved file. Only that way the deleted part of the rename/move will show up in the commit dialog. If you don't commit the removed part of the rename/move, it will stay behind in the repository and an update of your coworkers won't remove the old file."
msgstr ""

#: source/en/tsvn_dug/dug_rename.xml:84(title) 
msgid "Getting a deleted file or folder back"
msgstr ""

#: source/en/tsvn_dug/dug_rename.xml:85(para) 
msgid "If you have deleted a file or a folder and already committed that delete operation to the repository, then a normal <menuchoice><guimenuitem>Revert</guimenuitem></menuchoice> can't bring it back anymore. But the file or folder is not lost at all. If you know the revision the file or folder got deleted (if you don't, use the log dialog to find out) open the repository browser and switch to that revision. Then select the file or folder you deleted, right-click and select <menuchoice><guimenuitem>Copy to...</guimenuitem></menuchoice> as the target for that copy operation select the path to your working copy."
msgstr ""

#: source/en/tsvn_dug/dug_relocate.xml:3(title) 
msgid "Relocating a working copy"
msgstr ""

#: source/en/tsvn_dug/dug_relocate.xml:5(primary) source/en/tsvn_app_automation.xml:241(entry) 
msgid "relocate"
msgstr ""

#: source/en/tsvn_dug/dug_relocate.xml:10(title) 
msgid "The Relocate Dialog"
msgstr ""

#: source/en/tsvn_dug/dug_relocate.xml:8(para) 
msgid "<placeholder-1/> If your repository has for some reason changed it's location (IP/URL). Maybe you're even stuck and can't commit and you don't want to checkout your working copy again from the new location and to move all your changed data back into the new working copy, <menuchoice><guimenuitem>relocate</guimenuitem></menuchoice> is the command you are looking for. It basically does very little: it scans all \"entries\" files in the <filename>.svn</filename> folder and changes the URL of the entries to the new value."
msgstr ""

#: source/en/tsvn_dug/dug_relocate.xml:27(para) 
msgid "Don't use the relocate command to switch your working copy to a different branch! If you do that, then you will get many unexplainable error messages while updating, committing, ..."
msgstr ""

#: source/en/tsvn_dug/dug_relocate.xml:32(para) 
msgid "The relocate command must <emphasis>only</emphasis> be used if the URL of the server changed!"
msgstr ""

#: source/en/tsvn_dug/dug_propertypage.xml:3(title) 
msgid "Project Settings"
msgstr ""

#: source/en/tsvn_dug/dug_propertypage.xml:5(primary) 
msgid "properties"
msgstr ""

#: source/en/tsvn_dug/dug_propertypage.xml:9(title) 
msgid "Subversion property page"
msgstr ""

#: source/en/tsvn_dug/dug_propertypage.xml:7(para) 
msgid "<placeholder-1/> Sometimes you want to have a more detailed information about a file/directory than just the icon overlay. You can get all the information Subversion provides in the explorer properties dialog. Just select the file or directory and select <menuchoice><guimenuitem>properties</guimenuitem></menuchoice> in the context menu (note: this is the normal properties menu entry the explorer provides, not in the TortoiseSVN submenu!). In the properties dialog box TortoiseSVN has added a new property page for files/folders under Subversion control."
msgstr ""

#: source/en/tsvn_dug/dug_propertypage.xml:25(para) 
msgid "On the Subversion page you can see all relevant information about the selected file/directory. In addition you can read and set the subversion properties. You can add your own properties, or some properties with a special meaning in subversion. These begin with <literal>svn:</literal>. <literal>svn:externals</literal> is such a property; see how to handle externals in <xref linkend=\"tsvn-DUG-import-4\"/>. For more information about properties in subversion see the <ulink url=\"http://svnbook.red-bean.com/en/1.1/ch07s02.html#svn-ch-7-sect-2.3\"><citetitle>Subversion Manual</citetitle></ulink>."
msgstr ""

#: source/en/tsvn_dug/dug_propertypage.xml:38(para) 
msgid "To set a property, select the required property name from the combo box, then type in a value in the field below. Properties which take multiple values, such as an ignore list, can be entered on multiple lines. Click on <guibutton>Set</guibutton> to add that property to the list."
msgstr ""

#: source/en/tsvn_dug/dug_propertypage.xml:45(para) 
msgid "If you want to apply the property to <emphasis>every</emphasis> file and folder in the hierarchy below the current folder, check the <guilabel>Recursive</guilabel> checkbox."
msgstr ""

#: source/en/tsvn_dug/dug_propertypage.xml:50(para) 
msgid "If you wish to edit an existing property, first select that property from the list of existing properties, so that it appears in the edit area. Then procede as for a new property."
msgstr ""

#: source/en/tsvn_dug/dug_propertypage.xml:55(para) 
msgid "If you wish to remove an existing property, select that property from the list of existing properties, so that it appears in the edit area. Then click on <guibutton>Remove</guibutton>."
msgstr ""

#: source/en/tsvn_dug/dug_propertypage.xml:65(para) 
msgid "<literal>tsvn:logminsize</literal> sets the minimum length of a log message for a commit. If you enter a shorter message than specified here, the commit is disabled. This feature is very useful for reminding you to supply a proper descriptive message for every commit. If this property is not set, or the value is zero, empty log messages are allowed."
msgstr ""

#: source/en/tsvn_dug/dug_propertypage.xml:76(para) 
msgid "<literal>tsvn:logwidthmarker</literal> is used with projects which require log messages to be formatted with some maximum width (typically 80 characters) before a line break. Setting this property to a non-zero will do 2 things in the log message entry dialog: it places a marker to indicate the maximum width, and it disables word wrap in the display, so that you can see whether the text you entered is too long. Note: this feature will only work correctly if you have a fixed-width font selected for log messages."
msgstr ""

#: source/en/tsvn_dug/dug_propertypage.xml:89(para) 
msgid "<literal>tsvn:logtemplate</literal> is used with projects which have rules about log message formatting. The property holds a multi-line text string which will be inserted in the commit message box when you start a commit. You can then edit it to include the required information. Note: if you are also using <literal>tsvn:logminsize</literal>, be sure to set the length longer than the template or you will lose the protection mechanism."
msgstr ""

#: source/en/tsvn_dug/dug_propertypage.xml:100(para) 
msgid "In the Commit dialog you have the option to paste in the list of changed files, including the status of each file (added, modified, etc). <literal>tsvn:logfilelistenglish</literal> defines whether the file status is inserted in english or in the localized language. If the property is not set, the default is <literal>true</literal>."
msgstr ""

#: source/en/tsvn_dug/dug_propertypage.xml:111(para) 
msgid "TortoiseSVN can use spell checker modules which are also used by OpenOffice and Mozilla. If you have those installed this property will determine which spell checker to use, i.e. in which language the log messages for your project should be written. <literal>tsvn:projectlanguage</literal> sets the language module the spell checking engine should use when you enter a log message. You can find the values for your language on this page: <ulink url=\"http://msdn.microsoft.com/library/default.asp?url=/library/en-us/intl/nls_238z.asp\"><citetitle>MSDN: Language Identifiers</citetitle></ulink><literal>true</literal>."
msgstr ""

#: source/en/tsvn_dug/dug_propertypage.xml:60(para) 
msgid "TortoiseSVN has a few special properties of its own, and these begin with <literal>tsvn:</literal>. <placeholder-1/>"
msgstr ""

#: source/en/tsvn_dug/dug_propertypage.xml:129(para) source/en/tsvn_dug/dug_bugtracker.xml:212(para) 
msgid "Some <literal>tsvn:</literal> properties require a <literal>true/false</literal> value. TSVN also understands <literal>yes</literal> as a synonym for <literal>true</literal> and <literal>no</literal> as a synonym for <literal>false</literal>."
msgstr ""

#: source/en/tsvn_dug/dug_propertypage.xml:136(title) 
msgid "Set the tsvn: properties on folders"
msgstr ""

#: source/en/tsvn_dug/dug_propertypage.xml:137(para) 
msgid "These <literal>tsvn:</literal> properties must be set on <emphasis>folders</emphasis> for the system to work. When you commit a file or folder the properties are read from that folder. If the properties are not found there, TortoiseSVN will search upwards through the folder tree to find them until it comes to an unversioned folder, or the tree root (eg. <literal>C:\\</literal>) is found. If you can be sure that each user checks out only from e.g <filename>trunk/</filename> and not some subfolder, then it is sufficient to set the properties on <filename>trunk/</filename>. If you can't be sure, you should set the properties recursively on each subfolder. A property setting deeper in the project hierarchy overrides settings on higher levels (closer to <filename>trunk/</filename>)."
msgstr ""

#: source/en/tsvn_dug/dug_propertypage.xml:151(para) source/en/tsvn_dug/dug_bugtracker.xml:234(para) 
msgid "For <literal>tsvn:</literal> properties <emphasis>only</emphasis> you can use the <guilabel>Recursive</guilabel> checkbox to set the property to all subfolders in the hierarchy, without also setting it on all files."
msgstr ""

#: source/en/tsvn_dug/dug_propertypage.xml:159(title) 
msgid "Commit properties"
msgstr ""

#: source/en/tsvn_dug/dug_propertypage.xml:160(para) 
msgid "Subversion properties are versioned. After you change or add a property you have to commit your changes."
msgstr ""

#: source/en/tsvn_dug/dug_propertypage.xml:166(title) 
msgid "Conflicts on properties"
msgstr ""

#: source/en/tsvn_dug/dug_propertypage.xml:167(para) 
msgid "If there's a conflict on committing the changes, because another user has changed the same property, Subversion generates a <filename>.prej</filename> file. Delete this file after you have resolved the conflict."
msgstr ""

#: source/en/tsvn_dug/dug_propertypage.xml:175(title) 
msgid "Automatic property setting"
msgstr ""

#: source/en/tsvn_dug/dug_propertypage.xml:176(para) 
msgid "You can configure subversion to set properties automatically on files and folders when they are added to the repository. Read <xref linkend=\"tsvn-DUG-settings\"/> for further information."
msgstr ""

#: source/en/tsvn_dug/dug_propertypage.xml:182(para) 
msgid "<application>TortoiseSVN</application> can integrate with some bugtracking tools. This uses properties, which start with <literal>bugtraq:</literal>. Read <xref linkend=\"tsvn-DUG-bugtracker\"/> for further information."
msgstr ""

#: source/en/tsvn_dug/dug_patch.xml:3(title) 
msgid "Creating and Applying Patches"
msgstr ""

#: source/en/tsvn_dug/dug_patch.xml:5(primary) 
msgid "patch"
msgstr ""

#: source/en/tsvn_dug/dug_patch.xml:8(para) 
msgid "For open source projects (like this one) everyone has read access to the repository, and anyone can make a contribution to the project. So how are those contributions controlled? If just anyone could commit changes, the project would be permanently unstable and probably permanently broken. In this situation the change is managed by submitting a <firstterm>patch</firstterm> file to the development team, who do have write access. They can review the patch first, and then either submit it to the repository or reject it back to the author."
msgstr ""

#: source/en/tsvn_dug/dug_patch.xml:19(para) 
msgid "Patch files are simply Unified-Diff files showing the differences between your working copy and the base revision."
msgstr ""

#: source/en/tsvn_dug/dug_patch.xml:24(title) 
msgid "Creating a Patch File"
msgstr ""

#: source/en/tsvn_dug/dug_patch.xml:25(para) 
msgid "First you need to make <emphasis>and test</emphasis> your changes. Then instead of using <menuchoice><guimenuitem>Commit...</guimenuitem></menuchoice> on the parent folder, you select <menuchoice><guimenuitem>Create Patch...</guimenuitem></menuchoice> This will produce a single file containing a summary of all the changes you have made since the last update from the repository. If you create a patch file, make some more changes and then create another patch, the second patch file will include <emphasis>both</emphasis> sets of changes."
msgstr ""

#: source/en/tsvn_dug/dug_patch.xml:40(para) 
msgid "Just save the file using a filename of your choice. Patch files can have any extension you like, but by convention they should use the <filename>.patch</filename> or <filename>.diff</filename> extension. You are now ready to submit your patch file."
msgstr ""

#: source/en/tsvn_dug/dug_patch.xml:50(title) 
msgid "Applying a Patch File"
msgstr ""

#: source/en/tsvn_dug/dug_patch.xml:51(para) 
msgid "Patch files are applied to your working copy. This should be done from the same folder level as was used to create the patch. If you are not sure what this is, just look at the first line of the patch file. For example, if the first file being worked on was <filename>doc/source/english/chapter1.xml</filename> and the first line in the patchfile is <filename>Index: english/chapter1.xml</filename> then you need to apply the patch to the <filename>english</filename> folder."
msgstr ""

#: source/en/tsvn_dug/dug_patch.xml:62(para) 
msgid "In order to apply a patch file to your working copy, you need to have at least read access to the repository. The reason for this is that the merge program must reference the changes back to the revision against which they were made by the remote developer."
msgstr ""

#: source/en/tsvn_dug/dug_patch.xml:69(para) 
msgid "From the context menu for that folder, click on <menuchoice><guimenuitem>Apply Patch...</guimenuitem></menuchoice> This will bring up a file open dialog allowing you to select the patch file to apply. By default only <filename>.patch</filename> or <filename>.diff</filename> files are shown, but you can opt for \"All files\". Open the file and TortoiseMerge runs to merge the changes from the patch file with your working copy. A small window lists the files which have been changed. Double click on each one in turn, review the changes and save the merged files."
msgstr ""

#: source/en/tsvn_dug/dug_patch.xml:83(para) 
msgid "The remote developer's patch has now been applied to your working copy, so you need to commit to allow everyone else to access the changes from the repository."
msgstr ""

#: source/en/tsvn_dug/dug_merge.xml:3(title) 
msgid "Merging"
msgstr ""

#: source/en/tsvn_dug/dug_merge.xml:6(primary) source/en/tsvn_app_automation.xml:185(entry) 
msgid "merge"
msgstr ""

#: source/en/tsvn_dug/dug_merge.xml:8(para) 
msgid "Where branches are used to maintain separate lines of development, at some stage you will want to merge the changes made on one branch back into the trunk, or vice versa."
msgstr ""

#: source/en/tsvn_dug/dug_merge.xml:13(para) 
msgid "It is important to understand how branching and merging works in subversion before you start using it, as it can become quite complex. It is highly recommended that you read the chapter <ulink url=\"http://svnbook.red-bean.com/en/1.1/ch04.html\"><citetitle>Branching and Merging</citetitle></ulink> in the <ulink url=\"http://svnbook.red-bean.com/\"><citetitle>Subversion Book</citetitle></ulink> which gives a full description, and many examples of how it is used."
msgstr ""

#: source/en/tsvn_dug/dug_merge.xml:26(para) 
msgid "An important point to remember is that Merge is closely related to Diff. The merge process works by generating a list of differences between two points in the repository, and applying those differences to your working copy. For example if you want to merge the changes made in revision N then you have to compare revision N with revision (N-1). Novices often ask <quote>Why do I have to subtract 1 from the start revision.</quote> Think of the underlying Diff process and it will become clearer. TO make this easier, when you use <guibutton>Show Log</guibutton> to select a range of revisions to merge, TortoiseSVN makes this adjustment for you automatically."
msgstr ""

#: source/en/tsvn_dug/dug_merge.xml:39(para) 
msgid "In general it is a good idea to perform a merge into an unmodified working copy. If you have made other changes in your WC, commit those first. If the merge does not go as you expect, you may want to revert the changes, and the <guilabel>Revert</guilabel> command will discard <emphasis>all</emphasis> changes including any you made before the merge."
msgstr ""

#: source/en/tsvn_dug/dug_merge.xml:46(para) 
msgid "There are two common use cases for merging which are handled in slightly different ways, as described below."
msgstr ""

#: source/en/tsvn_dug/dug_merge.xml:52(title) 
msgid "Merging a Range of Revisions"
msgstr ""

#: source/en/tsvn_dug/dug_merge.xml:53(para) 
msgid "This method covers the case when you have made one or more revisions to a branch (or to the trunk) and you want to port those changes across to a different branch."
msgstr ""

#: source/en/tsvn_dug/dug_merge.xml:60(title) 
msgid "The Merge Dialog"
msgstr ""

#: source/en/tsvn_dug/dug_merge.xml:72(para) 
msgid "In the <guilabel>From:</guilabel> field enter the full folder url of the branch or tag containing the changes you want to port into your working copy. You may also click <guibutton>...</guibutton> to browse the repository and find the desired branch. If you have merged from this branch before, then just use the drop down list which shows a history of previously used URLs."
msgstr ""

#: source/en/tsvn_dug/dug_merge.xml:85(para) 
msgid "Because you are porting a range of revisions from the same branch into your working copy, make sure the <guilabel>Use \"From:\" URL</guilabel> checkbox is checked."
msgstr ""

#: source/en/tsvn_dug/dug_merge.xml:93(para) 
msgid "In the <guilabel>From Revision</guilabel> field enter the start revision number. This is the revision <emphasis>before</emphasis> the changes you want to merge. Remember that Subversion will create a diff file in order to perform the merge, so the start point has to be just before the first change you are interested in. For example, your log messages may look something like this: <screen>\nRev Comments\n39. Working on MyBranch\n38. Working on trunk\n37. Working on MyBranch\n36. Create branch MyBranch\n35. Working on trunk\n34. Working on trunk\n         ...\n</screen> If you now want to merge all the changes from MyBranch into the trunk you have to choose 36 as the <guilabel>From Revision</guilabel>, not 37 as you might think. If you select revision 37 as the start point, then the difference engine compares the end point with revision 37, and will miss the changes made in revision 37 itself. If that sounds complicated, don't worry, there is an easier way in TortoiseSVN ..."
msgstr ""

#: source/en/tsvn_dug/dug_merge.xml:121(para) 
msgid "The easiest way to select the range of revisions you need is to click on <guibutton>Show Log</guibutton>, as this will list recent changes with their log comments. If you want to merge the changes from a single revision, just select that revision. If you want to merge changes from several revisions, then select that range (using the usual <keycap>Shift</keycap>-modifier). Click on <guibutton>OK</guibutton> and the revision numbers of the <guilabel>From revision</guilabel> and <guilabel>To revision</guilabel> in the Merge dialog will <emphasis>both</emphasis> be filled in for you."
msgstr ""

#: source/en/tsvn_dug/dug_merge.xml:134(para) 
msgid "If you have already merged some changes from this branch, hopefully you will have made a note of the last revision merged in the log message when you committed the change. In that case, you can use <guibutton>Show Log</guibutton> for the Working Copy to trace that log message. Use the end point of the last merge as the start point for this merge. For example, if you have merged revisions 37 to 39 last time, then the start point for this merge should be revision 39."
msgstr ""

#: source/en/tsvn_dug/dug_merge.xml:147(para) 
msgid "If you have not used <guibutton>Show Log</guibutton> to select the revision range, then you will need to set the <guilabel>To Revision</guilabel> manually. Enter the last revision number in the range you want to merge. Often this will be the HEAD revision, although it doesn't need to be - you may just want to merge a single revision."
msgstr ""

#: source/en/tsvn_dug/dug_merge.xml:155(para) 
msgid "If other people may be committing changes then be careful about using the HEAD revision. It may not refer to the revision you think it does if someone else made a commit after your last update."
msgstr ""

#: source/en/tsvn_dug/dug_merge.xml:163(para) source/en/tsvn_dug/dug_merge.xml:270(para) 
msgid "Click <guibutton>OK</guibutton> to complete the merge."
msgstr ""

#: source/en/tsvn_dug/dug_merge.xml:58(para) 
msgid "<placeholder-1/> To merge revisions you need to go to a working copy of the branch in which you want to receive the changes, often the trunk. Select <menuchoice><guimenuitem>Merge...</guimenuitem></menuchoice> from the context menu. <placeholder-2/> The merge is now complete. It's a good idea to have a look at the merge and see if it's as expected. Merging is usually quite complicated. Conflicts often arise if the branch has drifted far from the trunk."
msgstr ""

#: source/en/tsvn_dug/dug_merge.xml:172(para) 
msgid "When you have tested the changes and come to commit this revision, your commit log message should <emphasis>always</emphasis> include the revision numbers which have been ported in the merge. If you want to apply another merge at a later time you will need to know what you have already merged, as you do not want to port a change more than once. Unfortunately merge information is not stored by Subversion. For more information about this, refer to <ulink url=\"http://svnbook.red-bean.com/en/1.1/ch04s03.html#svn-ch-4-sect-3.2.1\"><citetitle>Tracking Merges Manually</citetitle></ulink> in the <ulink url=\"http://svnbook.red-bean.com/\"><citetitle>Subversion Book</citetitle></ulink>"
msgstr ""

#: source/en/tsvn_dug/dug_merge.xml:188(para) 
msgid "Branch management is important. If you want to keep this branch up to date with the trunk, you should be sure to merge often so that the branch and trunk do not drift too far apart. Of course, you should still avoid repeated merging of changes, as explained above."
msgstr ""

#: source/en/tsvn_dug/dug_merge.xml:195(para) 
msgid "Subversion can't merge a file with a folder and vice versa - only folders to folders and files to files. If you click on a file and open up the merge dialog, then you have to give a path to a file in that dialog. If you select a folder and bring up the dialog, then you must specify a folder url for the merge."
msgstr ""

#: source/en/tsvn_dug/dug_merge.xml:206(title) 
msgid "Merging Two Different Trees"
msgstr ""

#: source/en/tsvn_dug/dug_merge.xml:207(para) 
msgid "This method covers the case when you have made a feature branch as discussed in the Subversion book. All trunk changes have been ported to the feature branch, week by week, and now the feature is complete you want to merge it back into the trunk. Because you have kept the feature branch synchronized with the trunk, the latest versions of branch and trunk will be absolutely identical except for your branch changes. So in this special case, you would merge by comparing the branch with the trunk."
msgstr ""

#: source/en/tsvn_dug/dug_merge.xml:227(para) 
msgid "In the <guilabel>From:</guilabel> field enter the full folder url of the <emphasis>trunk</emphasis>. This may sound wrong, but remember that the trunk is the start point to which you want to add the branch changes. You may also click <guibutton>...</guibutton> to browse the repository."
msgstr ""

#: source/en/tsvn_dug/dug_merge.xml:238(para) 
msgid "Because you are comparing two different trees, make sure the <guilabel>Use \"From:\" URL</guilabel> checkbox is <emphasis>not</emphasis> checked."
msgstr ""

#: source/en/tsvn_dug/dug_merge.xml:245(para) 
msgid "In the <guilabel>To:</guilabel> field enter the full folder url of the feature branch."
msgstr ""

#: source/en/tsvn_dug/dug_merge.xml:251(para) 
msgid "In both the <guilabel>From Revision</guilabel> field and the <guilabel>To Revision</guilabel> field, enter the last revision number at which the two trees were synchronized. If you are sure no-one else is making commits you can use the HEAD revision in both cases. If there is a chance that someone else may have made a commit since that synchronization, use the specific revision number to avoid losing more recent commits."
msgstr ""

#: source/en/tsvn_dug/dug_merge.xml:261(para) 
msgid "You can also use <guibutton>Show Log</guibutton> to select the revision. Note that in this case you are not selecting a range of revisions, so the revision you select there is what will actually appear in the <guilabel>Revision</guilabel> field."
msgstr ""

#: source/en/tsvn_dug/dug_merge.xml:217(para) 
msgid "To merge the feature branch back into the trunk you need to go to a working copy of the trunk. Select <menuchoice><guimenuitem>Merge...</guimenuitem></menuchoice> from the context menu. <placeholder-1/>"
msgstr ""

#: source/en/tsvn_dug/dug_merge.xml:276(para) 
msgid "In this case you will not need the feature branch again because the new feature is now integrated into the trunk. The feature branch is redundant and can be deleted from the repository if required."
msgstr ""

#: source/en/tsvn_dug/dug_merge.xml:285(title) 
msgid "Previewing Merge Results"
msgstr ""

#: source/en/tsvn_dug/dug_merge.xml:286(para) 
msgid "If you are uncertain about the merge operation, you may want to preview what will happen do before you allow it to change your working copy. There are two additional buttons to help you."
msgstr ""

#: source/en/tsvn_dug/dug_merge.xml:291(para) 
msgid "<guibutton>Unified Diff</guibutton> creates the diff file (remember that merge is based on diff) and shows you which lines will be changed in your working copy files. As this is a unified diff (patch) file it is not always easy to read out of context, but for small scale changes it is often helpful."
msgstr ""

#: source/en/tsvn_dug/dug_merge.xml:298(para) 
msgid "<guibutton>Dry Run</guibutton> performs the merge operation, but does <emphasis>not</emphasis> modify the working copy at all. It shows you a list of the files that will be changed by a real merge, and notes those areas where conflicts will occur."
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:3(title) 
msgid "Importing Data Into A Repository"
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:5(primary) source/en/tsvn_app_automation.xml:106(entry) 
msgid "import"
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:8(primary) 
msgid "Repository"
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:12(title) 
msgid "Repository Layout"
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:13(para) 
msgid "Before you import your data into the repository you should first think about how you want to organize your data. If you use one of the recommended layouts you will later have it much easier."
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:19(para) 
msgid "There are some standard, recommended ways to organize a repository. Most people create a <filename>trunk</filename> directory to hold the \"main line\" of development, a <filename>branches</filename> directory to contain branch copies, and a <filename>tags</filename> directory to contain tag copies. If a repository holds only one project, then often people create these top-level directories:"
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:28(screen) 
#, no-wrap
msgid "\n/trunk\n/branches\n/tags\n"
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:33(para) 
msgid "If a repository contains multiple projects, people often index their layout by branch:"
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:37(screen) 
#, no-wrap
msgid "\n/trunk/paint\n/trunk/calc\n/branches/paint\n/branches/calc\n/tags/paint\n/tags/calc\n"
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:45(para) 
msgid "...or by project:"
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:48(screen) 
#, no-wrap
msgid "\n/paint/trunk\n/paint/branches\n/paint/tags\n/calc/trunk\n/calc/branches\n/calc/tags\n"
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:56(para) 
msgid "Indexing by project makes sense if the projects are not closely related and each one is checked out individually. For related projects where you may want to check out all projects in one go, or where the projects are all tied together in a single distribution package, it is often better to index by branch. This way you have only one trunk to checkout, and the relationships between the sub-projects is more easily visible."
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:64(para) 
msgid "If you adopt a top level <filename>/trunk /tags /branches</filename> approach, there is nothing to say that you have to copy the entire trunk for every branch and tag, and in some ways this structure offers the most flexibility."
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:70(para) 
msgid "For unrelated projects you may prefer to use separate repositories. When you commit changes, it is the revision number of the whole repository which changes, not the revision number of the project. Having 2 unrelated projects share a repository can mean large gaps in the revision numbers. The Subversion and TortoiseSVN projects appear at the same host address, but are completely separate repositories allowing independent development, and no confusion over build numbers."
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:80(para) 
msgid "Of course, you're free to ignore these common layouts. You can create any sort of variation, whatever works best for you or your team. Remember that whatever you choose, it's not a permanent commitment. You can reorganize your repository at any time. Because branches and tags are ordinary directories, TortoiseSVN can move or rename them however you wish."
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:88(para) 
msgid "Switching from one layout to another is just a matter of issuing a series of server-side moves; If you don't like the way things are organized in the repository, just juggle the directories around."
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:99(para) 
msgid "create a new empty folder on your hard drive"
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:104(para) 
msgid "create your desired top-level folder structure inside that folder - don't put any files in it yet!"
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:110(para) 
msgid "import this structure into the repository via a <action>right click</action> on the folder and selecting <menuchoice><guimenuitem>Import...</guimenuitem></menuchoice> from the context menu. This will import your temp folder into the repository root to create the basic repository layout."
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:94(para) 
msgid "So if you haven't already created a basic folder structure inside your repository you should do that now: <placeholder-1/>"
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:124(para) 
msgid "Note that the name of the folder you are importing does not appear in the repository, only its contents. For example, create the following folder structure: <screen>\nC:\\Temp\\New\\trunk\nC:\\Temp\\New\\branches\nC:\\Temp\\New\\tags\n</screen> Import <filename>C:\\Temp\\New</filename> into the repository root, which will then look like this: <screen>\n/trunk\n/branches\n/tags\n</screen>"
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:141(para) 
msgid "You can also use the repository browser to create new folders directly in the repository."
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:147(title) 
msgid "Import"
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:149(primary) 
msgid "temporary files"
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:155(para) 
msgid "Remove all files which are not needed to build the project (temporary files, files which are generated by a compiler e.g. *.obj, compiled binaries, ...)"
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:163(para) 
msgid "Organize the files in folders and subfolders. Although it is possible to rename/move files later it is highly recommended to get your project's structure straight before importing!"
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:151(para) 
msgid "Before you import your project into a repository you should: <placeholder-1/>"
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:182(title) 
msgid "The Import dialog"
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:172(para) 
msgid "Now select the top-level folder of your project directory structure in the windows explorer and <action>right click</action> to open the context menu. Select the command <menuchoice><guimenuitem>Import...</guimenuitem></menuchoice> which brings up a dialog box: <placeholder-1/>"
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:186(para) 
msgid "In this dialog you have to enter the URL of the repository into which you want to import your project."
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:190(para) 
msgid "The import message is used as a log message. Since you usually just started your project a default <literal>initial import</literal> is filled in by TortoiseSVN."
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:196(primary) 
msgid "exclude pattern"
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:199(para) 
msgid "Files or directories which match the <guilabel>exclude pattern</guilabel> are <emphasis>not</emphasis> imported."
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:205(para) 
msgid "As soon as you press <guibutton>OK</guibutton> TortoiseSVN imports the complete directory tree including all files into the repository. As before, the name of the folder you import does not appear in the repository, only the folder contents. The project is now stored in the repository under version control. Please note that the folder you imported is <emphasis>NOT</emphasis> under version control! To get a version-controlled <firstterm>working copy</firstterm> you need to do a Checkout of the version you just imported."
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:218(title) 
msgid "Special Files"
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:220(primary) 
msgid "special files"
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:222(para) 
msgid "Sometimes you need to have a file under version control which contains user specific data. That means you have a file which every developer/user needs to modify to suit his/her local setup. But versioning such a file is difficult because every user would commit his/her changes every time to the repository."
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:229(para) 
msgid "In such cases we suggest to use <literal>template</literal> files. You create a file which contains all the data your developers will need, add that file to version control and let the developers check this file out. Then, each developer has to <emphasis>make a copy</emphasis> of that file and rename that copy. After that, modifying the copy is not a problem anymore."
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:237(para) 
msgid "As an example, you can have a look at TortoiseSVN's build script. It calls a file named <filename>TortoiseVars.bat</filename> which doesn't exist in the repository. Only the file <filename>TortoiseVars.tmpl</filename>. <filename>TortoiseVars.tmpl</filename> is the template file which every developer has to create a copy from and rename that file to <filename>TortoiseVars.bat</filename>. Inside that file, we added comments so that the users will see which lines they have to edit and change according to their local setup to get it working."
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:248(para) 
msgid "So as not to disturb the users, we also added the file <filename>TortoiseVars.bat</filename> to the ignore list of its parent folder, i.e. we've set the Subversion property <literal>svn:ignored</literal> to include that filename. That way it won't show up as unversioned on every commit."
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:257(title) 
msgid "Referenced Projects"
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:259(primary) 
msgid "external repositories"
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:262(primary) 
msgid "externals"
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:264(para) 
msgid "Sometimes it is useful to construct a working copy that is made out of a number of different checkouts. For example, you may want different subdirectories to come from different locations in a repository, or perhaps from different repositories altogether. If you want every user to have the same layout, you can define the <literal>svn:externals</literal> properties."
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:272(para) 
msgid "Let's say you check out a working copy of <filename>/project1</filename> to <filename>D:\\dev\\project1</filename>. Select the folder <filename>D:\\dev\\project1</filename>, <action>right click</action> and choose <menuchoice><guimenuitem>properties</guimenuitem></menuchoice> from the context menu. The Properties Dialog comes up. Then go to the Subversion tab. There, you can set properties. Select the <literal>svn:externals</literal> property from the combobox and write in the edit box the repository url in the format <literal>name url</literal>. For example <screen>\nsubversion http://svn.collab.net/repos/svn/trunk\n</screen> Now click <guibutton>Set</guibutton> and commit your changes. If a user updates their working copy the external project is checked out, too."
msgstr ""

#: source/en/tsvn_dug/dug_import.xml:294(para) 
msgid "If you need more information how <application>TortoiseSVN</application> handles Properties read <xref linkend=\"tsvn-DUG-propertypage\"/>."
msgstr ""

#: source/en/tsvn_dug/dug_ignore.xml:3(title) 
msgid "Ignoring Files And Directories"
msgstr ""

#: source/en/tsvn_dug/dug_ignore.xml:5(primary) source/en/tsvn_app_automation.xml:274(entry) 
msgid "ignore"
msgstr ""

#: source/en/tsvn_dug/dug_ignore.xml:10(title) source/en/tsvn_dug/dug_add.xml:10(title) 
msgid "Explorer context menu for unversioned files"
msgstr ""

#: source/en/tsvn_dug/dug_ignore.xml:8(para) 
msgid "<placeholder-1/> In most projects you will have files and folders that should not be subject to version control. These might include files created by the compiler, <filename>*.obj, *.lst</filename>, maybe an output folder used to store the executable. Whenever you commit changes, TSVN shows your unversioned files, which fills up the file list in the commit dialog. Of course you can turn off this display, but then you might forget to add a new source file."
msgstr ""

#: source/en/tsvn_dug/dug_ignore.xml:21(para) 
msgid "The best way to avoid these problems is to add the derived files to the project's ignore list. That way they will never show up in the commit dialog, but genuine unversioned source files will still be flagged up."
msgstr ""

#: source/en/tsvn_dug/dug_ignore.xml:27(para) 
msgid "If you right click on a single unversioned file, and select the command <menuchoice><guimenuitem>Ignore</guimenuitem></menuchoice> from the context menu, a submenu appears allowing you to select just that file, or all files with the same extension. If you select multiple files, there is no submenu and you can only add those specific files/folders."
msgstr ""

#: source/en/tsvn_dug/dug_ignore.xml:37(para) 
msgid "If you want to remove a file from the ignore list, you need to edit the properties of the parent folder and remove the file from the <filename>svn:ignore</filename> property. Read <xref linkend=\"tsvn-DUG-propertypage\"/> for more information."
msgstr ""

#: source/en/tsvn_dug/dug_ignore.xml:44(title) 
msgid "The Global Ignore List"
msgstr ""

#: source/en/tsvn_dug/dug_ignore.xml:45(para) 
msgid "Another way to ignore files is to add them to the <firstterm>global ignore list</firstterm>. The big difference here is that the global ignore list is a client property. It applies to <emphasis>all</emphasis> subversion projects, but on the client PC only. In general it is better to use the <filename>svn:ignore</filename> property where possible, because it can be applied to specific project areas, and it works for everyone who checks out the project. Read <xref linkend=\"tsvn-DUG-settings\"/> for more information."
msgstr ""

#: source/en/tsvn_dug/dug_general.xml:3(title) 
msgid "Getting Started"
msgstr ""

#: source/en/tsvn_dug/dug_general.xml:5(title) 
msgid "Context Menus"
msgstr ""

#: source/en/tsvn_dug/dug_general.xml:7(primary) 
msgid "context menu"
msgstr ""

#: source/en/tsvn_dug/dug_general.xml:11(title) 
msgid "Context menu for a directory under version control"
msgstr ""

#: source/en/tsvn_dug/dug_general.xml:9(para) 
msgid "<placeholder-1/> All TortoiseSVN commands are invoked from the context menu of the windows explorer. Most are directly visible, when you <action>right click</action> on a file or folder. The commands that are available depend on whether the file or folder or its parent folder is under version control or not."
msgstr ""

#: source/en/tsvn_dug/dug_general.xml:21(title) 
msgid "Drag and Drop"
msgstr ""

#: source/en/tsvn_dug/dug_general.xml:23(primary) 
msgid "drag handler"
msgstr ""

#: source/en/tsvn_dug/dug_general.xml:26(primary) 
msgid "drag-n-drop"
msgstr ""

#: source/en/tsvn_dug/dug_general.xml:30(title) 
msgid "Right drag menu for a directory under version control"
msgstr ""

#: source/en/tsvn_dug/dug_general.xml:28(para) 
msgid "<placeholder-1/> Other commands are available as drag handlers, when you <action>right drag</action> files or folders to a new location inside working copies or when you <action>right drag</action> a non-versioned file or folder into a directory which is under version control."
msgstr ""

#: source/en/tsvn_dug/dug_general.xml:40(title) 
msgid "Authentication"
msgstr ""

#: source/en/tsvn_dug/dug_general.xml:42(primary) 
msgid "authentication"
msgstr ""

#: source/en/tsvn_dug/dug_general.xml:48(title) 
msgid "Authentication Dialog"
msgstr ""

#: source/en/tsvn_dug/dug_general.xml:44(para) 
msgid "If the repository that you are trying to access is password protected, an authentication Dialog will show up. <placeholder-1/> Enter your username and password. The checkbox will make TortoiseSVN store the credentials in Subversion's default directory: <filename>$APPDATA\\Subversion\\auth</filename>. One file for each server that you access. If you want to make Subversion and TortoiseSVN forget your credentials, you have to delete the corresponding file(s)."
msgstr ""

#: source/en/tsvn_dug/dug_general.xml:58(para) 
msgid "For more information on how to set up your server for authentication and access control, refer to <xref linkend=\"tsvn_serversetup\"/>"
msgstr ""

#: source/en/tsvn_dug/dug_general.xml:64(para) 
msgid "Under Windows 2000 and above the credentials are stored encrypted in the registry. To delete the credentials go to the settings dialog and press <guibutton>Clear Auth Cache</guibutton>."
msgstr ""

#: source/en/tsvn_dug/dug_general.xml:72(para) 
msgid "If you have to authenticate against a Windows NT domain, enter your username including the domain name, like: <filename>MYDOMAIN/johnd</filename>."
msgstr ""

#: source/en/tsvn_dug/dug_diff.xml:3(title) 
msgid "Viewing Differences"
msgstr ""

#: source/en/tsvn_dug/dug_diff.xml:5(primary) source/en/tsvn_app_automation.xml:220(entry) 
msgid "diff"
msgstr ""

#: source/en/tsvn_dug/dug_diff.xml:7(para) 
msgid "One of the commonest requirements in project development is to see what has changed. You might want to look at the differences between two revisions of the same file, or the differences between two separate files. TortoiseSVN provides some builtin tools for this, and also allows you to use your own favourite diff program."
msgstr ""

#: source/en/tsvn_dug/dug_diff.xml:16(title) 
msgid "File Differences"
msgstr ""

#: source/en/tsvn_dug/dug_diff.xml:19(term) 
msgid "Local changes"
msgstr ""

#: source/en/tsvn_dug/dug_diff.xml:21(para) 
msgid "If you want to see what changes <emphasis>you</emphasis> have made in your working copy, just use the explorer context menu and select <menuchoice><guimenu>TortoiseSVN</guimenu><guimenuitem>Diff</guimenuitem></menuchoice>."
msgstr ""

#: source/en/tsvn_dug/dug_diff.xml:33(term) 
msgid "Difference from a previous revision"
msgstr ""

#: source/en/tsvn_dug/dug_diff.xml:35(para) 
msgid "If you want to see the difference between a particular revision and your working copy, use the Revision Log dialog, select the revision of interest, then select <guimenuitem>Compare with working copy</guimenuitem> from the context menu."
msgstr ""

#: source/en/tsvn_dug/dug_diff.xml:45(term) 
msgid "Difference between two previous revisions"
msgstr ""

#: source/en/tsvn_dug/dug_diff.xml:47(para) 
msgid "If you want to see the difference between two revisions which are already committed, use the Revision Log dialog and select the two revisions you want to compare (using the usual <keycap>Ctrl</keycap>-modifier). Then select <guimenuitem>Compare revisions</guimenuitem> from the context menu."
msgstr ""

#: source/en/tsvn_dug/dug_diff.xml:58(term) 
msgid "All changes made in a commit"
msgstr ""

#: source/en/tsvn_dug/dug_diff.xml:60(para) 
msgid "If you want to see the changes made to all files in a particular revision in one view, you can use Unified-Diff output (GNU patch format). This shows only the differences with a few lines of context. It is harder to read than a visual file compare, but will show all the changes together. From the Revision Log dialog select the revision of interest, then select <guimenuitem>Show Differences as Unified-Diff</guimenuitem> from the context menu."
msgstr ""

#: source/en/tsvn_dug/dug_diff.xml:74(term) 
msgid "Difference between files"
msgstr ""

#: source/en/tsvn_dug/dug_diff.xml:76(para) 
msgid "If you want to see the differences between two different files, you can do that directly in explorer by selecting both files (using the usual <keycap>Ctrl</keycap>-modifier). Then from the explorer context menu select <menuchoice><guimenu>TortoiseSVN</guimenu><guimenuitem>Diff</guimenuitem></menuchoice>."
msgstr ""

#: source/en/tsvn_dug/dug_diff.xml:91(title) 
msgid "Folder Differences"
msgstr ""

#: source/en/tsvn_dug/dug_diff.xml:92(para) 
msgid "The builtin tools supplied with TortoiseSVN do not support viewing differences between directory hierarchies. But if you have an external tool which does support that feature, you can use that instead. In the next section we tell you about some tools which we have used."
msgstr ""

#: source/en/tsvn_dug/dug_diff.xml:100(title) 
msgid "External Diff/Merge Tools"
msgstr ""

#: source/en/tsvn_dug/dug_diff.xml:102(primary) 
msgid "diff tools"
msgstr ""

#: source/en/tsvn_dug/dug_diff.xml:105(primary) 
msgid "merge tools"
msgstr ""

#: source/en/tsvn_dug/dug_diff.xml:107(para) 
msgid "If the tools we provide don't do what you need, try one of the many open-source or commercial programs available. Everyone has their own favourites, and this list is by no means complete, but here are a few that you might consider:"
msgstr ""

#: source/en/tsvn_dug/dug_diff.xml:115(term) 
msgid "WinMerge"
msgstr ""

#: source/en/tsvn_dug/dug_diff.xml:117(para) 
msgid "<ulink url=\"http://winmerge.sourceforge.net/\"><citetitle>WinMerge</citetitle></ulink> is a great open-source diff viewer and merge tool."
msgstr ""

#: source/en/tsvn_dug/dug_diff.xml:126(term) 
msgid "Perforce WinDiff"
msgstr ""

#: source/en/tsvn_dug/dug_diff.xml:128(para) 
msgid "Perforce is a commercial RCS, but you can download the diff/merge tool for free. Download the full installer from <ulink url=\"http://www.perforce.com/perforce/loadprog.html\"><citetitle>Perforce</citetitle></ulink>."
msgstr ""

#: source/en/tsvn_dug/dug_diff.xml:138(term) 
msgid "KDiff3"
msgstr ""

#: source/en/tsvn_dug/dug_diff.xml:140(para) 
msgid "KDiff3 is a free diff tool which can also handle directories. You can download it from <ulink url=\"http://kdiff3.sf.net/\"><citetitle>here</citetitle></ulink>."
msgstr ""

#: source/en/tsvn_dug/dug_diff.xml:150(term) 
msgid "ExamDiff"
msgstr ""

#: source/en/tsvn_dug/dug_diff.xml:152(para) 
msgid "ExamDiff Standard is freeware. It can handle files but not directories. ExamDiff Pro is shareware and adds a number of goodies including directory diff and editing capability. In both flavours, version 3.2 and above can handle unicode. You can download them from <ulink url=\"http://www.prestosoft.com/\"><citetitle>PrestoSoft</citetitle></ulink>."
msgstr ""

#: source/en/tsvn_dug/dug_diff.xml:167(term) 
msgid "Beyond Compare"
msgstr ""

#: source/en/tsvn_dug/dug_diff.xml:169(para) 
msgid "Similar to ExamDiff Pro, this is an excellent shareware diff tool which can handle directory diffs and unicode. Download it from <ulink url=\"http://www.scootersoftware.com/\"><citetitle>Scooter Software</citetitle></ulink>."
msgstr ""

#: source/en/tsvn_dug/dug_diff.xml:180(term) 
msgid "SciTE"
msgstr ""

#: source/en/tsvn_dug/dug_diff.xml:182(para) 
msgid "This text editor includes syntax colouring for unified diffs, making them much easier to read. Download it from <ulink url=\"http://www.scintilla.org/SciTEDownload.html\"><citetitle>Scintilla</citetitle></ulink>."
msgstr ""

#: source/en/tsvn_dug/dug_diff.xml:192(term) 
msgid "Notepad2"
msgstr ""

#: source/en/tsvn_dug/dug_diff.xml:194(para) 
msgid "Notepad2 is designed as a replacement for the standard Windows Notepad program, and is based on the Scintilla open-source edit control. As well as being good for viewing unified diffs, it is much better than the Windows notepad for most jobs. Download it for free <ulink url=\"http://www.flos-freeware.ch/notepad2.html\"><citetitle>here</citetitle></ulink>."
msgstr ""

#: source/en/tsvn_dug/dug_diff.xml:207(term) 
msgid "TkDiff"
msgstr ""

#: source/en/tsvn_dug/dug_diff.xml:209(para) 
msgid "A free diff/merge tool which uses TCL/TK. Download it <ulink url=\"http://www.accurev.com/free/tkdiff/\"><citetitle>here</citetitle></ulink>."
msgstr ""

#: source/en/tsvn_dug/dug_diff.xml:219(term) 
msgid "CVSConflictEditor"
msgstr ""

#: source/en/tsvn_dug/dug_diff.xml:221(para) 
msgid "This open source merge tool is buggy, but has potential. Download it <ulink url=\"http://sourceforge.net/projects/conflicteditor/\"><citetitle>here</citetitle></ulink>."
msgstr ""

#: source/en/tsvn_dug/dug_diff.xml:231(para) 
msgid "Read <xref linkend=\"tsvn-DUG-settings-progs\"/> for information on how to set up TortoiseSVN to use these tools."
msgstr ""

#: source/en/tsvn_dug/dug_conflicts.xml:3(title) 
msgid "Resolving Conflicts"
msgstr ""

#: source/en/tsvn_dug/dug_conflicts.xml:5(primary) 
msgid "conflict"
msgstr ""

#: source/en/tsvn_dug/dug_conflicts.xml:28(term) 
msgid "filename.ext.mine"
msgstr ""

#: source/en/tsvn_dug/dug_conflicts.xml:30(para) 
msgid "This is your file as it existed in your working copy before you updated your working copy - that is, without conflict markers. This file has your latest changes in it and nothing else."
msgstr ""

#: source/en/tsvn_dug/dug_conflicts.xml:39(term) 
msgid "filename.ext.rOLDREV"
msgstr ""

#: source/en/tsvn_dug/dug_conflicts.xml:41(para) 
msgid "This is the file that was the BASE revision before you updated your working copy. That is, it the file that you checked out before you made your latest edits."
msgstr ""

#: source/en/tsvn_dug/dug_conflicts.xml:50(term) 
msgid "filename.ext.rNEWREV"
msgstr ""

#: source/en/tsvn_dug/dug_conflicts.xml:52(para) 
msgid "This is the file that your Subversion client just received from the server when you updated your working copy. This file corresponds to the HEAD revision of the repository."
msgstr ""

#: source/en/tsvn_dug/dug_conflicts.xml:7(para) 
msgid "Once in a while, you will get a <emphasis>conflict</emphasis> when you update your files from the repository. A conflict occurs when two or more developers have changed the same few lines of a file. As Subversion knows nothing of your project, it leaves resolving the conflicts to the developers. Whenever a conflict is reported, you should open the file in question, and search for lines starting with the string <literal>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</literal>. The conflicting area is marked like this: <screen>\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; filename\n    your changes\n=======\n    code merged from repository\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; revision\n</screen> Also, for every conflicted file Subversion places three additional files in your directory: <placeholder-1/>"
msgstr ""

#: source/en/tsvn_dug/dug_conflicts.xml:62(para) 
msgid "You can either launch an external merge tool / conflict editor with the <menuchoice><guimenuitem>Edit Conflict</guimenuitem></menuchoice> context menu or you can use any other editor to manually resolve the conflict. You should decide what the code should look like, do the necessary changes and save the file."
msgstr ""

#: source/en/tsvn_dug/dug_conflicts.xml:72(para) 
msgid "Afterwards execute the command <menuchoice><guimenuitem>Resolved</guimenuitem></menuchoice> from the context menu and commit your modifications to the repository. Please note that the Resolve command does not really resolve the conflict. It just removes the <filename>filename.ext.mine</filename> and <filename>filename.ext.r*</filename> files, to allow you to commit your changes."
msgstr ""

#: source/en/tsvn_dug/dug_commit.xml:3(title) 
msgid "Sending Your Changes To The Repository"
msgstr ""

#: source/en/tsvn_dug/dug_commit.xml:5(primary) source/en/tsvn_app_automation.xml:122(entry) 
msgid "commit"
msgstr ""

#: source/en/tsvn_dug/dug_commit.xml:8(para) 
msgid "Sending the changes you made to your working copy is known as <firstterm>committing</firstterm> the changes. But before you commit you have to make sure that your working copy is up to date. You can either make an <menuchoice><guimenuitem>Update</guimenuitem></menuchoice> directly. Or you can <menuchoice><guimenuitem>Check for Modifications</guimenuitem></menuchoice> first, to see which files have changed locally or on the server."
msgstr ""

#: source/en/tsvn_dug/dug_commit.xml:31(title) 
msgid "The Commit dialog"
msgstr ""

#: source/en/tsvn_dug/dug_commit.xml:22(para) 
msgid "If your working copy is up to date and there are no conflicts, you are ready to commit your changes. Select any file and/or folders you want to commit and select <menuchoice><guimenuitem>Commit...</guimenuitem></menuchoice> from the context menu. <placeholder-1/>"
msgstr ""

#: source/en/tsvn_dug/dug_commit.xml:42(title) 
msgid "Commit files or folders?"
msgstr ""

#: source/en/tsvn_dug/dug_commit.xml:43(para) 
msgid "When you commit files, the commit dialog shows only the files you have selected. When you commit a folder the commit dialog will select the changed files automatically. If you forget about a new file you created, committing the folder will find it anyway. Committing a folder does <emphasis>not</emphasis> mean that every file gets marked as changed; It just makes your life easier by doing more work for you."
msgstr ""

#: source/en/tsvn_dug/dug_commit.xml:54(title) 
msgid "Many unversioned files in the commit dialog"
msgstr ""

#: source/en/tsvn_dug/dug_commit.xml:61(para) 
msgid "add the file (or a wildcard extension) to the list of files to exclude on the settings page. This will affect every working copy you have."
msgstr ""

#: source/en/tsvn_dug/dug_commit.xml:68(para) 
msgid "add the file to the <literal>svn:ignore</literal> list using the <menuchoice><guimenuitem>Add to ignore list</guimenuitem></menuchoice> context menu. This will only affect the directory on which you set the <literal>svn:ignore</literal> property. Using the SVN Property Dialog, you can alter the <literal>svn:ignore</literal> property for a directory."
msgstr ""

#: source/en/tsvn_dug/dug_commit.xml:55(para) 
msgid "If you think that the TSVN commit dialog shows you too many unversioned (e.g. compiler generated or editor backup) files, there are several ways to handle this. You can: <placeholder-1/> Read <xref linkend=\"tsvn-DUG-ignore\"/> for more information."
msgstr ""

#: source/en/tsvn_dug/dug_commit.xml:35(para) 
msgid "The commit dialog will show you every changed file, including added, deleted and unversioned files. If you don't want a changed file to be committed, just uncheck that file. If you want to include an unversioned file, just check that file to add it to the commit. <tip><placeholder-1/><placeholder-2/></tip><tip><placeholder-3/><placeholder-4/></tip>"
msgstr ""

#: source/en/tsvn_dug/dug_commit.xml:85(para) 
msgid "<action>Doubleclicking</action> on any modified file in the commit dialog will launch the external diff tool to show your changes."
msgstr ""

#: source/en/tsvn_dug/dug_commit.xml:93(title) 
msgid "The Progress dialog showing a commit in progress"
msgstr ""

#: source/en/tsvn_dug/dug_commit.xml:89(para) 
msgid "After pressing <guibutton>OK</guibutton>, a dialog appears displaying the progress of the commit. <placeholder-1/>"
msgstr ""

#: source/en/tsvn_dug/dug_commit.xml:103(listitem) 
msgid "Committing a modification or a new item."
msgstr ""

#: source/en/tsvn_dug/dug_commit.xml:109(listitem) 
msgid "Committing a deletion or a replacement."
msgstr ""

#: source/en/tsvn_dug/dug_commit.xml:97(para) 
msgid "The progress dialog uses colour coding to highlight different commit actions <placeholder-1/>"
msgstr ""

#: source/en/tsvn_dug/dug_commit.xml:122(title) 
msgid "Special Folder Properties"
msgstr ""

#: source/en/tsvn_dug/dug_commit.xml:123(para) 
msgid "There are several special folder properties which can be used to help give more control over the formatting of commit log messages. Read <xref linkend=\"tsvn-DUG-propertypage\"/> for further information."
msgstr ""

#: source/en/tsvn_dug/dug_commit.xml:130(title) 
msgid "Integration with Bugtracking Tools"
msgstr ""

#: source/en/tsvn_dug/dug_commit.xml:131(para) 
msgid "If you have activated the bugtracking system, you could set one or more Issues in the <guilabel>Bug-ID / Issue-Nr:</guilabel> Textfield. Several Issues should be comma separated. Learn more <xref linkend=\"tsvn-DUG-bugtracker\"/>."
msgstr ""

#: source/en/tsvn_dug/dug_checkout.xml:3(title) 
msgid "Checking Out A Working Copy"
msgstr ""

#: source/en/tsvn_dug/dug_checkout.xml:5(primary) source/en/tsvn_app_automation.xml:98(entry) 
msgid "checkout"
msgstr ""

#: source/en/tsvn_dug/dug_checkout.xml:8(para) 
msgid "To obtain a working copy you need to do a <firstterm>checkout</firstterm> from a repository."
msgstr ""

#: source/en/tsvn_dug/dug_checkout.xml:21(title) 
msgid "The Checkout dialog"
msgstr ""

#: source/en/tsvn_dug/dug_checkout.xml:12(para) 
msgid "Select a directory in windows explorer where you want to place your working copy. <action>Right click</action> to pop up the context menu and select the command <menuchoice><guimenuitem>Checkout...</guimenuitem></menuchoice>, which brings up the following dialog box: <placeholder-1/> If you enter a folder name that does not yet exist, then a directory with that name is created."
msgstr ""

#: source/en/tsvn_dug/dug_checkout.xml:28(para) 
msgid "You can only check out into an empty directory. If you want to check out a previously imported sourcetree, Subversion will throw an error messge. You will have to check out into a different directory or delete the existing sourcetree first."
msgstr ""

#: source/en/tsvn_dug/dug_checkout.xml:35(para) 
msgid "It is recommended that you check out only the <literal>trunk</literal> part of the directory tree. If you specify the parent path of the directory tree in the URL then you might end up with a full harddisk since you will get a copy of the entire repository tree including every branch and tag of your project!"
msgstr ""

#: source/en/tsvn_dug/dug_checkout.xml:43(title) 
msgid "Exporting"
msgstr ""

#: source/en/tsvn_dug/dug_checkout.xml:45(primary) source/en/tsvn_app_automation.xml:176(entry) 
msgid "export"
msgstr ""

#: source/en/tsvn_dug/dug_checkout.xml:47(para) 
msgid "Sometimes you may want a working copy without any of those <filename>.svn</filename> directories, e.g. to create a zipped tarball of your source. Instead of making a copy and then delete all those <filename>.svn</filename> directories manually, TortoiseSVN offers the command <menuchoice><guimenuitem>Export...</guimenuitem></menuchoice>. If you execute this command on your working copy you'll be asked for a place to save the <literal>clean</literal> working copy without the <filename>.svn</filename> folders. Also, you can specify if you want to export <emphasis>all</emphasis> files or just the versioned files."
msgstr ""

#: source/en/tsvn_dug/dug_checkout.xml:63(para) 
msgid "Another way to do an export is by right-dragging a working copy folder to another location and choose <menuchoice><guimenuitem>Subversion export here</guimenuitem></menuchoice> or <menuchoice><guimenuitem>Subversion export all here</guimenuitem></menuchoice>"
msgstr ""

#: source/en/tsvn_dug/dug_bugtracker.xml:3(title) 
msgid "Integration with Bugtracking Systems / Issue trackers"
msgstr ""

#: source/en/tsvn_dug/dug_bugtracker.xml:5(primary) 
msgid "bugtracking"
msgstr ""

#: source/en/tsvn_dug/dug_bugtracker.xml:8(primary) 
msgid "bugtracker"
msgstr ""

#: source/en/tsvn_dug/dug_bugtracker.xml:11(primary) 
msgid "issuetracker"
msgstr ""

#: source/en/tsvn_dug/dug_bugtracker.xml:13(para) 
msgid "It is very common in Software Development for changes to be related to a specific bug or issue ID. Users of bug tracking systems (issue trackers) would like to associate the changes they make in Subversion with a specific ID in their issue tracker. Most issue trackers therefore provide a pre-commit hook script which parses the log message to find the bug ID with which the commit is associated. This is somewhat error prone since it relies on the user to write the log message properly so that the pre-commit hook script can parse it correctly."
msgstr ""

#: source/en/tsvn_dug/dug_bugtracker.xml:26(para) 
msgid "When the user enters a log message, a well defined line including the issue number associated with the commit can be added automatically. This reduces the risk that the user enters the issue number in a way the bug tracking tools can't parse correctly."
msgstr ""

#: source/en/tsvn_dug/dug_bugtracker.xml:32(para) 
msgid "Or <application>TortoiseSVN</application> can highlight the part of the entered log message which is recognized by the issue tracker. That way the user knows that the log message can be parsed correctly."
msgstr ""

#: source/en/tsvn_dug/dug_bugtracker.xml:39(para) 
msgid "When the user browses the log messages, <application>TortoiseSVN</application> creates a link out of each bug ID in the log message which fires up the browser to the issue mentioned."
msgstr ""

#: source/en/tsvn_dug/dug_bugtracker.xml:22(para) 
msgid "TortoiseSVN can help the user in two ways: <placeholder-1/>"
msgstr ""

#: source/en/tsvn_dug/dug_bugtracker.xml:47(para) 
msgid "You can integrate a Bugtracking Tool of your choice in <application>TortoiseSVN</application>. To do this, you have to define some properties, which start with <literal>bugtraq:</literal>. They must be set on Folders: (<xref linkend=\"tsvn-DUG-propertypage\"/>)"
msgstr ""

#: source/en/tsvn_dug/dug_bugtracker.xml:59(term) 
msgid "bugtraq:url"
msgstr ""

#: source/en/tsvn_dug/dug_bugtracker.xml:61(para) 
msgid "Set this property to the url of your bugtracking tool. It must be properly URI encoded and it has to contain <literal>%BUGID%</literal>. <literal>%BUGID%</literal> is replaced with the Issuenumber you entered. This allows <application>TortoiseSVN</application> to display a link in the log dialog, so when you are looking at the revision log you can jump directly to your bugtracking tool. You do not have to provide this property, but then <application>TortoiseSVN</application> shows only the issuenumber and not the link to it. e.g the TortoiseSVN project is using <literal>http://tortoisesvn.tigris.org/issues/show_bug.cgi?id=%BUGID%</literal>"
msgstr ""

#: source/en/tsvn_dug/dug_bugtracker.xml:79(term) 
msgid "bugtraq:warnifnoissue"
msgstr ""

#: source/en/tsvn_dug/dug_bugtracker.xml:81(para) 
msgid "Set this to <literal>true</literal>, if you want <application>TortoiseSVN</application> to warn you because of an empty issuenumber textfield. Valid values are <literal>true/false</literal>. <emphasis> If not defined, <literal>false</literal> is assumed. </emphasis>"
msgstr ""

#: source/en/tsvn_dug/dug_bugtracker.xml:98(term) 
msgid "bugtraq:message"
msgstr ""

#: source/en/tsvn_dug/dug_bugtracker.xml:100(para) 
msgid "<emphasis> This property activates the Bugtracking System. </emphasis> If this property is set, then <application>TortoiseSVN</application> will prompt you to enter an issue number when you commit your changes. It's used to add a line at the end of the logmessage. It must contain <literal>%BUGID%</literal>, which is replaced with the issuenumber on commit. This ensures that your commit log contains a reference to the issuenumber which is always in a consistent format and can be parsed by your Bugtracking tool to associate the issuenumber with a particular commit. e.g the TortoiseSVN project is using <literal>Issue : %BUGID%</literal>, but this depends on your Tool."
msgstr ""

#: source/en/tsvn_dug/dug_bugtracker.xml:120(term) 
msgid "bugtraq:append"
msgstr ""

#: source/en/tsvn_dug/dug_bugtracker.xml:122(para) 
msgid "This property defines if the bug-ID is appended (true) to the end of the log message or inserted (false) at the start of the log message. Valid values are <literal>true/false</literal>. <emphasis> If not defined, <literal>true</literal> is assumed, so that existing projects don't break. </emphasis>"
msgstr ""

#: source/en/tsvn_dug/dug_bugtracker.xml:135(term) 
msgid "bugtraq:label"
msgstr ""

#: source/en/tsvn_dug/dug_bugtracker.xml:137(para) 
msgid "This text is shown by <application>TortoiseSVN</application> on the commit dialog to label the edit box where you enter the issuenumber. If it's not set, <literal>Bug-ID / Issue-Nr:</literal> will be displayed. Keep in mind though that the window will not be resized to fit this label, so keep the size of the label below 20-25 characters."
msgstr ""

#: source/en/tsvn_dug/dug_bugtracker.xml:149(term) 
msgid "bugtraq:number"
msgstr ""

#: source/en/tsvn_dug/dug_bugtracker.xml:151(para) 
msgid "If set to <literal>true</literal> only numbers are allowed in the issuenumber textfield. An exception is the comma, so you can comma separate several numbers. Valid values are <literal>true/false</literal>. <emphasis> If not defined, <literal>true</literal> is assumed. </emphasis>"
msgstr ""

#: source/en/tsvn_dug/dug_bugtracker.xml:169(para) 
msgid "Even if you don't have an issue tracker with a pre-commit hook parsing your log messages, you still can use this to turn the issues mentioned in your log messages into links!"
msgstr ""

#: source/en/tsvn_dug/dug_bugtracker.xml:177(term) 
msgid "bugtraq:logregex"
msgstr ""

#: source/en/tsvn_dug/dug_bugtracker.xml:179(para) 
msgid "This property contains one or two regular expressions, separated by a newline."
msgstr ""

#: source/en/tsvn_dug/dug_bugtracker.xml:183(para) 
msgid "If only one expression is set, then the bare bug ID's must be matched in the groups of the regex string. Example: <literal>[Ii]ssue(?:s)? #?(\\d+)</literal>"
msgstr ""

#: source/en/tsvn_dug/dug_bugtracker.xml:188(para) 
msgid "If two expressions are set, then the first expression is used to find a string which relates to the bug ID but may contain more than just the bug ID (e.g. \"Issue #123\" or \"resolves issue 123\"). The second expression is then used to extract the bare bug ID from the string extracted with the first expression. An example:"
msgstr ""

#: source/en/tsvn_dug/dug_bugtracker.xml:196(para) 
msgid "If you want to catch every pattern \"issue #XXX\" and \"issue #890, #789\" inside a log message you could use the following regex strings: <literal>[Ii]ssue #?(\\d+)(,? ?#'(\\d+))+</literal> and the second expression as <literal>(\\d+)</literal>"
msgstr ""

#: source/en/tsvn_dug/dug_bugtracker.xml:202(para) 
msgid "If you are unfamiliar with regular expressions, take a look at the online documentation and tutorial at <ulink url=\"http://www.regular-expressions.info/\"><citetitle>http://www.regular-expressions.info/</citetitle></ulink>."
msgstr ""

#: source/en/tsvn_dug/dug_bugtracker.xml:219(title) 
msgid "Set the Properties on Folders"
msgstr ""

#: source/en/tsvn_dug/dug_bugtracker.xml:220(para) 
msgid "These properties must be set on folders for the system to work. When you commit a file or folder the properties are read from that folder. If the properties are not found there, TortoiseSVN will search upwards through the folder tree to find them until it comes to an unversioned folder, or the tree root (eg. <literal>C:\\</literal>) is found. If you can be sure that each user checks out only from e.g <filename>trunk/</filename> and not some subfolder, then it's enough if you set the properties on <filename>trunk/</filename>. If you can't be sure, you should set the properties recursively on each subfolder. A property setting deeper in the project hierarchy overrides settings on higher levels (closer to <filename>trunk/</filename>)."
msgstr ""

#: source/en/tsvn_dug/dug_bugtracker.xml:53(para) 
msgid "There are two ways to integrate TortoiseSVN with issue trackers. One is based on simple strings, the other is based on <literal>regular expressions</literal>. The properties used by both approaches are: <placeholder-1/> In the simple approach, <application>TortoiseSVN</application> shows the user a separate input field where a bug ID can be entered. Then a separate line is appended/prepended to the log message the user entered. <placeholder-2/> In the approach with <literal>regular expressions</literal>, <application>TortoiseSVN</application> doesn't show a separate input field but marks the part of the log message the user enters which is recognized by the issue tracker. This is done while the user writes the log message. This also means that the bug ID can be anywhere inside a log message! <tip><placeholder-3/></tip><placeholder-4/><placeholder-5/><important><placeholder-6/><placeholder-7/><placeholder-8/></important>"
msgstr ""

#: source/en/tsvn_dug/dug_branchtag.xml:3(title) 
msgid "Branching / Tagging"
msgstr ""

#: source/en/tsvn_dug/dug_branchtag.xml:5(primary) 
msgid "branch"
msgstr ""

#: source/en/tsvn_dug/dug_branchtag.xml:8(primary) 
msgid "tag"
msgstr ""

#: source/en/tsvn_dug/dug_branchtag.xml:11(primary) source/en/tsvn_app_automation.xml:192(entry) 
msgid "copy"
msgstr ""

#: source/en/tsvn_dug/dug_branchtag.xml:14(para) 
msgid "One of the features of version control systems is the ability to isolate changes onto a separate line of development. This line is known as a <firstterm>branch</firstterm>. Branches are often used to try out new features without disturbing the main line of development with compiler errors and bugs. As soon as the new feature is stable enough then the development branch is <firstterm>merged</firstterm> back into the main branch (trunk)."
msgstr ""

#: source/en/tsvn_dug/dug_branchtag.xml:24(para) 
msgid "Another feature of version control systems is the ability to mark particular revisions (e.g. a release version), so you can at any time recreate a certain build or environment. This process is known as <firstterm>tagging</firstterm>."
msgstr ""

#: source/en/tsvn_dug/dug_branchtag.xml:30(para) 
msgid "Subversion does not have special commands for branching or tagging, but uses so-called <literal>cheap copies</literal> instead. Cheap copies are similar to hard links in Unix, which means that instead of making a complete copy in the repository, an internal link is created, pointing to a specific tree/revision. As a result branches and tags are very quick to create, and take up almost no extra space in the repository."
msgstr ""

#: source/en/tsvn_dug/dug_branchtag.xml:40(title) 
msgid "Creating a Branch or Tag"
msgstr ""

#: source/en/tsvn_dug/dug_branchtag.xml:45(title) 
msgid "The Branch/Tag Dialog"
msgstr ""

#: source/en/tsvn_dug/dug_branchtag.xml:41(para) 
msgid "If you have imported your project with the recommended directory structure, creating a branch or tag version is very simple: <placeholder-1/> Select the folder in your working copy which you want to copy to a branch or tag, then select the command <menuchoice><guimenuitem>Branch/Tag...</guimenuitem></menuchoice> from the context menu."
msgstr ""

#: source/en/tsvn_dug/dug_branchtag.xml:55(para) 
msgid "The default destination URL for the new branch will be the source URL on which your working copy is based. You will need to edit that URL to the new path for your branch/tag. So instead of <screen>\n    C:/SVNRepository/ProjectName/trunk\n</screen> you might now use something like <screen>\n    C:/SVNRepository/ProjectName/tags/Release_1.10\n</screen> If you can't remember the naming convention you used last time, click the button on the right to open the repository browser so you can view the existing repository structure."
msgstr ""

#: source/en/tsvn_dug/dug_branchtag.xml:76(term) 
msgid "HEAD revision in the repository"
msgstr ""

#: source/en/tsvn_dug/dug_branchtag.xml:77(listitem) 
msgid "The new branch is copied directly in the repository from the HEAD revision. No data needs to be transferred from your working copy, and the branch is created very quickly."
msgstr ""

#: source/en/tsvn_dug/dug_branchtag.xml:85(term) 
msgid "Specific revision in the repository"
msgstr ""

#: source/en/tsvn_dug/dug_branchtag.xml:86(listitem) 
msgid "The new branch is copied directly in the repository but you can choose an older revision. This is useful if you forgot to make a tag when you released your project last week. If you can't remember the revision number, click the button on the right to show the revision log, and select the revision number from there. Again no data is transferred from your working copy, and the branch is created very quickly."
msgstr ""

#: source/en/tsvn_dug/dug_branchtag.xml:98(term) 
msgid "Working copy"
msgstr ""

#: source/en/tsvn_dug/dug_branchtag.xml:99(listitem) 
msgid "The new branch is an identical copy of your local working copy. If you have updated some files to an older revision in your WC, or if you have made local changes, that is exactly what goes into the copy. Naturally this sort of complex tag may involve transferring data from your WC back to the repository if it does not exist there already."
msgstr ""

#: source/en/tsvn_dug/dug_branchtag.xml:71(para) 
msgid "Now you have to select the source of the copy. Here you have three options: <placeholder-1/>"
msgstr ""

#: source/en/tsvn_dug/dug_branchtag.xml:111(para) 
msgid "Press <guibutton>OK</guibutton> to commit the new copy to the repository. Don't forget to supply a log message. Note that the copy is created <emphasis>inside the repository</emphasis>."
msgstr ""

#: source/en/tsvn_dug/dug_branchtag.xml:116(para) 
msgid "Note that creating a Branch or Tag does <emphasis>not</emphasis> affect your working copy. Even if you copy your WC, those changes are committed to the new branch, not to the trunk, so your WC may still be marked as modified."
msgstr ""

#: source/en/tsvn_dug/dug_branchtag.xml:125(title) 
msgid "To Checkout or to Switch..."
msgstr ""

#: source/en/tsvn_dug/dug_branchtag.xml:128(primary) source/en/tsvn_app_automation.xml:169(entry) 
msgid "switch"
msgstr ""

#: source/en/tsvn_dug/dug_branchtag.xml:130(para) 
msgid "...that is (not really) the question. While a checkout checks out everything from the desired branch into your working directory, a <menuchoice><guimenuitem>Switch...</guimenuitem></menuchoice> only transfers the changed data to your working copy. Good for the network load, good for your patience. :-)"
msgstr ""

#: source/en/tsvn_dug/dug_branchtag.xml:145(para) 
msgid "do a <menuchoice><guimenuitem>Checkout</guimenuitem></menuchoice> of it again. You can check it out to any location on your local disk and you can create as many working copies from your repository as you like."
msgstr ""

#: source/en/tsvn_dug/dug_branchtag.xml:156(para) 
msgid "Switch your current working copy to the newly created copy in the repository. Again select the parent folder of your project and select the command <menuchoice><guimenuitem>Switch...</guimenuitem></menuchoice> from the context menu."
msgstr ""

#: source/en/tsvn_dug/dug_branchtag.xml:165(para) 
msgid "In the next dialog yout enter the URL of the branch you just created. Leave the Checkbox <guilabel>latest revision</guilabel> active and click on <guibutton>OK</guibutton>. Your working copy is switched to the new branch / tag."
msgstr ""

#: source/en/tsvn_dug/dug_branchtag.xml:173(para) 
msgid "Switch works just like Update in that it never discards your local changes. Any changes you have made to your working copy which have not yet been committed will be merged when you do the Switch. If you do not want this to happen then you must either commit the changes before switching, or revert your working copy to an already-committed revision (typically HEAD)."
msgstr ""

#: source/en/tsvn_dug/dug_branchtag.xml:184(title) 
msgid "The Switch Dialog"
msgstr ""

#: source/en/tsvn_dug/dug_branchtag.xml:140(para) 
msgid "To be able to work with your freshly generated copy you have several ways to handle it. You can: <placeholder-1/><placeholder-2/>"
msgstr ""

#: source/en/tsvn_dug/dug_branchtag.xml:193(para) 
msgid "Tags are typically used to create a static snapshot of the project at a particular stage. As such they not normally used for development - that's what branches are for, which is the reason we recommended the <filename>/trunk /branches /tags</filename> repository structure in the first place. Working on a tag revision is <emphasis>not a good idea</emphasis>, but because your local files are not write protected there is nothing to stop you doing this by mistake. However, if you try to commit to a path in the repository which contains <filename>/tags/</filename>, TortoiseSVN will warn you."
msgstr ""

#: source/en/tsvn_dug/dug_branchtag.xml:209(para) 
msgid "It may be that you need to make further changes to a release which you have already tagged. The correct way to handle this is to create a new branch from the tag first and commit the branch. Do your Changes on this branch and then create a new tag from this new branch, e.g. <filename>Version_1.0.1</filename>."
msgstr ""

#: source/en/tsvn_dug/dug_branchtag.xml:219(para) 
msgid "If you modify a working copy created from a branch and commit, then all changes go to the new branch and <emphasis>not</emphasis> the trunk. Only the modifications are stored. The rest remains a cheap copy."
msgstr ""

#: source/en/tsvn_dug/dug_branchtag.xml:188(para) 
msgid "Although Subversion itself makes no distinction between tags and branches, the way they are typically used differs a bit. <placeholder-1/>"
msgstr ""

#: source/en/tsvn_dug/dug_blame.xml:3(title) 
msgid "Who Changed Which Line?"
msgstr ""

#: source/en/tsvn_dug/dug_blame.xml:5(primary) source/en/tsvn_app_automation.xml:282(entry) 
msgid "blame"
msgstr ""

#: source/en/tsvn_dug/dug_blame.xml:8(primary) 
msgid "annotate"
msgstr ""

#: source/en/tsvn_dug/dug_blame.xml:11(primary) 
msgid "praise"
msgstr ""

#: source/en/tsvn_dug/dug_blame.xml:16(title) 
msgid "The Annotate / Blame Dialog"
msgstr ""

#: source/en/tsvn_dug/dug_blame.xml:14(para) 
msgid "<placeholder-1/> Sometimes you need to know not only what lines have changed, but also who exactly changed specific lines in a file. That's when the <menuchoice><guimenuitem>Blame...</guimenuitem></menuchoice> command, sometimes also referred to as <firstterm>annotate</firstterm> command comes in handy."
msgstr ""

#: source/en/tsvn_dug/dug_blame.xml:27(para) 
msgid "This command lists, for every line in a file, the author and the revision the line was changed."
msgstr ""

#: source/en/tsvn_dug/dug_blame.xml:31(para) 
msgid "If you're not interested in changes from earlier revisions you can set the revision from which the blame should start. Set this to <literal>1</literal>, if you want the blame for <emphasis>every</emphasis> revision."
msgstr ""

#: source/en/tsvn_dug/dug_blame.xml:36(para) 
msgid "By default the blame file is viewed using <firstterm>TortoiseBlame</firstterm>, which highlights the different revisions to make it easier to read. If you wish to print or edit the blame file, select <guilabel>Use Text viewer to view blames</guilabel>"
msgstr ""

#: source/en/tsvn_dug/dug_blame.xml:42(para) 
msgid "Once you press <guibutton>OK</guibutton> TortoiseSVN starts retrieving the data to create the blame file. Please note: This can take several minutes to finish, depending on how much the file has changed and of course your network connection to the repository. Once the blame process has finished the result is written into a temporary file and you can view the results."
msgstr ""

#: source/en/tsvn_dug/dug_blame.xml:52(title) 
msgid "TortoiseBlame"
msgstr ""

#: source/en/tsvn_dug/dug_blame.xml:50(para) 
msgid "<placeholder-1/> TortoiseBlame, which is included with TortoiseSVN, makes the blame file easier to read. When you hover the mouse over a line in the blame info column, all lines with the same revision are shown with a darker background. Lines from other revisions which were changed by the same author are shown with a light background. The colouring may not work as clearly if you have your display set to 256 colour mode."
msgstr ""

#: source/en/tsvn_dug/dug_blame.xml:63(para) 
msgid "If you <action>left click</action> on a line, all lines with the same revision are highlighted, and lines from other revisions by the same author are highlighted in a lighter colour. This highlighting is sticky, allowing you to move the mouse without losing the highlights. Click on that revision again to turn off highlighting."
msgstr ""

#: source/en/tsvn_dug/dug_blame.xml:70(para) 
msgid "The revision comments are shown in a hint box whenever the mouse hovers over the blame info column."
msgstr ""

#: source/en/tsvn_dug/dug_add.xml:3(title) 
msgid "Adding New Files And Directories"
msgstr ""

#: source/en/tsvn_dug/dug_add.xml:5(primary) source/en/tsvn_app_automation.xml:131(entry) 
msgid "add"
msgstr ""

#: source/en/tsvn_dug/dug_add.xml:8(para) 
msgid "<placeholder-1/> If you created new files and/or directories during your development process the you need to add them to source control too. Select the file(s) and/or directory and select the command <menuchoice><guimenuitem>Add</guimenuitem></menuchoice> from the context menu."
msgstr ""

#: source/en/tsvn_dug/dug_add.xml:22(para) 
msgid "After you added the files/directories to source control the file appears with a <literal>added</literal> icon overlay which means you first have to commit your working copy to make those files/directories available to other developers. Adding a file/directory does <emphasis>not</emphasis> affect the repository!"
msgstr ""

#: source/en/tsvn_dug/dug_add.xml:31(title) 
msgid "Many Adds"
msgstr ""

#: source/en/tsvn_dug/dug_add.xml:32(para) 
msgid "You can also use the Add command on already versioned folders. In that case, the add dialog will show you all unversioned files inside that versioned folder. This helps if you have many new files and need them to add at once."
msgstr ""

#: source/en/tsvn_dug/dug_add.xml:45(para) 
msgid "select the files you want to add"
msgstr ""

#: source/en/tsvn_dug/dug_add.xml:61(para) 
msgid "in the popup menu select <menuchoice><guimenuitem>add files to Subversion here</guimenuitem></menuchoice>. The files will then be copied to the working copy and added to version control."
msgstr ""

#: source/en/tsvn_dug/dug_add.xml:40(para) 
msgid "To add files from outside your working copy you can use the drag-and-drop handler: <placeholder-1/>"
msgstr ""

#: source/en/tsvn_dug/dug.xml:3(title) 
msgid "Daily Use Guide"
msgstr ""

#: source/en/tsvn_dug/dug.xml:7(para) 
msgid "This document describes day to day usage of the TortoiseSVN client. It is <emphasis>not</emphasis> an introduction to version control systems, and <emphasis>not</emphasis> an introduction to Subversion (SVN). It is more like a place you may turn to when you know approximately what you want to do, but don't quite remember how to do it."
msgstr ""

#: source/en/tsvn_dug/dug.xml:15(para) 
msgid "If you need an introduction to version control with Subversion, then we recommend you read the fantastic book: <ulink url=\"http://svnbook.red-bean.com/\"><citetitle>Subversion: The Definitive Guide</citetitle></ulink>."
msgstr ""

#: source/en/tsvn_dug/dug.xml:22(para) 
msgid "This document is also a work in progress, just as TortoiseSVN and Subversion are. If you find any mistakes, please report them to the mailing list so we can update the documentation. Some of the screenshots in the Daily Use Guide (DUG) might not reflect the current state of the software. Please forgive us. We're working on TortoiseSVN in our free time."
msgstr ""

#: source/en/tsvn_dug/dug.xml:33(para) 
msgid "You should have installed TortoiseSVN already."
msgstr ""

#: source/en/tsvn_dug/dug.xml:38(para) 
msgid "You should be familiar with version control systems."
msgstr ""

#: source/en/tsvn_dug/dug.xml:43(para) 
msgid "You should know the basics of Subversion."
msgstr ""

#: source/en/tsvn_dug/dug.xml:48(para) 
msgid "You should have set up a server and/or have access to a Subversion repository."
msgstr ""

#: source/en/tsvn_dug/dug.xml:83(title) 
msgid "Final Step"
msgstr ""

#: source/en/wishlist.xml:8(title) 
msgid "Wishlist"
msgstr ""

#: source/en/wishlist.xml:9(para) 
msgid "Even though TortoiseSVN and TortoiseMerge are free, you can support the developers by sending in patches and play an active role in the development. You can also help to cheer us up during the endless hours we spend in front of our computers."
msgstr ""

#: source/en/wishlist.xml:15(para) 
msgid "While working on TortoiseSVN we love to listen to music. And since we spend many hours on the project we need a <emphasis>lot</emphasis> of music. Therefore we have set up some wish-lists with our favourite music CD's and DVD's: <ulink url=\"http://tortoisesvn.tigris.org/donate.html\"><citetitle>http://tortoisesvn.tigris.org/donate.html</citetitle></ulink> Please also have a look at the list of people who contributed to the project by sending in patches or translations."
msgstr ""

#: source/en/tsvn_preface.xml:3(title) source/en/tme_ch00.xml:3(title) 
msgid "Preface"
msgstr ""

#: source/en/tsvn_preface.xml:11(para) 
msgid "Do you work in a team?"
msgstr ""

#: source/en/tsvn_preface.xml:14(para) 
msgid "Has it ever happened to you that you were working on a file, and someone else was working on the same file? Did you lose your changes to that file 'cause of that?"
msgstr ""

#: source/en/tsvn_preface.xml:22(para) 
msgid "Have you ever saved a file, and then wanted to revert the changes you made? Have you ever wished you could see what a file looked like some time ago?"
msgstr ""

#: source/en/tsvn_preface.xml:29(para) 
msgid "Have you ever found a bug in your project and wanted to know when that bug got into your files?"
msgstr ""

#: source/en/tsvn_preface.xml:36(para) 
msgid "If you answered one of the above questions with yes, then TortoiseSVN is for you! Just read on to find out how TortoiseSVN can help you in your work. It's not that difficult."
msgstr ""

#: source/en/tsvn_preface.xml:46(title) 
msgid "Audience"
msgstr ""

#: source/en/tsvn_preface.xml:47(para) 
msgid "This book is written for computer literate folk who want to use Subversion to manage their data, but are uncomfortable using the command line client to do so. Since TortoiseSVN is a windows shell extension it's assumed that the user is familiar with the windows explorer and knows how to use it."
msgstr ""

#: source/en/tsvn_preface.xml:54(para) 
msgid "Even most Subversion users will never have to set up a server themselves. A whole chapter deals with how to set up such a server."
msgstr ""

#: source/en/tsvn_preface.xml:58(para) 
msgid "If you run into problems installing or working with TortoiseSVN, check <xref linkend=\"tsvn-faq\"/> at the end of this manual. If your question is not answered there, search our online FAQ at <ulink url=\"http://tortoisesvn.berlios.de/faq/\"><citetitle>Berlios.de</citetitle></ulink>, nachschlagen which contains more information and is - due to its nature - more up to date."
msgstr ""

#: source/en/tsvn_preface.xml:72(title) 
msgid "TortoiseSVN is free!"
msgstr ""

#: source/en/tsvn_preface.xml:73(para) 
msgid "TortoiseSVN is free. You don't have to pay for it, you can use it any way you want. It is developed under the GP license (GPL)."
msgstr ""

#: source/en/tsvn_preface.xml:77(para) 
msgid "TortoiseSVN is an Open Source project. That means you have full access to the source code of this program. You can browse it on this link <ulink url=\"http://svn.collab.net/repos/tortoisesvn/\"><citetitle>http://svn.collab.net/repos/tortoisesvn/</citetitle></ulink>. The most recent version (where we're working on) is located under <emphasis><filename>/trunk/</filename></emphasis>, the released versions are located under <emphasis><filename>/tags/</filename></emphasis>."
msgstr ""

#: source/en/tsvn_preface.xml:98(title) 
msgid "Community"
msgstr ""

#: source/en/tsvn_preface.xml:99(para) 
msgid "Both TortoiseSVN and Subversion are developed by a community of people who are working on those projects. They come from different countries all over the world and joined together to create wonderful programs."
msgstr ""

#: source/en/tsvn_preface.xml:110(title) source/en/tme_ch00.xml:64(title) 
msgid "Acknowledgments"
msgstr ""

#: source/en/tsvn_preface.xml:113(term) 
msgid "Tim Kemp"
msgstr ""

#: source/en/tsvn_preface.xml:115(para) 
msgid "for founding the TortoiseSVN project"
msgstr ""

#: source/en/tsvn_preface.xml:121(term) source/en/tme_ch00.xml:68(term) 
msgid "Stefan KÃ¼ng"
msgstr ""

#: source/en/tsvn_preface.xml:123(para) 
msgid "for the hard work to get TortoiseSVN to what it is now"
msgstr ""

#: source/en/tsvn_preface.xml:129(term) source/en/tme_ch00.xml:78(term) 
msgid "LÃ¼bbe Onken"
msgstr ""

#: source/en/tsvn_preface.xml:131(para) source/en/tme_ch00.xml:82(para) 
msgid "for the beautiful icons, logo, bughunting and taking care of the documentation"
msgstr ""

#: source/en/tsvn_preface.xml:138(term) 
msgid "The Subversion Book"
msgstr ""

#: source/en/tsvn_preface.xml:140(para) 
msgid "for the great introduction to Subversion and its chapter 2 which we copied here"
msgstr ""

#: source/en/tsvn_preface.xml:147(term) source/en/tme_ch00.xml:89(term) 
msgid "The Tigris Style project"
msgstr ""

#: source/en/tsvn_preface.xml:149(para) source/en/tme_ch00.xml:93(para) 
msgid "for some of the styles which are reused in this documentation"
msgstr ""

#: source/en/tsvn_preface.xml:155(term) source/en/tme_ch00.xml:100(term) 
msgid "Our Contributors"
msgstr ""

#: source/en/tsvn_preface.xml:157(para) source/en/tme_ch00.xml:104(para) 
msgid "for many hours of joy with the music they sent us"
msgstr ""

#: source/en/tsvn_preface.xml:168(title) 
msgid "Terminology used in this document"
msgstr ""

#: source/en/tsvn_preface.xml:169(para) 
msgid "To make reading the docs easier, the names of all the screens and Menus from TortoiseSVN are marked up in a different font. The <guilabel>Log Dialog</guilabel> for instance."
msgstr ""

#: source/en/tsvn_preface.xml:174(para) 
msgid "A menu choice is indicated with an arrow. <menuchoice><guimenu>TortoiseSVN</guimenu><guimenuitem>Show Log</guimenuitem></menuchoice> means: select <emphasis>Show Log</emphasis> from the <emphasis>TortoiseSVN</emphasis> context menu."
msgstr ""

#: source/en/tsvn_preface.xml:183(para) 
msgid "User Interface Buttons are indicated like this: Press <guibutton>OK</guibutton> to continue."
msgstr ""

#: source/en/tsvn_preface.xml:187(para) 
msgid "User Actions are indicated using a bold font. <action>ALT+A</action>: press the <keycap>ALT</keycap>-Key on your keyboard and while holding it down press the <keycap>A</keycap>-Key as well. <action>Right-drag</action>: press the right mouse button and while holding it down <emphasis>drag</emphasis> the items to the new location."
msgstr ""

#: source/en/tsvn_preface.xml:195(para) 
msgid "System output and keyboard input is indicated with a <literal>different</literal> font as well."
msgstr ""

#: source/en/tsvn_preface.xml:200(para) 
msgid "Important notes are marked with an icon."
msgstr ""

#: source/en/tsvn_preface.xml:205(para) 
msgid "Tips that make your life easier."
msgstr ""

#: source/en/tsvn_preface.xml:210(para) 
msgid "Places where you have to be careful what you are doing."
msgstr ""

#: source/en/tsvn_preface.xml:215(para) 
msgid "Where extreme care has to be taken, data corruption or other nasty things may occur if these warnings are ignored."
msgstr ""

#: source/en/tsvn_introduction.xml:3(title) source/en/tme_ch01.xml:3(title) 
msgid "Introduction"
msgstr ""

#: source/en/tsvn_introduction.xml:5(para) 
msgid "<indexterm><primary>version control</primary></indexterm> Version control is the art of managing changes to information. It has long been a critical tool for programmers, who typically spend their time making small changes to software and then undoing those changes the next day. Imagine a team of these programmers working concurrently - and perhaps even simultaneously at the very same files! - and you can see why a good system is needed to manage the potential chaos."
msgstr ""

#: source/en/tsvn_introduction.xml:22(title) 
msgid "What is TortoiseSVN?"
msgstr ""

#: source/en/tsvn_introduction.xml:23(para) 
msgid "TortoiseSVN is a free/open-source client for the Subversion version control system. That is, TortoiseSVN manages files and directories over time. Files are stored into a central <firstterm>repository</firstterm>. The repository is much like an ordinary file server, except that it remembers every change ever made to your files and directories. This allows you to recover older versions of your files and examine the history of how and when your data changed. This is why many people think of Subversion and version control systems in general as a sort of <quote>time machine</quote>."
msgstr ""

#: source/en/tsvn_introduction.xml:35(para) 
msgid "Some version control systems are also software configuration management (SCM) systems. These systems are specifically tailored to manage trees of source code, and have many features that are specific to software development - such as natively understanding programming languages, or supplying tools for building software. Subversion, however, is not one of these systems; it is a general system that can be used to manage <emphasis>any</emphasis> collection of files, including source code."
msgstr ""

#: source/en/tsvn_introduction.xml:51(title) 
msgid "TortoiseSVN's History"
msgstr ""

#: source/en/tsvn_introduction.xml:52(para) 
msgid "In 2002, Tim Kemp found that Subversion was a very good version control system, but it lacked a good GUI client. The idea for a subversion client as a Windows shell integration was inspired by the similar client for CVS named TortoiseCVS."
msgstr ""

#: source/en/tsvn_introduction.xml:58(para) 
msgid "Tim studied the sourcecode of TortoiseCVS and used it as a base for TortoiseSVN. He then started the project, registered the domain tortoisesvn.org and put the sourcecode online. During that time, Stefan KÃ¼ng was looking for a good and free version control system and found Subversion and the source for TortoiseSVN. Since TortoiseSVN was still not ready for use then he joined the project and started programming. Soon he rewrote most of the existing code and started adding commands and features, up to a point where nothing of the original code remained."
msgstr ""

#: source/en/tsvn_introduction.xml:69(para) 
msgid "As Subversion became more stable it attracted more and more users who also started using TortoiseSVN as their Subversion client. The userbase grew quickly (and is still growing every day). That's when LÃ¼bbe Onken offered to help out with some nice icons and a logo for TortoiseSVN. And he takes care of the website."
msgstr ""

#: source/en/tsvn_introduction.xml:81(title) 
msgid "TortoiseSVN's Features"
msgstr ""

#: source/en/tsvn_introduction.xml:82(para) 
msgid "What makes TortoiseSVN such a good Subversion client? Here's a short list of features."
msgstr ""

#: source/en/tsvn_introduction.xml:88(term) 
msgid "Shell integration"
msgstr ""

#: source/en/tsvn_introduction.xml:90(para) 
msgid "<indexterm><primary>Windows shell</primary></indexterm><indexterm><primary>explorer</primary></indexterm> TortoiseSVN integrates seamless into the Windows shell (i.e. the explorer). This means you can keep working with the tools you're already familiar with. And you do not have to change into a different application each time you need functions of the version control!"
msgstr ""

#: source/en/tsvn_introduction.xml:103(para) 
msgid "And you are not even forced to use the Windows Explorer. Also in other filemanagers principally the context menu as well as the other functions of TortoiseSVN are readily available for you. Any time you want or need them. One should, however, bear in mind that TortoiseSVN is intentionally developed as extension for the Windows Explorer. Thus it is possible that in other applications the integration is not as complete and e.g. the icon overlays are not shown."
msgstr ""

#: source/en/tsvn_introduction.xml:117(term) 
msgid "Icon overlays"
msgstr ""

#: source/en/tsvn_introduction.xml:119(para) 
msgid "The status of every versioned file and folder is indicated by small overlay icons. That way you can see right away what the status of your working copy is."
msgstr ""

#: source/en/tsvn_introduction.xml:127(term) 
msgid "Easy access to Subversion commands"
msgstr ""

#: source/en/tsvn_introduction.xml:129(para) 
msgid "All Subversion commands are available from the explorer context menu. TortoiseSVN adds its own submenu there."
msgstr ""

#: source/en/tsvn_introduction.xml:136(para) 
msgid "Since TortoiseSVN is a Subversion client, we also like to show you some of the features of Subversion itself:"
msgstr ""

#: source/en/tsvn_introduction.xml:142(term) 
msgid "Directory versioning"
msgstr ""

#: source/en/tsvn_introduction.xml:144(para) 
msgid "CVS only tracks the history of individual files, but Subversion implements a <quote>virtual</quote> versioned filesystem that tracks changes to whole directory trees over time. Files <emphasis>and</emphasis> directories are versioned. As a result, there are real client-side <command>move</command> and <command>copy</command> commands that operate on files and directories."
msgstr ""

#: source/en/tsvn_introduction.xml:157(term) 
msgid "Atomic commits"
msgstr ""

#: source/en/tsvn_introduction.xml:159(para) 
msgid "A commit either goes into the repository completely, or not at all. This allows developers to construct and commit changes as logical chunks."
msgstr ""

#: source/en/tsvn_introduction.xml:167(term) 
msgid "Versioned metadata"
msgstr ""

#: source/en/tsvn_introduction.xml:169(para) 
msgid "Each file and directory has an invisible set of <quote>properties</quote> attached. You can invent and store any arbitrary key/value pairs you wish. Properties are versioned over time, just like file contents."
msgstr ""

#: source/en/tsvn_introduction.xml:179(term) 
msgid "Choice of network layers"
msgstr ""

#: source/en/tsvn_introduction.xml:181(para) 
msgid "Subversion has an abstracted notion of repository access, making it easy for people to implement new network mechanisms. Subversion's <quote>advanced</quote> network server is a module for the Apache web server, which speaks a variant of HTTP called WebDAV/DeltaV. This gives Subversion a big advantage in stability and interoperability, and provides various key features for free: authentication, authorization, wire compression, and repository browsing, for example. A smaller, standalone Subversion server process is also available. This server speaks a custom protocol which can be easily tunneled over ssh."
msgstr ""

#: source/en/tsvn_introduction.xml:198(term) 
msgid "Consistent data handling"
msgstr ""

#: source/en/tsvn_introduction.xml:200(para) 
msgid "Subversion expresses file differences using a binary differencing algorithm, which works identically on both text (human-readable) and binary (human-unreadable) files. Both types of files are stored equally compressed in the repository, and differences are transmitted in both directions across the network."
msgstr ""

#: source/en/tsvn_introduction.xml:211(term) 
msgid "Efficient branching and tagging"
msgstr ""

#: source/en/tsvn_introduction.xml:213(para) 
msgid "The cost of branching and tagging need not be proportional to the project size. Subversion creates branches and tags by simply copying the project, using a mechanism similar to a hard-link. Thus these operations take only a very small, constant amount of time."
msgstr ""

#: source/en/tsvn_introduction.xml:224(term) 
msgid "Hackability"
msgstr ""

#: source/en/tsvn_introduction.xml:226(para) 
msgid "Subversion has no historical baggage; it is implemented as a collection of shared C libraries with well-defined APIs. This makes Subversion extremely maintainable and usable by other applications and languages."
msgstr ""

#: source/en/tsvn_introduction.xml:240(title) 
msgid "Installing TortoiseSVN"
msgstr ""

#: source/en/tsvn_introduction.xml:243(primary) source/en/tsvn_app_faq.xml:22(primary) 
msgid "install"
msgstr ""

#: source/en/tsvn_introduction.xml:245(title) 
msgid "System requirements"
msgstr ""

#: source/en/tsvn_introduction.xml:246(para) 
msgid "TortoiseSVN runs on Win2k SP2, WinXP or higher."
msgstr ""

#: source/en/tsvn_introduction.xml:251(title) 
msgid "Installation"
msgstr ""

#: source/en/tsvn_introduction.xml:252(para) 
msgid "TortoiseSVN comes with an easy to use installer. Doubleclick on the installer file and follow the instructions. The installer will take care of the rest. Make sure to select the <literal>Install for all users</literal> option, unless you <emphasis>really</emphasis> want to restrict its use to the current user only."
msgstr ""

#: source/en/tsvn_introduction.xml:280(citetitle) 
msgid "http://lingucomponent.openoffice.org/spell_dic.html"
msgstr ""

#: source/en/tsvn_introduction.xml:260(para) 
msgid "<indexterm><primary>spellchecker</primary></indexterm> If you want to use a spell checker for your log messages then you have to download the required dictionaries yourself. You can use the same dictionary files as <ulink url=\"http://openoffice.org\"><citetitle>OpenOffice</citetitle></ulink> and <ulink url=\"http://mozilla.org\"><citetitle>Mozilla</citetitle></ulink> use. You can find the required dictionary files on various places: <placeholder-1/> You can also use the dictionaries which get installed with Mozilla. They're located in the installation folder of Mozilla."
msgstr ""

#: source/en/tsvn_introduction.xml:295(para) 
msgid "en_US.aff"
msgstr ""

#: source/en/tsvn_introduction.xml:300(para) 
msgid "en_US.dic"
msgstr ""

#: source/en/tsvn_introduction.xml:288(para) 
msgid "Once you have got the dictionary files, you probably need to rename them so that the filenames only have the locale chars in it. Example: <placeholder-1/> Then just copy them to the <literal>bin</literal> sub-folder of the TortoiseSVN installation folder. Normally this will be <filename>C:\\Program Files\\TortoiseSVN\\bin</filename>. If you don't want to litter the <literal>bin</literal> sub-folder, you can place your spell checker files also in <filename>C:\\Program Files\\TortoiseSVN\\dic</filename>. If that folder isn't there, you have to create it first. The next time you start TortoiseSVN, the spell checker will be available."
msgstr ""

#: source/en/tsvn_introduction.xml:314(para) 
msgid "If you encounter any problems while or after installing TortoiseSVN please refer to <xref linkend=\"tsvn-faq\"/> first."
msgstr ""

#: source/en/tsvn_basics.xml:6(title) 
msgid "Basic Concepts"
msgstr ""

#: source/en/tsvn_basics.xml:8(para) 
msgid "<indexterm><primary>Subversion book</primary></indexterm> This chapter is a slightly modified version of the same chapter in the Subversion book. You can read the Subversion book here: <ulink url=\"http://svnbook.red-bean.com/\"><citetitle>http://svnbook.red-bean.com/</citetitle></ulink>."
msgstr ""

#: source/en/tsvn_basics.xml:18(para) 
msgid "This chapter is a short, casual introduction to Subversion. If you're new to version control, this chapter is definitely for you. We begin with a discussion of general version control concepts, work our way into the specific ideas behind Subversion, and show some simple examples of Subversion in use."
msgstr ""

#: source/en/tsvn_basics.xml:26(para) 
msgid "Even though the examples in this chapter show people sharing collections of program source code, keep in mind that Subversion can manage any sort of file collection - it's not limited to helping computer programmers."
msgstr ""

#: source/en/tsvn_basics.xml:36(primary) 
msgid "repository"
msgstr ""

#: source/en/tsvn_basics.xml:38(para) 
msgid "Subversion is a centralized system for sharing information. At its core is a <firstterm>repository</firstterm>, which is a central store of data. The repository stores information in the form of a <firstterm>filesystem tree</firstterm> - a typical hierarchy of files and directories. Any number of <firstterm>clients</firstterm> connect to the repository, and then read or write to these files. By writing data, a client makes the information available to others; by reading data, the client receives information from others."
msgstr ""

#: source/en/tsvn_basics.xml:50(title) 
msgid "A Typical Client/Server System"
msgstr ""

#: source/en/tsvn_basics.xml:53(para) 
msgid "So why is this interesting? So far, this sounds like the definition of a typical file server. And indeed, the repository <emphasis>is</emphasis> a kind of file server, but it's not your usual breed. What makes the Subversion repository special is that <emphasis>it remembers every change</emphasis> ever written to it: every change to every file, and even changes to the directory tree itself, such as the addition, deletion, and rearrangement of files and directories."
msgstr ""

#: source/en/tsvn_basics.xml:63(para) 
msgid "When a client reads data from the repository, it normally sees only the latest version of the filesystem tree. But the client also has the ability to view <emphasis>previous</emphasis> states of the filesystem. For example, a client can ask historical questions like, \"what did this directory contain last Wednesday?\", or \"who was the last person to change this file, and what changes did they make?\" These are the sorts of questions that are at the heart of any <firstterm>version control system</firstterm>: systems that are designed to record and track changes to data over time."
msgstr ""

#: source/en/tsvn_basics.xml:78(title) 
msgid "Versioning Models"
msgstr ""

#: source/en/tsvn_basics.xml:79(para) 
msgid "All version control systems have to solve the same fundamental problem: how will the system allow users to share information, but prevent them from accidentally stepping on each other's feet? It's all too easy for users to accidentally overwrite each other's changes in the repository."
msgstr ""

#: source/en/tsvn_basics.xml:88(title) 
msgid "The Problem of File-Sharing"
msgstr ""

#: source/en/tsvn_basics.xml:89(para) 
msgid "Consider this scenario: suppose we have two co-workers, Harry and Sally. They each decide to edit the same repository file at the same time. If Harry saves his changes to the repository first, then it's possible that (a few moments later) Sally could accidentally overwrite them with her own new version of the file. While Harry's version of the file won't be lost forever (because the system remembers every change), any changes Harry made <emphasis>won't</emphasis> be present in Sally's newer version of the file, because she never saw Harry's changes to begin with. Harry's work is still effectively lost - or at least missing from the latest version of the file - and probably by accident. This is definitely a situation we want to avoid!"
msgstr ""

#: source/en/tsvn_basics.xml:105(title) 
msgid "The Problem to Avoid"
msgstr ""

#: source/en/tsvn_basics.xml:110(title) source/en/tsvn_basics.xml:126(title) 
msgid "The Lock-Modify-Unlock Solution"
msgstr ""

#: source/en/tsvn_basics.xml:111(para) 
msgid "Many version control systems use a <firstterm>lock-modify-unlock</firstterm> model to address this problem, which is a very simple solution. In such a system, the repository allows only one person to change a file at a time. First Harry must \"lock\" the file before he can begin making changes to it. Locking a file is a lot like borrowing a book from the library; if Harry has locked a file, then Sally cannot make any changes to it. If she tries to lock the file, the repository will deny the request. All she can do is read the file, and wait for Harry to finish his changes and release his lock. After Harry unlocks the file, his turn is over, and now Sally can take her turn by locking and editing."
msgstr ""

#: source/en/tsvn_basics.xml:129(para) 
msgid "The problem with the lock-modify-unlock model is that it's a bit restrictive, and often becomes a roadblock for users:"
msgstr ""

#: source/en/tsvn_basics.xml:136(para) 
msgid "<emphasis>Locking may cause administrative problems.</emphasis> Sometimes Harry will lock a file and then forget about it. Meanwhile, because Sally is still waiting to edit the file, her hands are tied. And then Harry goes on vacation. Now Sally has to get an administrator to release Harry's lock. The situation ends up causing a lot of unnecessary delay and wasted time."
msgstr ""

#: source/en/tsvn_basics.xml:147(para) 
msgid "<emphasis>Locking may cause unnecessary serialization.</emphasis> What if Harry is editing the beginning of a text file, and Sally simply wants to edit the end of the same file? These changes don't overlap at all. They could easily edit the file simultaneously, and no great harm would come, assuming the changes were properly merged together. There's no need for them to take turns in this situation."
msgstr ""

#: source/en/tsvn_basics.xml:159(para) 
msgid "<emphasis>Locking may create a false sense of security.</emphasis> Pretend that Harry locks and edits file A, while Sally simultaneously locks and edits file B. But suppose that A and B depend on one another, and the changes made to each are semantically incompatible. Suddenly A and B don't work together anymore. The locking system was powerless to prevent the problem - yet it somehow provided a sense of false security. It's easy for Harry and Sally to imagine that by locking files, each is beginning a safe, insulated task, and thus inhibits them from discussing their incompatible changes early on."
msgstr ""

#: source/en/tsvn_basics.xml:177(title) source/en/tsvn_basics.xml:205(title) 
msgid "The Copy-Modify-Merge Solution"
msgstr ""

#: source/en/tsvn_basics.xml:178(para) 
msgid "Subversion, CVS, and other version control systems use a <firstterm>copy-modify-merge</firstterm> model as an alternative to locking. In this model, each user's client reads the repository and creates a personal <firstterm>working copy</firstterm> of the file or project. Users then work in parallel, modifying their private copies. Finally, the private copies are merged together into a new, final version. The version control system often assists with the merging, but ultimately a human being is responsible for making it happen correctly."
msgstr ""

#: source/en/tsvn_basics.xml:190(para) 
msgid "Here's an example. Say that Harry and Sally each create working copies of the same project, copied from the repository. They work concurrently, and make changes to the same file \"A\" within their copies. Sally saves her changes to the repository first. When Harry attempts to save his changes later, the repository informs him that his file A is <firstterm>out-of-date</firstterm>. In other words, that file A in the repository has somehow changed since he last copied it. So Harry asks his client to <firstterm>merge</firstterm> any new changes from the repository into his working copy of file A. Chances are that Sally's changes don't overlap with his own; so once he has both sets of changes integrated, he saves his working copy back to the repository."
msgstr ""

#: source/en/tsvn_basics.xml:209(title) 
msgid "...Copy-Modify-Merge Continued"
msgstr ""

#: source/en/tsvn_basics.xml:212(para) 
msgid "<indexterm><primary>conflict</primary></indexterm> But what if Sally's changes <emphasis>do</emphasis> overlap with Harry's changes? What then? This situation is called a <firstterm>conflict</firstterm>, and it's usually not much of a problem. When Harry asks his client to merge the latest repository changes into his working copy, his copy of file A is somehow flagged as being in a state of conflict: he'll be able to see both sets of conflicting changes, and manually choose between them. Note that software can't automatically resolve conflicts; only humans are capable of understanding and making the necessary intelligent choices. Once Harry has manually resolved the overlapping changes (perhaps by discussing the conflict with Sally!), he can safely save the merged file back to the repository."
msgstr ""

#: source/en/tsvn_basics.xml:230(para) 
msgid "The copy-modify-merge model may sound a bit chaotic, but in practice, it runs extremely smoothly. Users can work in parallel, never waiting for one another. When they work on the same files, it turns out that most of their concurrent changes don't overlap at all; conflicts are infrequent. And the amount of time it takes to resolve conflicts is far less than the time lost by a locking system."
msgstr ""

#: source/en/tsvn_basics.xml:239(para) 
msgid "In the end, it all comes down to one critical factor: user communication. When users communicate poorly, both syntactic and semantic conflicts increase. No system can force users to communicate perfectly, and no system can detect semantic conflicts. So there's no point in being lulled into a false promise that a locking system will somehow prevent conflicts; in practice, locking seems to inhibit productivity more than anything else."
msgstr ""

#: source/en/tsvn_basics.xml:253(title) 
msgid "Subversion in Action"
msgstr ""

#: source/en/tsvn_basics.xml:255(title) 
msgid "Working Copies"
msgstr ""

#: source/en/tsvn_basics.xml:256(para) 
msgid "<indexterm><primary>working copy</primary></indexterm> You've already read about working copies; now we'll demonstrate how the Subversion client creates and uses them."
msgstr ""

#: source/en/tsvn_basics.xml:264(para) 
msgid "A Subversion working copy is an ordinary directory tree on your local system, containing a collection of files. You can edit these files however you wish, and if they're source code files, you can compile your program from them in the usual way. Your working copy is your own private work area: Subversion will never incorporate other people's changes, nor make your own changes available to others, until you explicitly tell it to do so."
msgstr ""

#: source/en/tsvn_basics.xml:274(para) 
msgid "After you've made some changes to the files in your working copy and verified that they work properly, Subversion provides you with commands to \"publish\" your changes to the other people working with you on your project (by writing to the repository). If other people publish their own changes, Subversion provides you with commands to merge those changes into your working directory (by reading from the repository)."
msgstr ""

#: source/en/tsvn_basics.xml:284(para) 
msgid "A working copy also contains some extra files, created and maintained by Subversion, to help it carry out these commands. In particular, each directory in your working copy contains a subdirectory named <filename>.svn</filename>, also known as the working copy <firstterm>administrative directory</firstterm>. The files in each administrative directory help Subversion recognize which files contain unpublished changes, and which files are out-of-date with respect to others' work."
msgstr ""

#: source/en/tsvn_basics.xml:295(para) 
msgid "A typical Subversion repository often holds the files (or source code) for several projects; usually, each project is a subdirectory in the repository's filesystem tree. In this arrangement, a user's working copy will usually correspond to a particular subtree of the repository."
msgstr ""

#: source/en/tsvn_basics.xml:302(para) 
msgid "For example, suppose you have a repository that contains two software projects."
msgstr ""

#: source/en/tsvn_basics.xml:307(title) 
msgid "The Repository's Filesystem"
msgstr ""

#: source/en/tsvn_basics.xml:310(para) 
msgid "In other words, the repository's root directory has two subdirectories: <filename>paint</filename> and <filename>calc</filename>."
msgstr ""

#: source/en/tsvn_basics.xml:315(para) 
msgid "To get a working copy, you must <firstterm>check out</firstterm> some subtree of the repository. (The term \"check out\" may sound like it has something to do with locking or reserving resources, but it doesn't; it simply creates a private copy of the project for you)."
msgstr ""

#: source/en/tsvn_basics.xml:323(title) 
msgid "Repository URLs"
msgstr ""

#: source/en/tsvn_basics.xml:324(para) 
msgid "Subversion repositories can be accessed through many different methods - on local disk, or through various network protocols. A repository location, however, is always a URL. The URL schema indicates the access method:"
msgstr ""

#: source/en/tsvn_basics.xml:332(title) 
msgid "Repository Access URLs"
msgstr ""

#: source/en/tsvn_basics.xml:338(entry) 
msgid "Schema"
msgstr ""

#: source/en/tsvn_basics.xml:339(entry) 
msgid "Access Method"
msgstr ""

#: source/en/tsvn_basics.xml:345(literal) 
msgid "file:///"
msgstr ""

#: source/en/tsvn_basics.xml:347(entry) 
msgid "Direct repository access on local disk."
msgstr ""

#: source/en/tsvn_basics.xml:353(literal) source/en/tsvn_basics.xml:364(literal) 
msgid "http://"
msgstr ""

#: source/en/tsvn_basics.xml:355(entry) 
msgid "Access via WebDAV protocol to Subversion-aware Apache server."
msgstr ""

#: source/en/tsvn_basics.xml:361(literal) 
msgid "https://"
msgstr ""

#: source/en/tsvn_basics.xml:363(entry) 
msgid "Same as <placeholder-1/>, but with SSL encryption."
msgstr ""

#: source/en/tsvn_basics.xml:369(literal) 
msgid "svn://"
msgstr ""

#: source/en/tsvn_basics.xml:373(literal) source/en/tsvn_basics.xml:382(literal) 
msgid "svnserve"
msgstr ""

#: source/en/tsvn_basics.xml:371(entry) 
msgid "Unauthenticated TCP/IP access via custom protocol to an <placeholder-1/> server."
msgstr ""

#: source/en/tsvn_basics.xml:378(literal) 
msgid "svn+ssh://"
msgstr ""

#: source/en/tsvn_basics.xml:380(entry) 
msgid "authenticated, encrypted TCP/IP access via custom protocol to an <placeholder-1/> server"
msgstr ""

#: source/en/tsvn_basics.xml:389(para) 
msgid "For the most part, Subversion's URLs use the standard syntax, allowing for server names and port numbers to be specified as part of the URL. Remember that the <literal>file:</literal> access method is valid only for locations on the same server as the client - in fact, in accordance with convention, the server name portion of the URL is required to be either absent or <literal>localhost</literal>. Take great care that the <literal>file:</literal> access method may not be used to access repositories located on drives shared over the network!"
msgstr ""

#: source/en/tsvn_basics.xml:400(para) 
msgid "Also, users of the <literal>file:</literal> scheme on Windows platforms will need to use an unofficially <quote>standard</quote> syntax for accessing repositories that are on the same machine, but on a different drive than the client's current working drive. Either of the two following URL path syntaxes will work where <literal>X</literal> is the drive on which the repository resides:"
msgstr ""

#: source/en/tsvn_basics.xml:410(screen) 
#, no-wrap
msgid "\nfile:///X:/path/to/repos\n...\nfile:///X|/path/to/repos\n...\n"
msgstr ""

#: source/en/tsvn_basics.xml:416(para) 
msgid "Note that a URL uses ordinary slashes even though the native (non-URL) form of a path on Windows uses backslashes."
msgstr ""

#: source/en/tsvn_basics.xml:421(para) 
msgid "Suppose you make changes to <filename>button.c</filename>. Since the <filename>.svn</filename> directory remembers the file's modification date and original contents, Subversion can tell that you've changed the file. However, Subversion does not make your changes public until you explicitly tell it to. The act of publishing your changes is more commonly known as <firstterm>committing</firstterm> (or <firstterm>checking in</firstterm>) changes to the repository."
msgstr ""

#: source/en/tsvn_basics.xml:431(para) 
msgid "To publish your changes to others, you can use Subversion's <command>commit</command> command."
msgstr ""

#: source/en/tsvn_basics.xml:435(para) 
msgid "Now your changes to <filename>button.c</filename> have been committed to the repository; if another user checks out a working copy of <filename>/calc</filename>, they will see your changes in the latest version of the file."
msgstr ""

#: source/en/tsvn_basics.xml:441(para) 
msgid "Suppose you have a collaborator, Sally, who checked out a working copy of <filename>/calc</filename> at the same time you did. When you commit your change to <filename>button.c</filename>, Sally's working copy is left unchanged; Subversion only modifies working copies at the user's request."
msgstr ""

#: source/en/tsvn_basics.xml:449(para) 
msgid "To bring her project up to date, Sally can ask Subversion to <firstterm>update</firstterm> her working copy, by using the Subversion <command>update</command> command. This will incorporate your changes into her working copy, as well as any others that have been committed since she checked it out."
msgstr ""

#: source/en/tsvn_basics.xml:457(para) 
msgid "Note that Sally didn't need to specify which files to update; Subversion uses the information in the <filename>.svn</filename> directory, and further information in the repository, to decide which files need to be brought up to date."
msgstr ""

#: source/en/tsvn_basics.xml:466(title) 
msgid "Revisions"
msgstr ""

#: source/en/tsvn_basics.xml:470(para) 
msgid "An <command>svn commit</command> operation can publish changes to any number of files and directories as a single atomic transaction. In your working copy, you can change files' contents, create, delete, rename and copy files and directories, and then commit the complete set of changes as a unit."
msgstr ""

#: source/en/tsvn_basics.xml:478(para) 
msgid "In the repository, each commit is treated as an atomic transaction: either all the commit's changes take place, or none of them take place. Subversion tries to retain this atomicity in the face of program crashes, system crashes, network problems, and other users' actions."
msgstr ""

#: source/en/tsvn_basics.xml:485(para) 
msgid "Each time the repository accepts a commit, this creates a new state of the filesystem tree, called a <firstterm>revision</firstterm>. Each revision is assigned a unique natural number, one greater than the number of the previous revision. The initial revision of a freshly created repository is numbered zero, and consists of nothing but an empty root directory."
msgstr ""

#: source/en/tsvn_basics.xml:494(para) 
msgid "A nice way to visualize the repository is as a series of trees. Imagine an array of revision numbers, starting at 0, stretching from left to right. Each revision number has a filesystem tree hanging below it, and each tree is a <quote>snapshot</quote> of the way the repository looked after each commit."
msgstr ""

#: source/en/tsvn_basics.xml:507(title) 
msgid "Global Revision Numbers"
msgstr ""

#: source/en/tsvn_basics.xml:508(para) 
msgid "Unlike those of many other version control systems, Subversion's revision numbers apply to <emphasis>entire trees</emphasis>, not individual files. Each revision number selects an entire tree, a particular state of the repository after some committed change. Another way to think about it is that revision N represents the state of the repository filesystem after the Nth commit. When a Subversion user talks about ``revision 5 of <filename>foo.c</filename>'', they really mean ``<filename>foo.c</filename> as it appears in revision 5.'' Notice that in general, revisions N and M of a file do <emphasis>not</emphasis> necessarily differ!"
msgstr ""

#: source/en/tsvn_basics.xml:523(para) 
msgid "It's important to note that working copies do not always correspond to any single revision in the repository; they may contain files from several different revisions. For example, suppose you check out a working copy from a repository whose most recent revision is 4:"
msgstr ""

#: source/en/tsvn_basics.xml:530(screen) 
#, no-wrap
msgid "\ncalc/Makefile:4\n     integer.c:4\n     button.c:4\n"
msgstr ""

#: source/en/tsvn_basics.xml:535(para) 
msgid "At the moment, this working directory corresponds exactly to revision 4 in the repository. However, suppose you make a change to <filename>button.c</filename>, and commit that change. Assuming no other commits have taken place, your commit will create revision 5 of the repository, and your working copy will now look like this:"
msgstr ""

#: source/en/tsvn_basics.xml:543(screen) 
#, no-wrap
msgid "\ncalc/Makefile:4\n     integer.c:4\n     button.c:5\n"
msgstr ""

#: source/en/tsvn_basics.xml:548(para) 
msgid "Suppose that, at this point, Sally commits a change to <filename>integer.c</filename>, creating revision 6. If you use <command>svn update</command> to bring your working copy up to date, then it will look like this:"
msgstr ""

#: source/en/tsvn_basics.xml:554(screen) 
#, no-wrap
msgid "\ncalc/Makefile:6\n     integer.c:6\n     button.c:6\n"
msgstr ""

#: source/en/tsvn_basics.xml:559(para) 
msgid "Sally's changes to <filename>integer.c</filename> will appear in your working copy, and your change will still be present in <filename>button.c</filename>. In this example, the text of <filename>Makefile</filename> is identical in revisions 4, 5, and 6, but Subversion will mark your working copy of <filename>Makefile</filename> with revision 6 to indicate that it is still current. So, after you do a clean update at the top of your working copy, it will generally correspond to exactly one revision in the repository."
msgstr ""

#: source/en/tsvn_basics.xml:572(title) 
msgid "How Working Copies Track the Repository"
msgstr ""

#: source/en/tsvn_basics.xml:573(para) 
msgid "For each file in a working directory, Subversion records two essential pieces of information in the <filename>.svn/</filename> administrative area:"
msgstr ""

#: source/en/tsvn_basics.xml:579(para) 
msgid "what revision your working file is based on (this is called the file's <firstterm>working revision</firstterm>), and"
msgstr ""

#: source/en/tsvn_basics.xml:586(para) 
msgid "a timestamp recording when the local copy was last updated by the repository."
msgstr ""

#: source/en/tsvn_basics.xml:592(para) 
msgid "Given this information, by talking to the repository, Subversion can tell which of the following four states a working file is in:"
msgstr ""

#: source/en/tsvn_basics.xml:599(term) 
msgid "Unchanged, and current"
msgstr ""

#: source/en/tsvn_basics.xml:601(para) 
msgid "The file is unchanged in the working directory, and no changes to that file have been committed to the repository since its working revision. A <command>commit</command> of the file will do nothing, and an <command>update</command> of the file will do nothing."
msgstr ""

#: source/en/tsvn_basics.xml:612(term) 
msgid "Locally changed, and current"
msgstr ""

#: source/en/tsvn_basics.xml:614(para) 
msgid "The file has been changed in the working directory, and no changes to that file have been committed to the repository since its base revision. There are local changes that have not been committed to the repository, thus an <command>commit</command> of the file will succeed in publishing your changes, and an <command>update</command> of the file will do nothing."
msgstr ""

#: source/en/tsvn_basics.xml:626(term) 
msgid "Unchanged, and out-of-date"
msgstr ""

#: source/en/tsvn_basics.xml:628(para) 
msgid "The file has not been changed in the working directory, but it has been changed in the repository. The file should eventually be updated, to make it current with the public revision. An <command>commit</command> of the file will do nothing, and an <command>update</command> of the file will fold the latest changes into your working copy."
msgstr ""

#: source/en/tsvn_basics.xml:640(term) 
msgid "Locally changed, and out-of-date"
msgstr ""

#: source/en/tsvn_basics.xml:642(para) 
msgid "The file has been changed both in the working directory, and in the repository. An <command>commit </command> of the file will fail with an \"out-of-date\" error. The file should be updated first; an <command>update </command> command will attempt to merge the public changes with the local changes. If Subversion can't complete the merge in a plausible way automatically, it leaves it to the user to resolve the conflict."
msgstr ""

#: source/en/tsvn_basics.xml:659(title) 
msgid "Summary"
msgstr ""

#: source/en/tsvn_basics.xml:660(para) 
msgid "We've covered a number of fundamental Subversion concepts in this chapter:"
msgstr ""

#: source/en/tsvn_basics.xml:666(para) 
msgid "We've introduced the notions of the central repository, the client working copy, and the array of repository revision trees."
msgstr ""

#: source/en/tsvn_basics.xml:672(para) 
msgid "We've seen some simple examples of how two collaborators can use Subversion to publish and receive changes from one another, using the 'copy-modify-merge' model."
msgstr ""

#: source/en/tsvn_basics.xml:679(para) 
msgid "We've talked a bit about the way Subversion tracks and manages information in a working copy."
msgstr ""

#: source/en/tsvn_app_faq.xml:3(title) 
msgid "Frequently Asked Questions (FAQ)"
msgstr ""

#: source/en/tsvn_app_faq.xml:5(para) 
msgid "This appendix contains an extract of the questions we are asked the most on the TortoiseSVN mailing list <email>dev@tortoisesvn.tigris.org</email>. We maintain an interactive online FAQ at <ulink url=\"http://tortoisesvn.berlios.de/faq/\"><citetitle>Berlios.de</citetitle></ulink> which contains a lot more information."
msgstr ""

#: source/en/tsvn_app_faq.xml:20(title) 
msgid "Installation issues"
msgstr ""

#: source/en/tsvn_app_faq.xml:24(para) 
msgid "Many of these answers came from the <ulink url=\"http://www.tortoisecvs.org/faq.html\"><citetitle>TortoiseCVS FAQ</citetitle></ulink>"
msgstr ""

#: source/en/tsvn_app_faq.xml:31(title) 
msgid "The installer aborts with an error message"
msgstr ""

#: source/en/tsvn_app_faq.xml:32(para) 
msgid "If the msi installer shows you the error message <literal>The installer was interrupted before TortoiseSVN could be installed. You need to restart the installer to try again. Click Close to exit</literal> then the user SYSTEM doesn't have read access to the folder where the msi file is located."
msgstr ""

#: source/en/tsvn_app_faq.xml:39(para) 
msgid "Just move the msi file to another location, e.g. <filename>c:\\</filename> and try again."
msgstr ""

#: source/en/tsvn_app_faq.xml:45(title) 
msgid "I installed TortoiseSVN as Administrator. Now when I log in as me, it's not there"
msgstr ""

#: source/en/tsvn_app_faq.xml:49(para) 
msgid "When you started the installation you forgot to select the option to <literal>install for all users</literal> instead of <literal>just for me</literal>. The easiest way to correct that is to uninstall, reboot, then reinstall."
msgstr ""

#: source/en/tsvn_app_faq.xml:57(title) 
msgid "When upgrading TortoiseSVN, do I have to uninstall the existing version first?"
msgstr ""

#: source/en/tsvn_app_faq.xml:61(para) 
msgid "No. You can just install the new version over the old one. The installer will take care of uninstalling the old version first automatically."
msgstr ""

#: source/en/tsvn_app_faq.xml:66(para) 
msgid "But you <emphasis>must</emphasis> reboot your computer after the installer finishes! Or at least you have to log off and log on again. If you don't, TortoiseSVN will crash!"
msgstr ""

#: source/en/tsvn_app_faq.xml:73(title) 
msgid "Why don't the icon overlays appear?"
msgstr ""

#: source/en/tsvn_app_faq.xml:80(para) 
msgid "If you are using Windows 95 the icon overlays won't appear. You can try the instructions for Windows NT4 below if you like, but it may still not work. Please note: We don't support Windows 95 at all - so there may be other issues if you're using that OS"
msgstr ""

#: source/en/tsvn_app_faq.xml:89(para) 
msgid "If you are using Windows NT4, you need to install the IE4 shell or desktop extensions to get a more recent version of Explorer. To do this install IE4, and choose Yes to install the active desktop. Don't worry, you can turn off the actual active desktop later by right clicking on it. It's the new version of Explorer that we are after."
msgstr ""

#: source/en/tsvn_app_faq.xml:105(para) 
msgid "Uninstall IE5 and then install IE4 with desktop extensions, and then install IE5 again. What a palaver."
msgstr ""

#: source/en/tsvn_app_faq.xml:112(para) 
msgid "Run IE5 setup with command line switches to install the IE4 desktop (shell) extensions"
msgstr ""

#: source/en/tsvn_app_faq.xml:117(para) 
msgid "The command must be run from the folder that contains the <filename>ie5setup.exe</filename> file. If the browser appears unstable afterwards just run the IE5 repair function."
msgstr ""

#: source/en/tsvn_app_faq.xml:124(para) 
msgid "For Win95: <screen>\nie5setup.exe /c:\"ie5wzd /e:IE4Shell WIN /I:Y\"\n</screen>"
msgstr ""

#: source/en/tsvn_app_faq.xml:130(para) 
msgid "For WinNT: <screen>\nie5setup.exe /c:\"ie5wzd /e:IE4Shell NTx86 /I:Y\"\n</screen>"
msgstr ""

#: source/en/tsvn_app_faq.xml:101(para) 
msgid "If you've already installed IE5, you must either: <placeholder-1/>"
msgstr ""

#: source/en/tsvn_app_faq.xml:141(para) 
msgid "For IE6:"
msgstr ""

#: source/en/tsvn_app_faq.xml:144(para) 
msgid "Run IE6 setup with command line switches to install the IE4 desktop (shell) extensions. The same caveats apply as for IE5. The command must be run from the folder that contains the <filename>ie6setup.exe</filename> file."
msgstr ""

#: source/en/tsvn_app_faq.xml:151(para) 
msgid "For WinNT: <screen>\nie6setup.exe /c:\"ie6wzd /e:IE4Shell NTx86 /I:Y\"\n</screen>"
msgstr ""

#: source/en/tsvn_app_faq.xml:159(para) 
msgid "The shortcut labelled <literal>Win NT Explorer</literal> on your start menu probably points to <filename>C:\\WINNT\\explorer.scf</filename> and doesn't get the overlays. Create a new shortcut to <screen>\n%windir%\\Explorer.exe /n, /e\n</screen> and it may get the overlays."
msgstr ""

#: source/en/tsvn_app_faq.xml:172(para) 
msgid "If you're using an IntelliPoint mouse driver, and launching Explorer via a mouse click, you need to upgrade from version 3 to version 3.2 or higher of IntelliPoint. Strangely, launching Explorer from the Start menu gives icons in this case, but not when launched from the mouse."
msgstr ""

#: source/en/tsvn_app_faq.xml:185(title) 
msgid "I followed the instructions, but there are still no icons?!?"
msgstr ""

#: source/en/tsvn_app_faq.xml:186(para) 
msgid "You rebooted your PC off course? So after installing the shell extensions you now have WinNT / Win95 and IE &gt;= 5.5 installed?"
msgstr ""

#: source/en/tsvn_app_faq.xml:191(para) 
msgid "If you installed TortoiseSVN as a different user under WinNT/Win2K/WinXP than you are using now, do the following thing: Go to the settings of TSVN and activate the icon overlays for at least the fixed drives. The installer does this automatically for the <emphasis>current</emphasis> user (can't do it for other users...) but since you are using TSVN as a different user than you installed it you need to set this manually."
msgstr ""

#: source/en/tsvn_app_faq.xml:204(title) 
msgid "The overlay icons appear, but not all of them!"
msgstr ""

#: source/en/tsvn_app_faq.xml:205(para) 
msgid "This usually happens if you have other programs installed which use icon overlays like e.g. TortoiseCVS. The reason for this is that Windows only has 15 slots for icon overlays, and about three or four are used by Windows itself (e.g. for links, shared folders, ...). If all those slots are full then TortoiseSVN can't register another one and won't show all overlays."
msgstr ""

#: source/en/tsvn_app_faq.xml:213(para) 
msgid "TortoiseSVN uses five overlay slots for the status: <graphic fileref=\"images/InSubVersionIcon.png\"/> normal <graphic fileref=\"images/ModifiedIcon.png\"/> modified <graphic fileref=\"images/ConflictIcon.png\"/> conflicted <graphic fileref=\"images/DeletedIcon.png\"/> deleted <graphic fileref=\"images/AddedIcon.png\"/> added"
msgstr ""

#: source/en/tsvn_app_faq.xml:226(para) 
msgid "So most likely the <literal>added</literal> overlay will be missing, then the <literal>deleted</literal> and so on."
msgstr ""

#: source/en/tsvn_app_faq.xml:232(title) 
msgid "Why is there no overlay icon for unversioned files?"
msgstr ""

#: source/en/tsvn_app_faq.xml:233(para) 
msgid "For the same reason. There are only 15 slots for icon overlays available. We don't want to waste a slot for the least important information. That's why. If you want to distinguish <literal>unversioned</literal> and <literal>ignored</literal> files in the explorer, switch to the explorers detailed view and activate the column <guilabel>SVN Status</guilabel>. Then you will see the difference."
msgstr ""

#: source/en/tsvn_app_faq.xml:244(title) 
msgid "Why do the overlay icons sometimes change to random graphics?"
msgstr ""

#: source/en/tsvn_app_faq.xml:250(para) 
msgid "Install Microsoft's <application><ulink url=\"http://www.microsoft.com/ntworkstation/downloads/powertoys/networking/nttweakui.asp\"><citetitle>TweakUI</citetitle></ulink></application> and run the option to rebuild icons."
msgstr ""

#: source/en/tsvn_app_faq.xml:261(para) 
msgid "Or increase the icon cache size. Go to <screen>\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\n</screen> and add a new String Value called <literal>Max Cached Icons</literal>. The default value is 500 - try increasing it to 2048 (see <ulink url=\"http://support.microsoft.com/support/kb/articles/Q132/6/68.asp\"><citetitle>Q132668</citetitle></ulink> in the Microsoft knowledge base for more details)."
msgstr ""

#: source/en/tsvn_app_faq.xml:276(para) 
msgid "Or delete the file called ShellIconCache in your Windows directory. And reboot."
msgstr ""

#: source/en/tsvn_app_faq.xml:245(para) 
msgid "The Windows icon cache is a fairly buggy creature. You can solve this in one of the following ways: <placeholder-1/>"
msgstr ""

#: source/en/tsvn_app_faq.xml:285(title) 
msgid "Those icons are grotesque, I want better ones!"
msgstr ""

#: source/en/tsvn_app_faq.xml:286(para) 
msgid "You can create your own icon set if you want. And if you do please contribute them to the rest of the world! Just send them to the mailing list <email>dev@tortoisesvn.tigris.org</email>."
msgstr ""

#: source/en/tsvn_app_faq.xml:291(para) 
msgid "The icons should have at least two sizes (16x16 and 32x32 with 16 colors), for Windows XP there should also be a set with 48x48 pixels."
msgstr ""

#: source/en/tsvn_app_faq.xml:296(para) 
msgid "To install the icons you should copy them to the directory where TortoiseSVN was installed. There you will find a directory called <filename>Icons</filename> which contains a separate subfolder for each available icon set. Copy your own icon set in there. Then start the settings dialog, and set the active icon set to the one you created."
msgstr ""

#: source/en/tsvn_app_faq.xml:304(para) 
msgid "After that you need to restart (or logoff) your computer so that explorer reads in the icons again. Alternatively you can flush the icon cache with the <ulink url=\"http://www.microsoft.com/ntworkstation/downloads/powertoys/networking/nttweakui.asp\"><citetitle>TweakUI</citetitle></ulink> tool from Microsoft. For WinXP you can get <ulink url=\"http://www.microsoft.com/windowsxp/pro/downloads/powertoys.asp\"><citetitle>TweakUI</citetitle></ulink> here."
msgstr ""

#: source/en/tsvn_app_faq.xml:319(title) 
msgid "The TortoiseSVN menu is invisible!"
msgstr ""

#: source/en/tsvn_app_faq.xml:327(para) 
msgid "If you select a folder in the left pane of explorer, then use the File menu to access TSVN, the menu text and icons are invisible the second time you use the File menu. If you select another folder, the menu is restored. This happens under Windows 98, ME, NT and 2000. Everything works fine under XP."
msgstr ""

#: source/en/tsvn_app_faq.xml:337(para) 
msgid "Under Windows NT 4, the context menu text and icons for TSVN sometimes disappear. This can happen anywhere in explorer."
msgstr ""

#: source/en/tsvn_app_faq.xml:320(para) 
msgid "There are a number of known problems with disappearing menus, which are due to the Windows Explorer, not TSVN. Usually it shows up as a blank space in the menu where the text and icon should be. <placeholder-1/>"
msgstr ""

#: source/en/tsvn_app_faq.xml:347(title) 
msgid "The TortoiseSVN menus are shown as ownerdrawn (no icons, no text) in some software"
msgstr ""

#: source/en/tsvn_app_faq.xml:351(para) 
msgid "This is because the icons are completely ownerdrawn."
msgstr ""

#: source/en/tsvn_app_faq.xml:354(para) 
msgid "I you don't like the way TSVN handles it's menu entries, you can do the following: Just create a (DWORD) registry entry under: <screen>\nHKCU\\Software\\TortoiseSVN\\OwnerdrawnMenus\n</screen> and set it to <literal>0</literal>. This will force TortoiseSVN to use the windows standard routine to draw menu entries. You'll have all the menu entries any time, but you will have ugly icons, since window's default only allows 10x10 icons. If you delete this registry key (the default) or set it to something other than <literal>0</literal> you have the nice icons back."
msgstr ""

#: source/en/tsvn_app_faq.xml:369(para) 
msgid "In case you want no icons at all you can set this value to <literal>2</literal>. Then the context menu entries show up as text only."
msgstr ""

#: source/en/tsvn_app_faq.xml:375(title) 
msgid "How do I uninstall TortoiseSVN?"
msgstr ""

#: source/en/tsvn_app_faq.xml:376(para) 
msgid "Simply uninstall from Add/Remove Programs in the Windows control panel. This does not effect your repositories or working copies at all. Be aware however, that the subversion database schema might change before subversion 1.0 is released. When you are working with local repositories (<filename>file:///</filename> URLs), a newer version of TortoiseSVN might be incompatible to an old repository. Please check the subversion release notes."
msgstr ""

#: source/en/tsvn_app_faq.xml:388(title) 
msgid "I installed a new version of TortoiseSVN, but the new functions aren't visible?!?"
msgstr ""

#: source/en/tsvn_app_faq.xml:392(para) 
msgid "TortoiseSVN is a Windows explorer shell extension. So after updating you <emphasis>must</emphasis> restart windows or at least the explorer process. If you don't then the the explorer process still has the old version of the dll loaded in RAM and uses that old version..."
msgstr ""

#: source/en/tsvn_app_faq.xml:401(title) 
msgid "Can I use TortoiseCVS and TortoiseSVN on the same computer?"
msgstr ""

#: source/en/tsvn_app_faq.xml:402(para) 
msgid "Yes they can live happily together on the same PC. You can even use them on the same folder if that makes any sense to you."
msgstr ""

#: source/en/tsvn_app_faq.xml:409(title) 
msgid "I've got PowerDesk 5 installed and TSVN doesn't work on my PC"
msgstr ""

#: source/en/tsvn_app_faq.xml:410(para) 
msgid "Well, in this case Powerdesk is the bad guy. However, they have now provided a fix, as reported by Paul Gifford."
msgstr ""

#: source/en/tsvn_app_faq.xml:415(para) 
msgid "There is a fix for Powerdesk 5, but it's not available on their website; you have to contact support to get it. They'll give you an update to a later version (5.0.1.7 - which is strangely not on the update portion of the site) then send you a patch to bring you to 5.0.1.8. which fixes the problem."
msgstr ""

#: source/en/tsvn_app_faq.xml:423(para) 
msgid "Version 6 does not have the menu problem."
msgstr ""

#: source/en/tsvn_app_faq.xml:429(title) 
msgid "Where is the spellchecker?"
msgstr ""

#: source/en/tsvn_app_faq.xml:430(para) 
msgid "If you want to use a spellchecker when entering your log messages please follow the installation instructions here: <xref linkend=\"tsvn-ch-1-sect-4\"/>"
msgstr ""

#: source/en/tsvn_app_faq.xml:441(title) 
msgid "Daily use questions"
msgstr ""

#: source/en/tsvn_app_faq.xml:442(para) 
msgid "This section answers questions about problems you may encounter while using TortoiseSVN on a daily basis."
msgstr ""

#: source/en/tsvn_app_faq.xml:447(title) 
msgid "I accidentally removed a file, and now it's gone!"
msgstr ""

#: source/en/tsvn_app_faq.xml:457(para) 
msgid "You can do a <menuchoice><guimenuitem>revert</guimenuitem></menuchoice> on the parent folder where you deleted the file or directory."
msgstr ""

#: source/en/tsvn_app_faq.xml:465(para) 
msgid "If you have already committed the deleted file, then you can use the repository browser, change to the revision where the file still existed and then use the command <menuchoice><guimenuitem>Copy to...</guimenuitem></menuchoice> from the context menu. Enter the path to your working copy as the target."
msgstr ""

#: source/en/tsvn_app_faq.xml:477(title) 
msgid "When I remove a file it vanishes, how do I commit it?"
msgstr ""

#: source/en/tsvn_app_faq.xml:478(para) 
msgid "Easy, you commit the whole directory! <action>Right-click</action> in the Explorer window next to the file, and choose <menuchoice><guimenuitem>commit</guimenuitem></menuchoice>. I nearly always commit things from the top level directory - it is recursive through the whole project."
msgstr ""

#: source/en/tsvn_app_faq.xml:490(title) 
msgid "I always get an error when I check out a single file"
msgstr ""

#: source/en/tsvn_app_faq.xml:491(para) 
msgid "There's nothing wrong with it. Subversion only allows you to check out directories - not files. A warning is not possible because TortoiseSVN has no possibility to check if a URL (e.g. <systemitem class=\"url\"> http://svn.collab.net/svn/repos/trunk/README</systemitem>) is a file or a folder (ok, it could - but that would take a few seconds to check...). But subversion itself complains if it's a file..."
msgstr ""

#: source/en/tsvn_app_faq.xml:504(title) 
msgid "I'm in trouble renaming a file from UPPERcase to upperCASE"
msgstr ""

#: source/en/tsvn_app_faq.xml:506(primary) 
msgid "case sensitive"
msgstr ""

#: source/en/tsvn_app_faq.xml:508(para) 
msgid "There are (at least) two possible solutions to rename a file without losing its log history. It is important to rename it <emphasis>within</emphasis> subversion. Just renaming in the explorer will corrupt your working copy!!!"
msgstr ""

#: source/en/tsvn_app_faq.xml:518(para) 
msgid "Commit the changes in your working copy."
msgstr ""

#: source/en/tsvn_app_faq.xml:523(para) 
msgid "Rename the file from <filename>UPPERcase</filename> to <filename>upperCASE</filename> inside the repository using the <menuchoice><guimenuitem>repository browser</guimenuitem></menuchoice>."
msgstr ""

#: source/en/tsvn_app_faq.xml:534(para) 
msgid "Select the <emphasis>file</emphasis> you renamed, <emphasis>not</emphasis> any of its parent folders, right-click and do an update. After that, update the parent folder."
msgstr ""

#: source/en/tsvn_app_faq.xml:542(para) 
msgid "Or: delete your working copy and do a fresh checkout. Just updating won't work, because it will result in an obstructed update."
msgstr ""

#: source/en/tsvn_app_faq.xml:547(para) 
msgid "If you don't want to checkout the whole working copy again, delete the parent folder of the file you've just renamed and do an update."
msgstr ""

#: source/en/tsvn_app_faq.xml:514(para) 
msgid "Solution A) (recommended) <placeholder-1/>"
msgstr ""

#: source/en/tsvn_app_faq.xml:559(para) 
msgid "Rename from <filename>UPPERcase</filename> to <filename>UPPERcase_</filename> with the <menuchoice><guimenuitem>rename</guimenuitem></menuchoice> command in the TortoiseSVN submenu."
msgstr ""

#: source/en/tsvn_app_faq.xml:570(para) source/en/tsvn_app_faq.xml:582(para) 
msgid "Commit the changes"
msgstr ""

#: source/en/tsvn_app_faq.xml:575(para) 
msgid "Rename from <filename>UPPERcase_</filename> to <filename>upperCASE</filename>"
msgstr ""

#: source/en/tsvn_app_faq.xml:555(para) 
msgid "Solution B) <placeholder-1/>"
msgstr ""

#: source/en/tsvn_app_faq.xml:590(title) 
msgid "Can I mix and match with the Subversion command line client or another Subversion client?"
msgstr ""

#: source/en/tsvn_app_faq.xml:594(para) 
msgid "Yes, you can change from one client to another whenever you want."
msgstr ""

#: source/en/tsvn_app_faq.xml:598(para) 
msgid "There's only one exception: if you use the special build to work around the VS.NET bug with web projects then you can't use any other subversion clients anymore. You're stuck with that special build. Other Subversion clients won't recognize your working copies."
msgstr ""

#: source/en/tsvn_app_faq.xml:606(title) 
msgid "Can I work on lots of working copies from different repositories at once?"
msgstr ""

#: source/en/tsvn_app_faq.xml:610(para) 
msgid "Yes, you can. This is a standard feature of Subversion. Each directory which was checked out of Subversion remembers where it came from. You can even multiply select working copies which came from different places, and update or commit them all at once."
msgstr ""

#: source/en/tsvn_app_faq.xml:617(para) 
msgid "If you want to have different subdirectories to come from different repositories you can set a special Subversion property called <literal>svn:externals</literal>. Please look at the chapter <ulink url=\"http://svnbook.red-bean.com/en/1.1/ch07s02.html#svn-ch-7-sect-2.3.6\"><citetitle>External Definitions</citetitle></ulink> in the <ulink url=\"http://svnbook.red-bean.com/\"><citetitle>Subversion Book</citetitle></ulink>."
msgstr ""

#: source/en/tsvn_app_faq.xml:633(title) 
msgid "How does TortoiseSVN handle conflicts?"
msgstr ""

#: source/en/tsvn_app_faq.xml:634(para) 
msgid "Imagine you check out revision 24 of a file and started editing it. In the meantime, someone else committed revision 25, and shortly after that revision 26. You tell TortoiseSVN to update your file now, and Subversion will try to incorporate all the changes between revision 24 and 26 into your local file."
msgstr ""

#: source/en/tsvn_app_faq.xml:642(para) 
msgid "But if the changes made between 24 and 26 were too close to or even overlap with the changes you have made, Subversion detects a conflict and creates conflict markers in the file. You then have to resolve these conflicts yourself. Read <xref linkend=\"tsvn-DUG-conflicts\"/> to find out more."
msgstr ""

#: source/en/tsvn_app_faq.xml:652(title) 
msgid "I tried to commit my changes and got a message telling me my working copy is out-of-date"
msgstr ""

#: source/en/tsvn_app_faq.xml:656(para) 
msgid "That means you need to use the <menuchoice><guimenuitem>Update</guimenuitem></menuchoice> command to update your working copy to the same level as the repository."
msgstr ""

#: source/en/tsvn_app_faq.xml:663(para) 
msgid "It may not be obvious why you need to do this, especially if you <emphasis>know</emphasis> the repository has not changed. The answer is simply that your working copy is not completely updated by a commit.Only changed files and folders get updated automatically. Consider this example on a newly created repository: <screen>\nAdd Folder in revision 1\nAdd File1 and File2 in revision 2\nModify File1 and commit in revision 3\n</screen> Now the repository is at revision 3, but in your working copy the revisions look like this: <screen>\nFolder       : revision 1\nFolder/File1 : revision 3\nFolder/File2 : revision 2\n</screen> Now if you modify File2 and try to commit, it fails. The client tells the repository that File2 is at revision 2 with local modifications, but the repository is already at revision 3. If you then do an update, File2 will be at revision 3 as well (and of course your local changes will still be there)."
msgstr ""

#: source/en/tsvn_app_faq.xml:687(para) 
msgid "The same thing may happen if you try to create a branch or tag. The answer is always the same: If your working copy is out-of-date, update it!"
msgstr ""

#: source/en/tsvn_app_faq.xml:698(title) 
msgid "Misc Questions"
msgstr ""

#: source/en/tsvn_app_faq.xml:700(title) 
msgid "TortoiseSVN seems very slow on big directories"
msgstr ""

#: source/en/tsvn_app_faq.xml:701(para) 
msgid "To show you the file and folder icon overlays TortoiseSVN must fetch the status each time you open such a folder in the explorer. This takes usually only a few seconds, but can take much longer if you have either a slow harddisk or a very big directory."
msgstr ""

#: source/en/tsvn_app_faq.xml:707(para) 
msgid "Note: usually it's only very slow the first time you open a versioned folder. If you browse the same directory later again it's much faster due to internal caching."
msgstr ""

#: source/en/tsvn_app_faq.xml:712(para) 
msgid "You can try to speed things up by:"
msgstr ""

#: source/en/tsvn_app_faq.xml:717(para) 
msgid "To speed up browsing in the explorer you should first turn off the recursive overlays. Go to the settings dialog and uncheck <guilabel>Recurse into folders to fetch the status</guilabel>. This will tell TortoiseSVN not to scan subfolders."
msgstr ""

#: source/en/tsvn_app_faq.xml:726(para) 
msgid "Whenever the <emphasis>last modified time</emphasis> of a file changed, TortoiseSVN needs to do a complete diff (!) of that file to find out if it has changed. If you often change a file, undo the changes and save the file again you'll encounter a slowdown in browsing. A fresh checkout of your working copy would solve that problem."
msgstr ""

#: source/en/tsvn_app_faq.xml:737(para) 
msgid "There are several Virus scanners around that interfere with TortoiseSVN. Most of the time they lock files inside the <filename>.svn</filename> Status directory, which can cause TortoiseSVN to hang or to become very slow. Sometimes you might even get an <emphasis>Access Denied</emphasis> error."
msgstr ""

#: source/en/tsvn_app_faq.xml:745(para) 
msgid "Try to configure your virus scanner so that it ignores <filename>.svn</filename> directories."
msgstr ""

#: source/en/tsvn_app_faq.xml:749(para) 
msgid "Virus scanners that are known to behave badly are: McAfee, Norton Antivirus, ..."
msgstr ""

#: source/en/tsvn_app_faq.xml:761(para) source/en/tsvn_app_faq.xml:786(para) 
msgid "Select <command>Run</command> from the start menu"
msgstr ""

#: source/en/tsvn_app_faq.xml:767(para) 
msgid "Type <command>regsvr32 /u %windir%\\system32\\zipfldr.dll</command> at the prompt and click ok"
msgstr ""

#: source/en/tsvn_app_faq.xml:774(para) 
msgid "The change will take effect immediately, but you may have to restart Windows for all traces of the built-in ZIP support to disappear."
msgstr ""

#: source/en/tsvn_app_faq.xml:792(para) 
msgid "Type <command>regsvr32 %windir%\\system32\\zipfldr.dll </command> at the prompt and click ok"
msgstr ""

#: source/en/tsvn_app_faq.xml:799(para) 
msgid "The change will take effect immediately, but you may have to restart Windows for all features of the built-in ZIP support to be available."
msgstr ""

#: source/en/tsvn_app_faq.xml:755(para) 
msgid "If you're working on Windows XP then you can also disable the <emphasis>zipfolders</emphasis>. This will also increase the browsing speed. <placeholder-1/> If, at any time, you wish to re-enable Windows XP's built-in ZIP support, just follow these steps: <placeholder-2/>"
msgstr ""

#: source/en/tsvn_app_faq.xml:814(title) 
msgid "TortoiseSVN doesn't work with VS.NET web projects?"
msgstr ""

#: source/en/tsvn_app_faq.xml:816(primary) 
msgid "VS.NET"
msgstr ""

#: source/en/tsvn_app_faq.xml:818(para) 
msgid "VS.NET when used with web projects can't handle the <filename>.svn</filename> folders Subversion uses to store its internal information. This is <emphasis>not</emphasis> a bug in Subversion. The bug is in VS.NET and the frontpage extensions it uses. Even though you might argue that Windows can't handle such foldernames, it's not correct. Windows can handle such folders very well, you just can't create them with the explorer."
msgstr ""

#: source/en/tsvn_app_faq.xml:828(para) 
msgid "However, this bug applies only when you use web projects, which is not the same as ASP.NET projects. Usually, when you want to create an ASP.NET project, you choose to create a web project. But you can create or convert an ASP.NET project as a class project. With some minor tweaking, you won't notice the difference, and you then can use TortoiseSVN and SVN with <filename>.svn</filename> folders without problems."
msgstr ""

#: source/en/tsvn_app_faq.xml:838(para) 
msgid "There is a really good blog post that helps you to convert your ASP.NET web projects to ASP.NET class project. You can find it <ulink url=\"http://www.pluralsight.com/fritz/Samples/aspdotnet_without_web_projects.htm\"><citetitle>here</citetitle></ulink>. If you follow those instructions, you'll have a VS.NET working with ASP.NET projects and Subversion without troubles."
msgstr ""

#: source/en/tsvn_app_faq.xml:848(para) 
msgid "Alternatively, upgrade your copy of VS.NET. The bug has been fixed in VS.NET2005, so it no longer has this problem."
msgstr ""

#: source/en/tsvn_app_faq.xml:858(term) 
msgid "You need to fix this in Subversion!"
msgstr ""

#: source/en/tsvn_app_faq.xml:860(para) 
msgid "No, we don't. It's a bug in VS.NET and not in Subversion. So the bug has to be fixed there. In fact in VS.NET2005 it has been fixed, so if you can upgrade VS.NET, the problem goes away."
msgstr ""

#: source/en/tsvn_app_faq.xml:869(term) 
msgid "Why not make the foldername configurable?"
msgstr ""

#: source/en/tsvn_app_faq.xml:871(para) 
msgid "There are many reasons <emphasis>not</emphasis> to do that. It would require major changes to the existing sourcecode, it would make the interaction of different Subversion clients very hard if not impossible and it would lead to confusion among users."
msgstr ""

#: source/en/tsvn_app_faq.xml:879(para) 
msgid "There are more reasons, but they are very technical and don't belong in this FAQ."
msgstr ""

#: source/en/tsvn_app_faq.xml:886(term) 
msgid "Then just create a special version of TortoiseSVN which uses a different foldername, and all problems are gone!"
msgstr ""

#: source/en/tsvn_app_faq.xml:892(para) 
msgid "No, we won't. <emphasis>Your</emphasis> problems might be gone, but all others who are using Subversion and TortoiseSVN would get into troubles if we did that."
msgstr ""

#: source/en/tsvn_app_faq.xml:898(para) 
msgid "One of the big advantages in using this folder name is that it is universal. i.e. you can use the same working copy from your Linux box and from your Windows box. Very useful if you have a dual boot computer and don't want to have two working copies for each OS you boot."
msgstr ""

#: source/en/tsvn_app_faq.xml:909(term) 
msgid "But I can't use TortoiseSVN if that's not fixed!"
msgstr ""

#: source/en/tsvn_app_faq.xml:911(para) 
msgid "Then don't use it! Nobody forces you to use our product. If you really want to use it, then you could compile yourself a special version using a different foldername. After all, both Subversion and TortoiseSVN are open source."
msgstr ""

#: source/en/tsvn_app_faq.xml:852(para) 
msgid "If you still want to use TortoiseSVN with web projects, these are the questions we face every few weeks and here are the answers once and for all: <placeholder-1/>"
msgstr ""

#: source/en/tsvn_app_faq.xml:922(para) 
msgid "But you're not completely lost in this case. Usually a few days after each official release of TortoiseSVN some people upload an installer for TortoiseSVN which is specially compiled to use <filename>_svn</filename> instead of the default <filename>.svn</filename> foldername. You can use that version then. Just be aware that we don't support that version at all!"
msgstr ""

#: source/en/tsvn_app_faq.xml:932(title) 
msgid "Does TortoiseSVN support SSH?"
msgstr ""

#: source/en/tsvn_app_faq.xml:933(para) 
msgid "TortoiseSVN uses Subversion. And Subversion supports SSH <systemitem class=\"url\">svn+ssh://</systemitem> (repository reachable via svnserve). If you don't want to use the svnserve server but Apache instead (which I would recommend!) then Subversion supports secure connections via SSL."
msgstr ""

#: source/en/tsvn_app_faq.xml:940(para) 
msgid "A guide on how to secure your Apache server with SSL can be found in <xref linkend=\"tsvn-serversetup-apache-6\"/>"
msgstr ""

#: source/en/tsvn_app_faq.xml:944(para) 
msgid "Please have a look at the subversion book and the INSTALL file of subversion on how to use <systemitem class=\"url\">svn+ssh://</systemitem>"
msgstr ""

#: source/en/tsvn_app_faq.xml:951(title) 
msgid "Can I get the project revision number into my project?"
msgstr ""

#: source/en/tsvn_app_faq.xml:952(para) 
msgid "If you want the revision number in your program version number you need an additional tool to do that. You can find the tool <literal>SubWCRev.exe</literal> on the download page on our website or in your TortoiseSVN Folder under <filename>bin</filename>."
msgstr ""

#: source/en/tsvn_app_faq.xml:965(term) 
msgid "$WCREV$"
msgstr ""

#: source/en/tsvn_app_faq.xml:966(listitem) 
msgid "This string will be replaced by the revision number of your working copy."
msgstr ""

#: source/en/tsvn_app_faq.xml:972(term) 
msgid "$WCMODS?Modified:Not modified$"
msgstr ""

#: source/en/tsvn_app_faq.xml:978(literal) 
msgid "Modified"
msgstr ""

#: source/en/tsvn_app_faq.xml:979(literal) 
msgid "Not modified"
msgstr ""

#: source/en/tsvn_app_faq.xml:973(listitem) 
msgid "If you have local modifications, the string between Question mark and colon will be inserted. If you have no local modifications, the string between colon and dollar sign will be inserted. In our example above <placeholder-1/> or <placeholder-2/>."
msgstr ""

#: source/en/tsvn_app_faq.xml:983(term) 
msgid "$WCDATE$"
msgstr ""

#: source/en/tsvn_app_faq.xml:984(listitem) 
msgid "Will be replaced by the date of the highest revision in your working copy."
msgstr ""

#: source/en/tsvn_app_faq.xml:959(para) 
msgid "This tool traverses your whole working copy for the most recent revision. Once that revision is found, it replaces all occurrences of the following strings: <placeholder-1/>"
msgstr ""

#: source/en/tsvn_app_faq.xml:991(para) 
msgid "As an example, have a look at the file <filename>version.in</filename> in the <ulink url=\"http://svn.collab.net/repos/tortoisesvn/trunk/src/version.in\"><citetitle>TortoiseSVN source tree</citetitle></ulink>. This file is used in TortoiseSVN and its resource files. The SubWCRev.exe tool is called from the build script like this: <screen>\nSubWCRev.exe path\\to\\working\\copy version.in version.h\n</screen> This creates a new file <filename>version.h</filename> with all the strings above replaced with the values of the working copy. The <filename>version.h</filename> file is then used in the project itself and included in the resource files for the version information."
msgstr ""

#: source/en/tsvn_app_faq.xml:1010(title) 
msgid "Can I lose data, when I use TortoiseSVN?"
msgstr ""

#: source/en/tsvn_app_faq.xml:1011(para) 
msgid "TortoiseSVN uses Subversion. Nuff said :-)"
msgstr ""

#: source/en/tsvn_app_faq.xml:1014(para) 
msgid "Seriously - No! Read the Subversion pages. You can screw up your working copy any way you like, but if you commit your data regularly, you can always revert to a functional state. Just remember that TortoiseSVN was not made to protect you against stupidity (e.g. Format C:)."
msgstr ""

#: source/en/tsvn_app_faq.xml:1021(para) 
msgid "You can only lose your data if you throw your computer out of the window, format your harddrive, nail your harddrive to a wall..."
msgstr ""

#: source/en/tsvn_app_faq.xml:1028(title) 
msgid "I'm looking for an external diff or merge tool"
msgstr ""

#: source/en/tsvn_app_faq.xml:1029(para) 
msgid "Take a look at <xref linkend=\"tsvn-DUG-diff-tools\"/>."
msgstr ""

#: source/en/tsvn_app_faq.xml:1035(title) 
msgid "What are the hidden registry settings?"
msgstr ""

#: source/en/tsvn_app_faq.xml:1037(primary) 
msgid "Registry"
msgstr ""

#: source/en/tsvn_app_faq.xml:1047(term) 
msgid "HKCU\\Software\\TortoiseSVN\\Debug"
msgstr ""

#: source/en/tsvn_app_faq.xml:1049(para) 
msgid "Set this value to 1 for TortoiseSVN to show you the parameters it gets from the shell extension part."
msgstr ""

#: source/en/tsvn_app_faq.xml:1056(term) 
msgid "HKCU\\Software\\TortoiseSVN\\OwnerdrawnMenus"
msgstr ""

#: source/en/tsvn_app_faq.xml:1058(para) 
msgid "Set this value to 0 if you don't want TortoiseSVN to use ownerdraw menu items in the shell context menu. This helps if you use something else than the windows explorer or if you get problems with the context menu showing up."
msgstr ""

#: source/en/tsvn_app_faq.xml:1065(para) 
msgid "Set this value to 2 if you don't want TortoiseSVN to use icons in the context menu at all. With this value set to 2 the context menu is text only."
msgstr ""

#: source/en/tsvn_app_faq.xml:1073(term) 
msgid "HKCU\\Software\\TortoiseSVN\\BlockStatus"
msgstr ""

#: source/en/tsvn_app_faq.xml:1075(para) 
msgid "If you don't want the explorer to update the status overlays while another TortoiseSVN command is running (e.g. an update, commit, ...) then set this value to 1."
msgstr ""

#: source/en/tsvn_app_faq.xml:1039(para) 
msgid "There are some registry settings for TortoiseSVN which aren't available through the settings dialog. These registry settings usually are for debugging purposes or very special occasions. You can set those with the registry editor <command>regedt32</command>. <placeholder-1/>"
msgstr ""

#: source/en/tsvn_app_faq.xml:1084(para) 
msgid "Please don't mess with those and any other registry setting if you don't know <emphasis>exactly</emphasis> what you're doing!"
msgstr ""

#: source/en/tsvn_app_faq.xml:1090(title) 
msgid "I love TortoiseSVN, how can I do something for the developers?"
msgstr ""

#: source/en/tsvn_app_faq.xml:1091(para) 
msgid "Thanks for asking!"
msgstr ""

#: source/en/tsvn_app_automation.xml:3(title) 
msgid "Automating TortoiseSVN"
msgstr ""

#: source/en/tsvn_app_automation.xml:5(para) 
msgid "Since all commands for TortoiseSVN are controlled through command line parameters, you can automate it with batch scripts or start specific commands and dialogs from other programs (e.g. your favourite text editor)."
msgstr ""

#: source/en/tsvn_app_automation.xml:10(para) 
msgid "For most use cases you might want to use the official Subversion command line client to do automation. But if you want GUI dialogs for still required user input or progress information you can use TortoiseSVN."
msgstr ""

#: source/en/tsvn_app_automation.xml:20(title) 
msgid "TortoiseSVN Commands"
msgstr ""

#: source/en/tsvn_app_automation.xml:22(primary) 
msgid "automation"
msgstr ""

#: source/en/tsvn_app_automation.xml:25(primary) 
msgid "command line"
msgstr ""

#: source/en/tsvn_app_automation.xml:27(para) 
msgid "All commands are specified with the parameter <option>/command:abcd</option> where <literal>abcd</literal> is the required command name. Most of these commands need at least one path argument, which is given with <option>/path:\"some\\path\"</option>. In the following table the command refers to the <option>/command:abcd</option> parameter and the path refers to the <option>/path:\"some\\path\"</option> parameter."
msgstr ""

#: source/en/tsvn_app_automation.xml:35(para) 
msgid "Since some of the commands can take a list of target paths (e.g. committing several specific files) the <option>/path</option> parameter can take several paths, separated by a <literal>*</literal> character."
msgstr ""

#: source/en/tsvn_app_automation.xml:40(para) 
msgid "Since TortoiseSVN uses temporary files to pass multiple arguments between the shell extension and the main program, you <emphasis>must</emphasis> add the <option>/notempfile</option> parameter! If you don't, the command won't work and the file you pass with the <option>/path</option> parameter will be deleted!"
msgstr ""

#: source/en/tsvn_app_automation.xml:47(para) 
msgid "The progress dialog which is used for commits, updates and many more commands usually stays open after the command has finished until the user presses the <guibutton>OK</guibutton> button. This can be changed by checking the corresponding option in the settings dialog. But using that setting will close the progress dialog, no matter if you start the command from your batchfile or from the TortoiseSVN context menu."
msgstr ""

#: source/en/tsvn_app_automation.xml:60(para) 
msgid "<option>/closeonend:0</option> don't close the dialog automatically"
msgstr ""

#: source/en/tsvn_app_automation.xml:61(para) 
msgid "<option>/closeonend:1</option> auto close if no errors"
msgstr ""

#: source/en/tsvn_app_automation.xml:62(para) 
msgid "<option>/closeonend:2</option> auto close if no conflicts"
msgstr ""

#: source/en/tsvn_app_automation.xml:63(para) 
msgid "<option>/closeonend:3</option> auto close if no merges"
msgstr ""

#: source/en/tsvn_app_automation.xml:55(para) 
msgid "To close the progress dialog at the end of a command automatically without using the permanent setting you can pass the <option>/closeonend</option> parameter. <placeholder-1/>"
msgstr ""

#: source/en/tsvn_app_automation.xml:68(title) 
msgid "List of available command line options"
msgstr ""

#: source/en/tsvn_app_automation.xml:74(entry) 
msgid "Command"
msgstr ""

#: source/en/tsvn_app_automation.xml:75(entry) 
msgid "Description"
msgstr ""

#: source/en/tsvn_app_automation.xml:80(entry) 
msgid "about"
msgstr ""

#: source/en/tsvn_app_automation.xml:81(entry) 
msgid "Shows the About-dialog. This is also shown if no command is given."
msgstr ""

#: source/en/tsvn_app_automation.xml:92(option) 
msgid "/revstart:xxx"
msgstr ""

#: source/en/tsvn_app_automation.xml:93(option) 
msgid "/revend:xxx"
msgstr ""

#: source/en/tsvn_app_automation.xml:94(option) 
msgid "/strict"
msgstr ""

#: source/en/tsvn_app_automation.xml:88(entry) 
msgid "Opens the log dialog. The path specifies the file or folder for which the log should be shown. Three additional options can be set: <placeholder-1/>, <placeholder-2/> and <placeholder-3/>"
msgstr ""

#: source/en/tsvn_app_automation.xml:100(option) source/en/tsvn_app_automation.xml:115(option) source/en/tsvn_app_automation.xml:133(option) source/en/tsvn_app_automation.xml:141(option) source/en/tsvn_app_automation.xml:149(option) source/en/tsvn_app_automation.xml:156(option) source/en/tsvn_app_automation.xml:165(option) source/en/tsvn_app_automation.xml:178(option) source/en/tsvn_app_automation.xml:179(option) source/en/tsvn_app_automation.xml:181(option) source/en/tsvn_app_automation.xml:195(option) source/en/tsvn_app_automation.xml:208(option) source/en/tsvn_app_automation.xml:215(option) source/en/tsvn_app_automation.xml:223(option) source/en/tsvn_app_automation.xml:229(option) source/en/tsvn_app_automation.xml:237(option) source/en/tsvn_app_automation.xml:243(option) source/en/tsvn_app_automation.xml:265(option) source/en/tsvn_app_automation.xml:265(option) source/en/tsvn_app_automation.xml:276(option) source/en/tsvn_app_automation.xml:285(option) source/en/tsvn_app_automation.xml:292(option) source/en/tsvn_app_automation.xml:302(option) source/en/tsvn_app_automation.xml:309(option) 
msgid "/path"
msgstr ""

#: source/en/tsvn_app_automation.xml:101(option) 
msgid "/url"
msgstr ""

#: source/en/tsvn_app_automation.xml:99(entry) 
msgid "Opens the checkout dialog. The <placeholder-1/> specifies the target directory and the <placeholder-2/> specifies the URL to checkout from."
msgstr ""

#: source/en/tsvn_app_automation.xml:107(entry) 
msgid "Opens the import dialog. The path specifies the directory with the data to import."
msgstr ""

#: source/en/tsvn_app_automation.xml:116(option) 
msgid "/rev"
msgstr ""

#: source/en/tsvn_app_automation.xml:114(entry) 
msgid "Updates the working copy in <placeholder-1/> to HEAD. If the option <placeholder-2/> is given then a dialog is shown to ask the user to which revision the update should go."
msgstr ""

#: source/en/tsvn_app_automation.xml:123(entry) 
msgid "Opens the commit dialog. The path specifies the target directory or the list of files to commit. You can also specify the /logmsg switch to pass a predefined log message to the commit dialog."
msgstr ""

#: source/en/tsvn_app_automation.xml:132(entry) 
msgid "Adds the files in <placeholder-1/> to version control."
msgstr ""

#: source/en/tsvn_app_automation.xml:139(entry) 
msgid "Reverts local modifications of a working copy. The <placeholder-1/> tells which items to revert."
msgstr ""

#: source/en/tsvn_app_automation.xml:146(entry) 
msgid "cleanup"
msgstr ""

#: source/en/tsvn_app_automation.xml:147(entry) 
msgid "Cleans up interrupted or aborted operations and unlocks the working copy in <placeholder-1/>."
msgstr ""

#: source/en/tsvn_app_automation.xml:153(entry) 
msgid "resolve"
msgstr ""

#: source/en/tsvn_app_automation.xml:157(option) 
msgid "/noquestion"
msgstr ""

#: source/en/tsvn_app_automation.xml:154(entry) 
msgid "Marks a conflicted file specified in <placeholder-1/> as resolved. If <placeholder-2/> is given, then resolving is done without asking the user first if it really should be done."
msgstr ""

#: source/en/tsvn_app_automation.xml:163(entry) 
msgid "repocreate"
msgstr ""

#: source/en/tsvn_app_automation.xml:164(entry) 
msgid "Creates a repository in <placeholder-1/>"
msgstr ""

#: source/en/tsvn_app_automation.xml:170(entry) 
msgid "Opens the switch dialog. The path specifies the target directory."
msgstr ""

#: source/en/tsvn_app_automation.xml:177(entry) 
msgid "Exports the working copy in <placeholder-1/> to another directory. If the <placeholder-2/> points to an unversioned directory, a dialog will ask for an URL to export to the dir in <placeholder-3/>."
msgstr ""

#: source/en/tsvn_app_automation.xml:186(entry) 
msgid "Opens the merge dialog. The path specifies the target directory."
msgstr ""

#: source/en/tsvn_app_automation.xml:193(entry) 
msgid "Brings up the branch/tag dialog. The <placeholder-1/> is the working copy to branch/tag from."
msgstr ""

#: source/en/tsvn_app_automation.xml:201(entry) 
msgid "Opens the settings dialog."
msgstr ""

#: source/en/tsvn_app_automation.xml:207(entry) 
msgid "Removes the file(s) in <placeholder-1/> from version control."
msgstr ""

#: source/en/tsvn_app_automation.xml:214(entry) 
msgid "Renames the file in <placeholder-1/>. The new name for the file is asked with a dialog."
msgstr ""

#: source/en/tsvn_app_automation.xml:225(option) source/en/tsvn_app_automation.xml:227(option) 
msgid "/path2"
msgstr ""

#: source/en/tsvn_app_automation.xml:221(entry) 
msgid "Starts the external diff program specified in the TortoiseSVN settings. The <placeholder-1/> specifies the first file. If the option <placeholder-2/> is set, then the diff program is started with those two files. If <placeholder-3/> is ommitted, then the diff is done between the file in <placeholder-4/> and its BASE."
msgstr ""

#: source/en/tsvn_app_automation.xml:233(entry) 
msgid "conflicteditor"
msgstr ""

#: source/en/tsvn_app_automation.xml:234(entry) 
msgid "Starts the conflicteditor specified in the TortoiseSVN settings with the correct files for the conflicted file in <placeholder-1/>."
msgstr ""

#: source/en/tsvn_app_automation.xml:242(entry) 
msgid "Opens the relocate dialog. The <placeholder-1/> specifies the working copy path to relocate."
msgstr ""

#: source/en/tsvn_app_automation.xml:248(entry) 
msgid "help"
msgstr ""

#: source/en/tsvn_app_automation.xml:249(entry) 
msgid "Opens the help file."
msgstr ""

#: source/en/tsvn_app_automation.xml:254(entry) 
msgid "repostatus"
msgstr ""

#: source/en/tsvn_app_automation.xml:255(entry) 
msgid "Opens the check-for-modifications dialog. The path specifies the working copy directory."
msgstr ""

#: source/en/tsvn_app_automation.xml:267(option) source/en/tsvn_app_automation.xml:269(option) 
msgid "/rev:xxx"
msgstr ""

#: source/en/tsvn_app_automation.xml:262(entry) 
msgid "Starts the repository browser dialog, pointing to the URL of the working copy given in <placeholder-1/> or <placeholder-2/> points directly to an URL. An additional option <placeholder-3/> can be used to specify the revision which the repository browser should show. If the <placeholder-4/> is omitted, it defaults to HEAD."
msgstr ""

#: source/en/tsvn_app_automation.xml:275(entry) 
msgid "Adds all targes in <placeholder-1/> to the ignore list, i.e. adds the svn:ignored property to those files."
msgstr ""

#: source/en/tsvn_app_automation.xml:283(entry) 
msgid "Opens the blame dialog for the file specified in <placeholder-1/>."
msgstr ""

#: source/en/tsvn_app_automation.xml:289(entry) 
msgid "cat"
msgstr ""

#: source/en/tsvn_app_automation.xml:293(option) 
msgid "/savepath:path"
msgstr ""

#: source/en/tsvn_app_automation.xml:294(option) 
msgid "/revision:xxx"
msgstr ""

#: source/en/tsvn_app_automation.xml:290(entry) 
msgid "Saves a file from an URL or working copy path given in <placeholder-1/> to the location given in <placeholder-2/>. The revision is given in <placeholder-3/>. This can be used to get a file with a specific revision."
msgstr ""

#: source/en/tsvn_app_automation.xml:299(entry) 
msgid "createpatch"
msgstr ""

#: source/en/tsvn_app_automation.xml:300(entry) 
msgid "Creates a patch file for the path given in <placeholder-1/>."
msgstr ""

#: source/en/tsvn_app_automation.xml:306(entry) 
msgid "revisiongraph"
msgstr ""

#: source/en/tsvn_app_automation.xml:307(entry) 
msgid "Shows the revision graph for the path given in <placeholder-1/>."
msgstr ""

#: source/en/tsvn_app_automation.xml:316(para) 
msgid "Examples (which should be entered on one line): <screen>\nTortoiseProc.exe /command:commit /path:\"c:\\svn_wc\\file1.txt*c:\\svn_wc\\file2.txt\"\n                 /logmsg:\"test log message\" /notempfile /closeonend\n\nTortoiseProc.exe /command:update /path:\"c:\\svn_wc\\\" /notempfile /closeonend\n\nTortoiseProc.exe /command:log /path:\"c:\\svn_wc\\file1.txt\"\n                 /revstart:50 /revend:60 /notempfile /closeonend\n</screen>"
msgstr ""

#: source/en/tortoisesvn.xml:5(subtitle) 
msgid "A Subversion client for Windows"
msgstr ""

#: source/en/tortoisesvn.xml:7(edition) source/en/tortoisemerge.xml:8(edition) 
msgid "First"
msgstr ""

#: source/en/tortoisesvn.xml:10(firstname) source/en/tortoisemerge.xml:11(firstname) 
msgid "Stefan"
msgstr ""

#: source/en/tortoisesvn.xml:11(surname) source/en/tortoisemerge.xml:12(surname) 
msgid "KÃ¼ng"
msgstr ""

#: source/en/tortoisesvn.xml:14(firstname) source/en/tortoisemerge.xml:15(firstname) 
msgid "LÃ¼bbe"
msgstr ""

#: source/en/tortoisesvn.xml:15(surname) source/en/tortoisemerge.xml:16(surname) 
msgid "Onken"
msgstr ""

#: source/en/tortoisesvn.xml:18(firstname) 
msgid "Simon"
msgstr ""

#: source/en/tortoisesvn.xml:19(surname) 
msgid "Large"
msgstr ""

#: source/en/tortoisemerge.xml:4(title) 
msgid "TortoiseMerge"
msgstr ""

#: source/en/tortoisemerge.xml:6(subtitle) 
msgid "A diff/merge tool for Windows"
msgstr ""

#: source/en/tme_glossary.xml:3(title) 
msgid "Glossary"
msgstr ""

#: source/en/tme_glossary.xml:7(term) 
msgid "Add"
msgstr ""

#: source/en/tme_glossary.xml:9(para) 
msgid "An <command>svn</command> command that is used to add a file or directory to a repository."
msgstr ""

#: source/en/tme_ch02.xml:3(title) 
msgid "Using TortoiseMerge"
msgstr ""

#: source/en/tme_ch02.xml:14(title) 
msgid "Open Files"
msgstr ""

#: source/en/tme_ch02.xml:16(para) 
msgid "When you start TortoiseMerge without any command line switches then you have to open the files manually, using <menuchoice><guimenu>File</guimenu><guimenuitem>Open</guimenuitem></menuchoice>."
msgstr ""

#: source/en/tme_ch02.xml:25(title) 
msgid "The Open Dialog"
msgstr ""

#: source/en/tme_ch02.xml:28(para) 
msgid "The first thing you have to do is to decide whether you just want to compare/merge files, or whether you want to apply a patchfile. Depending on what you choose, the corresponding edit boxes and browse buttons are activated."
msgstr ""

#: source/en/tme_ch02.xml:36(title) 
msgid "Viewing / Merging"
msgstr ""

#: source/en/tme_ch02.xml:37(para) 
msgid "If you want to compare/merge files you have to set at least two of the three possible paths for <literal>Base</literal>, <literal>Yours</literal> and <literal>Theirs</literal>. If you select only two files, then TortoiseMerge will show you the differences between those two files, either in a two pane view or in a one pane view. You can switch between those two views with the menu command <menuchoice><guimenu>View</guimenu><guimenuitem>Oneway Diff</guimenuitem></menuchoice>"
msgstr ""

#: source/en/tme_ch02.xml:51(title) 
msgid "One Pane View"
msgstr ""

#: source/en/tme_ch02.xml:55(title) 
msgid "Two Pane View"
msgstr ""

#: source/en/tme_ch02.xml:58(para) 
msgid "If you want to compare/merge three files, TortoiseMerge will show you the differences in a three pane view. This view is also used if you need to resolve conflicted files."
msgstr ""

#: source/en/tme_ch02.xml:64(title) 
msgid "Three Pane View"
msgstr ""

#: source/en/tme_ch02.xml:67(para) 
msgid "The left pane shows you the differences between <literal>Their</literal> file and the <literal>Base</literal> file, while the right pane shows you the differences between <literal>Your</literal> file and the <literal>Base</literal> file. The bottom pane shows you the result of merging <literal>Base</literal>, <literal>Yours</literal> and <literal>Theirs</literal> with possible conflicts."
msgstr ""

#: source/en/tme_ch02.xml:76(para) 
msgid "The relationships between the three files are explained in the diagram below:"
msgstr ""

#: source/en/tme_ch02.xml:81(title) source/en/tme_ch01.xml:40(title) 
msgid "File Conflict"
msgstr ""

#: source/en/tme_ch02.xml:84(para) 
msgid "The base file represents the oldest version of a file, from where <literal>You</literal> and <literal>They</literal> start making changes. <literal>Yours</literal> represents the base file with all the changes <emphasis>you</emphasis> made, and <literal>Theirs</literal> is the file with all the changes <emphasis>someone else</emphasis> made to the file."
msgstr ""

#: source/en/tme_ch02.xml:94(title) 
msgid "Applying Patches"
msgstr ""

#: source/en/tme_ch02.xml:95(para) 
msgid "If you want to apply a patchfile you have to set both the path to the patchfile itself and the path to the folder where the patchfile should be applied."
msgstr ""

#: source/en/tme_ch02.xml:101(para) 
msgid "Currently, only patchfiles in <emphasis>Unified Diff Format</emphasis> are supported. And only files which were generated from a Subversion working copy. Other formats like patchfiles generated by CVS are currently not supported!"
msgstr ""

#: source/en/tme_ch02.xml:114(title) 
msgid "Patch Filelist"
msgstr ""

#: source/en/tme_ch02.xml:109(para) 
msgid "If TortoiseMerge is able to parse the patchfile it will show you a small window with all the files which have changes according to the patchfile. <placeholder-1/> If the filename is shown in black, then the patch can be applied without any problems. That means the file is not outdated according to the patch. However, if the filename is shown in red, then the patch can't get applied directly because you already changed that file."
msgstr ""

#: source/en/tme_ch02.xml:123(para) 
msgid "But don't worry. If you're working with Subversion you can retrieve an older version of the file and resolve the conflict. In fact, TortoiseMerge automatically tries to get that older version of the file and then shows you the diff between <literal>Base</literal> (the older version of the file), <literal>Yours</literal> (your file as it is currently in your working copy) and <literal>Theirs</literal> (the older version of the file with the patch already applied). Then you can resolve possible conflicts manually."
msgstr ""

#: source/en/tme_ch02.xml:134(para) 
msgid "Depending on whether TortoiseMerge can apply the patch directly or by fetching an older version of the file first, it shows you a two pane view (patch can be applied directly) or a three pane view (older version of file fetched)."
msgstr ""

#: source/en/tme_ch02.xml:147(title) 
msgid "Buttons and Other Controls"
msgstr ""

#: source/en/tme_ch02.xml:153(para) 
msgid "<guibutton>Open</guibutton> accesses the file-open dialog. What else?"
msgstr ""

#: source/en/tme_ch02.xml:159(para) 
msgid "<guibutton>Save</guibutton> saves any changes you have made. If you have selected <guilabel>Resolve conflicted subversion status on save</guilabel> in the settings dialog, then subversion's conflict working files will be deleted automatically if all conflicts were resolved."
msgstr ""

#: source/en/tme_ch02.xml:170(para) 
msgid "<guibutton>Reload</guibutton> discards any changes you have made and reloads the original files."
msgstr ""

#: source/en/tme_ch02.xml:177(para) 
msgid "<guibutton>Show Spaces</guibutton> toggles the option to display space and tab characters as symbols so you can distinguish white space changes."
msgstr ""

#: source/en/tme_ch02.xml:184(para) 
msgid "<guibutton>Prev/Next Difference</guibutton> jumps directly to the next point where the files differ. This saves scrolling through all the unchanged parts of the file."
msgstr ""

#: source/en/tme_ch02.xml:192(para) 
msgid "<guibutton>Prev/Next Conflict</guibutton> jumps directly to the next point where the file differences are in conflict and need to be resolved."
msgstr ""

#: source/en/tme_ch02.xml:199(para) 
msgid "<guibutton>Switch View</guibutton> selects between one-pane and two-pane view. Disabled in 3-pane view."
msgstr ""

#: source/en/tme_ch02.xml:206(para) 
msgid "<guibutton>Settings</guibutton> takes you to TortoiseMerge's settings dialog."
msgstr ""

#: source/en/tme_ch02.xml:148(para) 
msgid "Below the menu bar lies the tool bar. This provides easy access to the most commonly used tools, which are <placeholder-1/>"
msgstr ""

#: source/en/tme_ch02.xml:213(para) 
msgid "On the left side of the window is a locator bar. This provides a quick visual reference as to where the changes lie within the file. The bar has three columns. The left column refers to the left pane, the right column to the right pane, and the centre column to the bottom pane (if present). In one-pane view only the left column is used. The locator bar can also be used as a scroll bar to scroll all the windows simultaneously."
msgstr ""

#: source/en/tme_ch02.xml:222(para) 
msgid "Below the bottom window is the status bar. This shows the number of lines added and deleted in <literal>Theirs</literal> and <literal>Yours</literal>, and the number of unresolved conflicts remaining. The left side of the status bar is used to display hints when you hover the mouse over a control."
msgstr ""

#: source/en/tme_ch02.xml:236(title) 
msgid "Merging / Editing Conflicts"
msgstr ""

#: source/en/tme_ch02.xml:237(para) 
msgid "TortoiseMerge not only <emphasis>shows</emphasis> you the differences between files but also let's you resolve conflicts or apply changes."
msgstr ""

#: source/en/tme_ch02.xml:241(para) 
msgid "If you're in two pane view, then you can only edit the file in the right pane (<literal>Yours</literal>). To apply changes made in the left file (<literal>Theirs</literal>), <action>right-click</action> on the changed lines and select <menuchoice><guimenuitem>Use text block from <quote>theirs</quote></guimenuitem></menuchoice>. Then the changes from the left file are added to the right file."
msgstr ""

#: source/en/tme_ch02.xml:251(para) 
msgid "If you're in three pane view (sometimes called <emphasis>merge view</emphasis>) you can only edit the file in the bottom view (<literal>Merged</literal>). As in two pane view, you can <action>right-click</action> on conflicted lines and either select <menuchoice><guimenuitem>Use text block from <quote>theirs</quote></guimenuitem></menuchoice> or <menuchoice><guimenuitem>Use text block from <quote>yours</quote></guimenuitem></menuchoice>. In addition, if you want <emphasis>both</emphasis> blocks, you can select <menuchoice><guimenuitem> Use text block from <quote>yours</quote> before <quote>theirs</quote></guimenuitem></menuchoice> or <menuchoice><guimenuitem> Use text block from <quote>theirs</quote> before <quote>yours</quote></guimenuitem></menuchoice>. According to the command you've selected, the changes are used in the resulting <literal>Merged</literal> file."
msgstr ""

#: source/en/tme_ch02.xml:282(para) 
msgid "Sometimes the conflict is too difficult to resolve by simply picking <literal>Theirs</literal> and <literal>Yours</literal> and it requires hand editing. TortoiseMerge allows you to do all the easy changes visually first and then save the file, leaving only the difficult changes to be resolved by hand-editing."
msgstr ""

#: source/en/tme_ch02.xml:290(para) 
msgid "Note that if you use TortoiseMerge on the same files again, any changes to your working copy, whether in TortoiseMerge, or by hand-editing, <emphasis>will be discarded</emphasis> and the file will appear as it did when conflict-editing first started."
msgstr ""

#: source/en/tme_ch02.xml:304(title) 
msgid "Settings"
msgstr ""

#: source/en/tme_ch02.xml:308(title) 
msgid "The Settings Main Page"
msgstr ""

#: source/en/tme_ch02.xml:312(title) 
msgid "The Settings Color Page"
msgstr ""

#: source/en/tme_ch01.xml:13(title) 
msgid "Overview"
msgstr ""

#: source/en/tme_ch01.xml:14(para) 
msgid "TortoiseMerge is a free/open-source application. It lets you see differences in text files, merge those changes and even review and apply unified diff files, often called <firstterm>patches</firstterm>."
msgstr ""

#: source/en/tme_ch01.xml:19(para) 
msgid "While working on text files, e.g. source files in your favourite programming language, or html/xml files for your documentation or website, you will often have a situation where you need to compare different versions of those files. Sometimes you get a different version from someone else, sometimes you just want to see the changes you've made."
msgstr ""

#: source/en/tme_ch01.xml:27(para) 
msgid "If you're working with a version control system (e.g. Subversion) then you sometimes get <emphasis>conflicts</emphasis> when you update your working copy. This happens if someone else changed the same parts of the file you're currently working on as you did. Then you have to resolve those conflicts manually. This is where TortoiseMerge can help you."
msgstr ""

#: source/en/tme_ch01.xml:35(para) 
msgid "The following diagram shows you the relationships between the files involved in a conflict:"
msgstr ""

#: source/en/tme_ch01.xml:43(para) 
msgid "A conflict can also occur if you try to apply an outdated patchfile. In such cases, without TortoiseMerge, you would either have to ask the person you got that patchfile from for a current version or try to apply that patchfile manually."
msgstr ""

#: source/en/tme_ch01.xml:49(para) 
msgid "But now with TortoiseMerge this isn't necessary anymore - at least not if you're working with a version control system like Subversion. TortoiseMerge parses the patchfile for the revision/version the patch was created for and automatically tries to fetch that specific version from your source-control. Then it applies the patch and lets you review both your changes to the file, and theirs. Then you can decide which changes you want to keep."
msgstr ""

#: source/en/tme_ch01.xml:65(title) 
msgid "TortoiseMerge's History"
msgstr ""

#: source/en/tme_ch01.xml:66(para) 
msgid "While working on <ulink url=\"http://tortoisesvn.tigris.org\"><citetitle>TortoiseSVN</citetitle></ulink> we found that whenever users sent in patches to enhance the project or just to fix bugs, we had a lot of work just applying those patches. And many times those patches were outdated and couldn't be applied with the command line patch tool <ulink url=\"http://unxutils.sourceforge.net/\"><citetitle>http://unxutils.sourceforge.net/</citetitle></ulink> because we were working on those files and had sometimes changed those files already."
msgstr ""

#: source/en/tme_ch01.xml:81(para) 
msgid "This was also the main reason why TortoiseSVN did not originally have a <menuchoice><guimenuitem>Create Patch</guimenuitem></menuchoice> implemented: we preferred users to send us the whole files because with those it was easier to apply patches."
msgstr ""

#: source/en/tme_ch01.xml:90(para) 
msgid "So we spent a lot of time, searching the internet for a GUI tool which could apply patchfiles, but all we found was that such a tool didn't exist. So to cut a long story short: We decided that if no-one else could provide such a tool we would have to write our own. That's when TortoiseMerge was born."
msgstr ""

#: source/en/tme_ch01.xml:97(para) 
msgid "Since TortoiseSVN already uses the Subversion library, which has a nice diffing engine built in, it was just natural to use this library instead of the GNU diff. Also it reduces the size of the executable since TortoiseSVN and TortoiseMerge can both use the same dll's."
msgstr ""

#: source/en/tme_ch00.xml:9(para) 
msgid "When working on a project, either an open-source project where several people review your code, or a commercial project where you sell a component with your sourcecode, there will be people and customers who find bugs or want to improve your project. To do that they send you patches which you have to review and decide if you want to apply them."
msgstr ""

#: source/en/tme_ch00.xml:21(para) 
msgid "Reviewing patches"
msgstr ""

#: source/en/tme_ch00.xml:26(para) 
msgid "Applying the patches"
msgstr ""

#: source/en/tme_ch00.xml:17(para) 
msgid "TortoiseMerge helps you with both those tasks: <placeholder-1/>"
msgstr ""

#: source/en/tme_ch00.xml:32(para) 
msgid "TortoiseMerge also helps you to sort out conflicted files which can occur if you're working with a source control system and others are working on the same files as you."
msgstr ""

#: source/en/tme_ch00.xml:42(title) 
msgid "TortoiseMerge is free!"
msgstr ""

#: source/en/tme_ch00.xml:43(para) 
msgid "TortoiseMerge is free. You don't have to pay for it, you can use it any way you want. It is developed under the GP license (GPL)."
msgstr ""

#: source/en/tme_ch00.xml:47(para) 
msgid "TortoiseMerge is an Open Source project. That means you have full access to the source code of this program. You can browse it on this link <ulink url=\"http://svn.collab.net/repos/tortoisesvn/\"><citetitle>http://svn.collab.net/repos/tortoisesvn/</citetitle></ulink>. The most recent version (where we're working) is located under <filename>/trunk/</filename>, the released versions are located under <filename>/tags/</filename>."
msgstr ""

#: source/en/tme_ch00.xml:72(para) 
msgid "for the hard work on TortoiseMerge"
msgstr ""

#: source/en/tme_appb.xml:3(title) source/en/tme_appb.xml:11(title) 
msgid "Command Line Parameters"
msgstr ""

#: source/en/tme_appb.xml:5(para) 
msgid "TortoiseMerge can be started with different command line parameters to load files directly at program startup."
msgstr ""

#: source/en/tme_appb.xml:14(term) 
msgid "/?"
msgstr ""

#: source/en/tme_appb.xml:16(para) 
msgid "Shows an info dialog with all possible command line parameters."
msgstr ""

#: source/en/tme_appb.xml:23(term) 
msgid "/base:\"path/to/basefile\""
msgstr ""

#: source/en/tme_appb.xml:25(para) 
msgid "load the base file"
msgstr ""

#: source/en/tme_appb.xml:31(term) 
msgid "/basename:name"
msgstr ""

#: source/en/tme_appb.xml:33(para) source/en/tme_appb.xml:49(para) source/en/tme_appb.xml:65(para) source/en/tme_appb.xml:82(para) 
msgid "Sets the string for the view title."
msgstr ""

#: source/en/tme_appb.xml:39(term) 
msgid "/theirs:\"path/to/theirfile\""
msgstr ""

#: source/en/tme_appb.xml:41(para) 
msgid "load their file"
msgstr ""

#: source/en/tme_appb.xml:47(term) 
msgid "/theirname:name"
msgstr ""

#: source/en/tme_appb.xml:55(term) 
msgid "/yours:\"path/to/yourfile\""
msgstr ""

#: source/en/tme_appb.xml:57(para) 
msgid "load your file"
msgstr ""

#: source/en/tme_appb.xml:63(term) 
msgid "/yourname:name"
msgstr ""

#: source/en/tme_appb.xml:71(term) 
msgid "/merged:\"path/to/mergedfile\""
msgstr ""

#: source/en/tme_appb.xml:73(para) 
msgid "Specifies the merged file where the result of the merge is saved to."
msgstr ""

#: source/en/tme_appb.xml:80(term) 
msgid "/mergedname:name"
msgstr ""

#: source/en/tme_appb.xml:88(term) 
msgid "/diff:\"path/to/unified_diff_file\""
msgstr ""

#: source/en/tme_appb.xml:90(para) 
msgid "Specifies the unified diff file (patchfile)."
msgstr ""

#: source/en/tme_appb.xml:96(term) 
msgid "/patchpath:\"path/to/patchfolder\""
msgstr ""

#: source/en/tme_appb.xml:98(para) 
msgid "Specifies the path to the folder where the patchfile is applied to."
msgstr ""

#: source/en/tme_appb.xml:105(term) 
msgid "/oneway"
msgstr ""

#: source/en/tme_appb.xml:107(para) 
msgid "If set, TortoiseMerge starts with the one-pane-view."
msgstr ""

#: source/en/tme_appa.xml:3(title) 
msgid "keyboard shortcuts"
msgstr ""

#: source/en/tme_appa.xml:5(para) 
msgid "List of keyboard shortcuts and commands."
msgstr ""

#: source/en/tme_appa.xml:10(title) 
msgid "Keyboard shortcuts"
msgstr ""

#: source/en/tme_appa.xml:13(term) 
msgid "Ctrl-Q"
msgstr ""

#: source/en/tme_appa.xml:15(para) 
msgid "Quit the program"
msgstr ""

#: source/en/tme_appa.xml:21(term) 
msgid "Ctrl-C"
msgstr ""

#: source/en/tme_appa.xml:23(para) 
msgid "Copy the selected line(s) to the clipboard"
msgstr ""

#: source/en/tme_appa.xml:29(term) 
msgid "Ctrl-F"
msgstr ""

#: source/en/tme_appa.xml:31(para) 
msgid "Open the Find dialog for text searches"
msgstr ""

#: source/en/tme_appa.xml:37(term) 
msgid "Ctrl-O"
msgstr ""

#: source/en/tme_appa.xml:39(para) 
msgid "Open files to diff/merge"
msgstr ""

#: source/en/tme_appa.xml:45(term) 
msgid "Ctrl-S"
msgstr ""

#: source/en/tme_appa.xml:47(para) 
msgid "Save the changes"
msgstr ""

#: source/en/tme_appa.xml:53(term) 
msgid "Ctrl-Shift-S"
msgstr ""

#: source/en/tme_appa.xml:55(para) 
msgid "Save as..."
msgstr ""

#: source/en/tme_appa.xml:61(term) 
msgid "F7 or cursor-right"
msgstr ""

#: source/en/tme_appa.xml:63(para) 
msgid "Go to next difference"
msgstr ""

#: source/en/tme_appa.xml:69(term) 
msgid "Shift-F7 or cursor-left"
msgstr ""

#: source/en/tme_appa.xml:71(para) 
msgid "Go to previous difference"
msgstr ""

#: source/en/tme_appa.xml:77(term) 
msgid "Ctrl-D"
msgstr ""

#: source/en/tme_appa.xml:79(para) 
msgid "Toggle between one-pane diff and two-pane diff"
msgstr ""

#: source/en/tme_appa.xml:85(term) 
msgid "Ctrl-R"
msgstr ""

#: source/en/tme_appa.xml:87(para) 
msgid "Reload the files and revert all changes made"
msgstr ""

#: source/en/tme_appa.xml:93(term) 
msgid "Ctrl-T"
msgstr ""

#: source/en/tme_appa.xml:95(para) 
msgid "Toggles between showing whitespaces or not"
msgstr ""

#: source/en/Pubdate.xml:2(pubdate) 
msgid "2005/04/13 18:11:01"
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2.
#: source/en/Pubdate.xml:0(None) 
msgid "translator-credits"
msgstr ""

